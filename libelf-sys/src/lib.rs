/* automatically generated by rust-bindgen */

#![allow(bad_style)]
extern crate libc;
use libc::{time_t, uid_t, gid_t, mode_t};

pub const EI_NIDENT: ::libc::c_uint = 16;
pub const EI_MAG0: ::libc::c_uint = 0;
pub const ELFMAG0: ::libc::c_uint = 127;
pub const EI_MAG1: ::libc::c_uint = 1;
pub const ELFMAG1: u8 = b'E';
pub const EI_MAG2: ::libc::c_uint = 2;
pub const ELFMAG2: u8 = b'L';
pub const EI_MAG3: ::libc::c_uint = 3;
pub const ELFMAG3: u8 = b'F';
pub const ELFMAG: &'static [u8; 5usize] = b"\x7fELF\x00";
pub const EI_CLASS: ::libc::c_uint = 4;
pub const ELFCLASSNONE: ::libc::c_uint = 0;
pub const ELFCLASS32: ::libc::c_uint = 1;
pub const ELFCLASS64: ::libc::c_uint = 2;
pub const ELFCLASSNUM: ::libc::c_uint = 3;
pub const EI_DATA: ::libc::c_uint = 5;
pub const ELFDATANONE: ::libc::c_uint = 0;
pub const ELFDATA2LSB: ::libc::c_uint = 1;
pub const ELFDATA2MSB: ::libc::c_uint = 2;
pub const ELFDATANUM: ::libc::c_uint = 3;
pub const EI_VERSION: ::libc::c_uint = 6;
pub const EI_OSABI: ::libc::c_uint = 7;
pub const ELFOSABI_NONE: ::libc::c_uint = 0;
pub const ELFOSABI_SYSV: ::libc::c_uint = 0;
pub const ELFOSABI_HPUX: ::libc::c_uint = 1;
pub const ELFOSABI_NETBSD: ::libc::c_uint = 2;
pub const ELFOSABI_GNU: ::libc::c_uint = 3;
pub const ELFOSABI_LINUX: ::libc::c_uint = 3;
pub const ELFOSABI_SOLARIS: ::libc::c_uint = 6;
pub const ELFOSABI_AIX: ::libc::c_uint = 7;
pub const ELFOSABI_IRIX: ::libc::c_uint = 8;
pub const ELFOSABI_FREEBSD: ::libc::c_uint = 9;
pub const ELFOSABI_TRU64: ::libc::c_uint = 10;
pub const ELFOSABI_MODESTO: ::libc::c_uint = 11;
pub const ELFOSABI_OPENBSD: ::libc::c_uint = 12;
pub const ELFOSABI_ARM_AEABI: ::libc::c_uint = 64;
pub const ELFOSABI_ARM: ::libc::c_uint = 97;
pub const ELFOSABI_STANDALONE: ::libc::c_uint = 255;
pub const EI_ABIVERSION: ::libc::c_uint = 8;
pub const EI_PAD: ::libc::c_uint = 9;
pub const ET_NONE: ::libc::c_uint = 0;
pub const ET_REL: ::libc::c_uint = 1;
pub const ET_EXEC: ::libc::c_uint = 2;
pub const ET_DYN: ::libc::c_uint = 3;
pub const ET_CORE: ::libc::c_uint = 4;
pub const ET_NUM: ::libc::c_uint = 5;
pub const ET_LOOS: ::libc::c_uint = 65024;
pub const ET_HIOS: ::libc::c_uint = 65279;
pub const ET_LOPROC: ::libc::c_uint = 65280;
pub const ET_HIPROC: ::libc::c_uint = 65535;
pub const EM_NONE: ::libc::c_uint = 0;
pub const EM_M32: ::libc::c_uint = 1;
pub const EM_SPARC: ::libc::c_uint = 2;
pub const EM_386: ::libc::c_uint = 3;
pub const EM_68K: ::libc::c_uint = 4;
pub const EM_88K: ::libc::c_uint = 5;
pub const EM_IAMCU: ::libc::c_uint = 6;
pub const EM_860: ::libc::c_uint = 7;
pub const EM_MIPS: ::libc::c_uint = 8;
pub const EM_S370: ::libc::c_uint = 9;
pub const EM_MIPS_RS3_LE: ::libc::c_uint = 10;
pub const EM_PARISC: ::libc::c_uint = 15;
pub const EM_VPP500: ::libc::c_uint = 17;
pub const EM_SPARC32PLUS: ::libc::c_uint = 18;
pub const EM_960: ::libc::c_uint = 19;
pub const EM_PPC: ::libc::c_uint = 20;
pub const EM_PPC64: ::libc::c_uint = 21;
pub const EM_S390: ::libc::c_uint = 22;
pub const EM_SPU: ::libc::c_uint = 23;
pub const EM_V800: ::libc::c_uint = 36;
pub const EM_FR20: ::libc::c_uint = 37;
pub const EM_RH32: ::libc::c_uint = 38;
pub const EM_RCE: ::libc::c_uint = 39;
pub const EM_ARM: ::libc::c_uint = 40;
pub const EM_FAKE_ALPHA: ::libc::c_uint = 41;
pub const EM_SH: ::libc::c_uint = 42;
pub const EM_SPARCV9: ::libc::c_uint = 43;
pub const EM_TRICORE: ::libc::c_uint = 44;
pub const EM_ARC: ::libc::c_uint = 45;
pub const EM_H8_300: ::libc::c_uint = 46;
pub const EM_H8_300H: ::libc::c_uint = 47;
pub const EM_H8S: ::libc::c_uint = 48;
pub const EM_H8_500: ::libc::c_uint = 49;
pub const EM_IA_64: ::libc::c_uint = 50;
pub const EM_MIPS_X: ::libc::c_uint = 51;
pub const EM_COLDFIRE: ::libc::c_uint = 52;
pub const EM_68HC12: ::libc::c_uint = 53;
pub const EM_MMA: ::libc::c_uint = 54;
pub const EM_PCP: ::libc::c_uint = 55;
pub const EM_NCPU: ::libc::c_uint = 56;
pub const EM_NDR1: ::libc::c_uint = 57;
pub const EM_STARCORE: ::libc::c_uint = 58;
pub const EM_ME16: ::libc::c_uint = 59;
pub const EM_ST100: ::libc::c_uint = 60;
pub const EM_TINYJ: ::libc::c_uint = 61;
pub const EM_X86_64: ::libc::c_uint = 62;
pub const EM_PDSP: ::libc::c_uint = 63;
pub const EM_PDP10: ::libc::c_uint = 64;
pub const EM_PDP11: ::libc::c_uint = 65;
pub const EM_FX66: ::libc::c_uint = 66;
pub const EM_ST9PLUS: ::libc::c_uint = 67;
pub const EM_ST7: ::libc::c_uint = 68;
pub const EM_68HC16: ::libc::c_uint = 69;
pub const EM_68HC11: ::libc::c_uint = 70;
pub const EM_68HC08: ::libc::c_uint = 71;
pub const EM_68HC05: ::libc::c_uint = 72;
pub const EM_SVX: ::libc::c_uint = 73;
pub const EM_ST19: ::libc::c_uint = 74;
pub const EM_VAX: ::libc::c_uint = 75;
pub const EM_CRIS: ::libc::c_uint = 76;
pub const EM_JAVELIN: ::libc::c_uint = 77;
pub const EM_FIREPATH: ::libc::c_uint = 78;
pub const EM_ZSP: ::libc::c_uint = 79;
pub const EM_MMIX: ::libc::c_uint = 80;
pub const EM_HUANY: ::libc::c_uint = 81;
pub const EM_PRISM: ::libc::c_uint = 82;
pub const EM_AVR: ::libc::c_uint = 83;
pub const EM_FR30: ::libc::c_uint = 84;
pub const EM_D10V: ::libc::c_uint = 85;
pub const EM_D30V: ::libc::c_uint = 86;
pub const EM_V850: ::libc::c_uint = 87;
pub const EM_M32R: ::libc::c_uint = 88;
pub const EM_MN10300: ::libc::c_uint = 89;
pub const EM_MN10200: ::libc::c_uint = 90;
pub const EM_PJ: ::libc::c_uint = 91;
pub const EM_OPENRISC: ::libc::c_uint = 92;
pub const EM_ARC_COMPACT: ::libc::c_uint = 93;
pub const EM_XTENSA: ::libc::c_uint = 94;
pub const EM_VIDEOCORE: ::libc::c_uint = 95;
pub const EM_TMM_GPP: ::libc::c_uint = 96;
pub const EM_NS32K: ::libc::c_uint = 97;
pub const EM_TPC: ::libc::c_uint = 98;
pub const EM_SNP1K: ::libc::c_uint = 99;
pub const EM_ST200: ::libc::c_uint = 100;
pub const EM_IP2K: ::libc::c_uint = 101;
pub const EM_MAX: ::libc::c_uint = 102;
pub const EM_CR: ::libc::c_uint = 103;
pub const EM_F2MC16: ::libc::c_uint = 104;
pub const EM_MSP430: ::libc::c_uint = 105;
pub const EM_BLACKFIN: ::libc::c_uint = 106;
pub const EM_SE_C33: ::libc::c_uint = 107;
pub const EM_SEP: ::libc::c_uint = 108;
pub const EM_ARCA: ::libc::c_uint = 109;
pub const EM_UNICORE: ::libc::c_uint = 110;
pub const EM_EXCESS: ::libc::c_uint = 111;
pub const EM_DXP: ::libc::c_uint = 112;
pub const EM_ALTERA_NIOS2: ::libc::c_uint = 113;
pub const EM_CRX: ::libc::c_uint = 114;
pub const EM_XGATE: ::libc::c_uint = 115;
pub const EM_C166: ::libc::c_uint = 116;
pub const EM_M16C: ::libc::c_uint = 117;
pub const EM_DSPIC30F: ::libc::c_uint = 118;
pub const EM_CE: ::libc::c_uint = 119;
pub const EM_M32C: ::libc::c_uint = 120;
pub const EM_TSK3000: ::libc::c_uint = 131;
pub const EM_RS08: ::libc::c_uint = 132;
pub const EM_SHARC: ::libc::c_uint = 133;
pub const EM_ECOG2: ::libc::c_uint = 134;
pub const EM_SCORE7: ::libc::c_uint = 135;
pub const EM_DSP24: ::libc::c_uint = 136;
pub const EM_VIDEOCORE3: ::libc::c_uint = 137;
pub const EM_LATTICEMICO32: ::libc::c_uint = 138;
pub const EM_SE_C17: ::libc::c_uint = 139;
pub const EM_TI_C6000: ::libc::c_uint = 140;
pub const EM_TI_C2000: ::libc::c_uint = 141;
pub const EM_TI_C5500: ::libc::c_uint = 142;
pub const EM_TI_ARP32: ::libc::c_uint = 143;
pub const EM_TI_PRU: ::libc::c_uint = 144;
pub const EM_MMDSP_PLUS: ::libc::c_uint = 160;
pub const EM_CYPRESS_M8C: ::libc::c_uint = 161;
pub const EM_R32C: ::libc::c_uint = 162;
pub const EM_TRIMEDIA: ::libc::c_uint = 163;
pub const EM_QDSP6: ::libc::c_uint = 164;
pub const EM_8051: ::libc::c_uint = 165;
pub const EM_STXP7X: ::libc::c_uint = 166;
pub const EM_NDS32: ::libc::c_uint = 167;
pub const EM_ECOG1X: ::libc::c_uint = 168;
pub const EM_MAXQ30: ::libc::c_uint = 169;
pub const EM_XIMO16: ::libc::c_uint = 170;
pub const EM_MANIK: ::libc::c_uint = 171;
pub const EM_CRAYNV2: ::libc::c_uint = 172;
pub const EM_RX: ::libc::c_uint = 173;
pub const EM_METAG: ::libc::c_uint = 174;
pub const EM_MCST_ELBRUS: ::libc::c_uint = 175;
pub const EM_ECOG16: ::libc::c_uint = 176;
pub const EM_CR16: ::libc::c_uint = 177;
pub const EM_ETPU: ::libc::c_uint = 178;
pub const EM_SLE9X: ::libc::c_uint = 179;
pub const EM_L10M: ::libc::c_uint = 180;
pub const EM_K10M: ::libc::c_uint = 181;
pub const EM_AARCH64: ::libc::c_uint = 183;
pub const EM_AVR32: ::libc::c_uint = 185;
pub const EM_STM8: ::libc::c_uint = 186;
pub const EM_TILE64: ::libc::c_uint = 187;
pub const EM_TILEPRO: ::libc::c_uint = 188;
pub const EM_MICROBLAZE: ::libc::c_uint = 189;
pub const EM_CUDA: ::libc::c_uint = 190;
pub const EM_TILEGX: ::libc::c_uint = 191;
pub const EM_CLOUDSHIELD: ::libc::c_uint = 192;
pub const EM_COREA_1ST: ::libc::c_uint = 193;
pub const EM_COREA_2ND: ::libc::c_uint = 194;
pub const EM_ARC_COMPACT2: ::libc::c_uint = 195;
pub const EM_OPEN8: ::libc::c_uint = 196;
pub const EM_RL78: ::libc::c_uint = 197;
pub const EM_VIDEOCORE5: ::libc::c_uint = 198;
pub const EM_78KOR: ::libc::c_uint = 199;
pub const EM_56800EX: ::libc::c_uint = 200;
pub const EM_BA1: ::libc::c_uint = 201;
pub const EM_BA2: ::libc::c_uint = 202;
pub const EM_XCORE: ::libc::c_uint = 203;
pub const EM_MCHP_PIC: ::libc::c_uint = 204;
pub const EM_KM32: ::libc::c_uint = 210;
pub const EM_KMX32: ::libc::c_uint = 211;
pub const EM_EMX16: ::libc::c_uint = 212;
pub const EM_EMX8: ::libc::c_uint = 213;
pub const EM_KVARC: ::libc::c_uint = 214;
pub const EM_CDP: ::libc::c_uint = 215;
pub const EM_COGE: ::libc::c_uint = 216;
pub const EM_COOL: ::libc::c_uint = 217;
pub const EM_NORC: ::libc::c_uint = 218;
pub const EM_CSR_KALIMBA: ::libc::c_uint = 219;
pub const EM_Z80: ::libc::c_uint = 220;
pub const EM_VISIUM: ::libc::c_uint = 221;
pub const EM_FT32: ::libc::c_uint = 222;
pub const EM_MOXIE: ::libc::c_uint = 223;
pub const EM_AMDGPU: ::libc::c_uint = 224;
pub const EM_RISCV: ::libc::c_uint = 243;
pub const EM_BPF: ::libc::c_uint = 247;
pub const EM_NUM: ::libc::c_uint = 248;
pub const EM_ARC_A5: ::libc::c_uint = 93;
pub const EM_ALPHA: ::libc::c_uint = 36902;
pub const EV_NONE: ::libc::c_uint = 0;
pub const EV_CURRENT: ::libc::c_uint = 1;
pub const EV_NUM: ::libc::c_uint = 2;
pub const SHN_UNDEF: ::libc::c_uint = 0;
pub const SHN_LORESERVE: ::libc::c_uint = 65280;
pub const SHN_LOPROC: ::libc::c_uint = 65280;
pub const SHN_BEFORE: ::libc::c_uint = 65280;
pub const SHN_AFTER: ::libc::c_uint = 65281;
pub const SHN_HIPROC: ::libc::c_uint = 65311;
pub const SHN_LOOS: ::libc::c_uint = 65312;
pub const SHN_HIOS: ::libc::c_uint = 65343;
pub const SHN_ABS: ::libc::c_uint = 65521;
pub const SHN_COMMON: ::libc::c_uint = 65522;
pub const SHN_XINDEX: ::libc::c_uint = 65535;
pub const SHN_HIRESERVE: ::libc::c_uint = 65535;
pub const SHT_NULL: ::libc::c_uint = 0;
pub const SHT_PROGBITS: ::libc::c_uint = 1;
pub const SHT_SYMTAB: ::libc::c_uint = 2;
pub const SHT_STRTAB: ::libc::c_uint = 3;
pub const SHT_RELA: ::libc::c_uint = 4;
pub const SHT_HASH: ::libc::c_uint = 5;
pub const SHT_DYNAMIC: ::libc::c_uint = 6;
pub const SHT_NOTE: ::libc::c_uint = 7;
pub const SHT_NOBITS: ::libc::c_uint = 8;
pub const SHT_REL: ::libc::c_uint = 9;
pub const SHT_SHLIB: ::libc::c_uint = 10;
pub const SHT_DYNSYM: ::libc::c_uint = 11;
pub const SHT_INIT_ARRAY: ::libc::c_uint = 14;
pub const SHT_FINI_ARRAY: ::libc::c_uint = 15;
pub const SHT_PREINIT_ARRAY: ::libc::c_uint = 16;
pub const SHT_GROUP: ::libc::c_uint = 17;
pub const SHT_SYMTAB_SHNDX: ::libc::c_uint = 18;
pub const SHT_NUM: ::libc::c_uint = 19;
pub const SHT_LOOS: ::libc::c_uint = 1610612736;
pub const SHT_GNU_ATTRIBUTES: ::libc::c_uint = 1879048181;
pub const SHT_GNU_HASH: ::libc::c_uint = 1879048182;
pub const SHT_GNU_LIBLIST: ::libc::c_uint = 1879048183;
pub const SHT_CHECKSUM: ::libc::c_uint = 1879048184;
pub const SHT_LOSUNW: ::libc::c_uint = 1879048186;
pub const SHT_SUNW_move: ::libc::c_uint = 1879048186;
pub const SHT_SUNW_COMDAT: ::libc::c_uint = 1879048187;
pub const SHT_SUNW_syminfo: ::libc::c_uint = 1879048188;
pub const SHT_GNU_verdef: ::libc::c_uint = 1879048189;
pub const SHT_GNU_verneed: ::libc::c_uint = 1879048190;
pub const SHT_GNU_versym: ::libc::c_uint = 1879048191;
pub const SHT_HISUNW: ::libc::c_uint = 1879048191;
pub const SHT_HIOS: ::libc::c_uint = 1879048191;
pub const SHT_LOPROC: ::libc::c_uint = 1879048192;
pub const SHT_HIPROC: ::libc::c_uint = 2147483647;
pub const SHT_LOUSER: ::libc::c_uint = 2147483648;
pub const SHT_HIUSER: ::libc::c_uint = 2415919103;
pub const SHF_WRITE: ::libc::c_uint = 1;
pub const SHF_ALLOC: ::libc::c_uint = 2;
pub const SHF_EXECINSTR: ::libc::c_uint = 4;
pub const SHF_MERGE: ::libc::c_uint = 16;
pub const SHF_STRINGS: ::libc::c_uint = 32;
pub const SHF_INFO_LINK: ::libc::c_uint = 64;
pub const SHF_LINK_ORDER: ::libc::c_uint = 128;
pub const SHF_OS_NONCONFORMING: ::libc::c_uint = 256;
pub const SHF_GROUP: ::libc::c_uint = 512;
pub const SHF_TLS: ::libc::c_uint = 1024;
pub const SHF_COMPRESSED: ::libc::c_uint = 2048;
pub const SHF_MASKOS: ::libc::c_uint = 267386880;
pub const SHF_MASKPROC: ::libc::c_uint = 4026531840;
pub const SHF_ORDERED: ::libc::c_uint = 1073741824;
pub const SHF_EXCLUDE: ::libc::c_uint = 2147483648;
pub const ELFCOMPRESS_ZLIB: ::libc::c_uint = 1;
pub const ELFCOMPRESS_LOOS: ::libc::c_uint = 1610612736;
pub const ELFCOMPRESS_HIOS: ::libc::c_uint = 1879048191;
pub const ELFCOMPRESS_LOPROC: ::libc::c_uint = 1879048192;
pub const ELFCOMPRESS_HIPROC: ::libc::c_uint = 2147483647;
pub const SYMINFO_BT_SELF: ::libc::c_uint = 65535;
pub const SYMINFO_BT_PARENT: ::libc::c_uint = 65534;
pub const SYMINFO_BT_LOWRESERVE: ::libc::c_uint = 65280;
pub const SYMINFO_FLG_DIRECT: ::libc::c_uint = 1;
pub const SYMINFO_FLG_PASSTHRU: ::libc::c_uint = 2;
pub const SYMINFO_FLG_COPY: ::libc::c_uint = 4;
pub const SYMINFO_FLG_LAZYLOAD: ::libc::c_uint = 8;
pub const SYMINFO_NONE: ::libc::c_uint = 0;
pub const SYMINFO_CURRENT: ::libc::c_uint = 1;
pub const SYMINFO_NUM: ::libc::c_uint = 2;
pub const STB_LOCAL: ::libc::c_uint = 0;
pub const STB_GLOBAL: ::libc::c_uint = 1;
pub const STB_WEAK: ::libc::c_uint = 2;
pub const STB_NUM: ::libc::c_uint = 3;
pub const STB_LOOS: ::libc::c_uint = 10;
pub const STB_GNU_UNIQUE: ::libc::c_uint = 10;
pub const STB_HIOS: ::libc::c_uint = 12;
pub const STB_LOPROC: ::libc::c_uint = 13;
pub const STB_HIPROC: ::libc::c_uint = 15;
pub const STT_NOTYPE: ::libc::c_uint = 0;
pub const STT_OBJECT: ::libc::c_uint = 1;
pub const STT_FUNC: ::libc::c_uint = 2;
pub const STT_SECTION: ::libc::c_uint = 3;
pub const STT_FILE: ::libc::c_uint = 4;
pub const STT_COMMON: ::libc::c_uint = 5;
pub const STT_TLS: ::libc::c_uint = 6;
pub const STT_NUM: ::libc::c_uint = 7;
pub const STT_LOOS: ::libc::c_uint = 10;
pub const STT_GNU_IFUNC: ::libc::c_uint = 10;
pub const STT_HIOS: ::libc::c_uint = 12;
pub const STT_LOPROC: ::libc::c_uint = 13;
pub const STT_HIPROC: ::libc::c_uint = 15;
pub const STN_UNDEF: ::libc::c_uint = 0;
pub const STV_DEFAULT: ::libc::c_uint = 0;
pub const STV_INTERNAL: ::libc::c_uint = 1;
pub const STV_HIDDEN: ::libc::c_uint = 2;
pub const STV_PROTECTED: ::libc::c_uint = 3;
pub const PN_XNUM: ::libc::c_uint = 65535;
pub const PT_NULL: ::libc::c_uint = 0;
pub const PT_LOAD: ::libc::c_uint = 1;
pub const PT_DYNAMIC: ::libc::c_uint = 2;
pub const PT_INTERP: ::libc::c_uint = 3;
pub const PT_NOTE: ::libc::c_uint = 4;
pub const PT_SHLIB: ::libc::c_uint = 5;
pub const PT_PHDR: ::libc::c_uint = 6;
pub const PT_TLS: ::libc::c_uint = 7;
pub const PT_NUM: ::libc::c_uint = 8;
pub const PT_LOOS: ::libc::c_uint = 1610612736;
pub const PT_GNU_EH_FRAME: ::libc::c_uint = 1685382480;
pub const PT_GNU_STACK: ::libc::c_uint = 1685382481;
pub const PT_GNU_RELRO: ::libc::c_uint = 1685382482;
pub const PT_LOSUNW: ::libc::c_uint = 1879048186;
pub const PT_SUNWBSS: ::libc::c_uint = 1879048186;
pub const PT_SUNWSTACK: ::libc::c_uint = 1879048187;
pub const PT_HISUNW: ::libc::c_uint = 1879048191;
pub const PT_HIOS: ::libc::c_uint = 1879048191;
pub const PT_LOPROC: ::libc::c_uint = 1879048192;
pub const PT_HIPROC: ::libc::c_uint = 2147483647;
pub const PF_X: ::libc::c_uint = 1;
pub const PF_W: ::libc::c_uint = 2;
pub const PF_R: ::libc::c_uint = 4;
pub const PF_MASKOS: ::libc::c_uint = 267386880;
pub const PF_MASKPROC: ::libc::c_uint = 4026531840;
pub const NT_PRSTATUS: ::libc::c_uint = 1;
pub const NT_FPREGSET: ::libc::c_uint = 2;
pub const NT_PRPSINFO: ::libc::c_uint = 3;
pub const NT_PRXREG: ::libc::c_uint = 4;
pub const NT_TASKSTRUCT: ::libc::c_uint = 4;
pub const NT_PLATFORM: ::libc::c_uint = 5;
pub const NT_AUXV: ::libc::c_uint = 6;
pub const NT_GWINDOWS: ::libc::c_uint = 7;
pub const NT_ASRS: ::libc::c_uint = 8;
pub const NT_PSTATUS: ::libc::c_uint = 10;
pub const NT_PSINFO: ::libc::c_uint = 13;
pub const NT_PRCRED: ::libc::c_uint = 14;
pub const NT_UTSNAME: ::libc::c_uint = 15;
pub const NT_LWPSTATUS: ::libc::c_uint = 16;
pub const NT_LWPSINFO: ::libc::c_uint = 17;
pub const NT_PRFPXREG: ::libc::c_uint = 20;
pub const NT_SIGINFO: ::libc::c_uint = 1397311305;
pub const NT_FILE: ::libc::c_uint = 1179208773;
pub const NT_PRXFPREG: ::libc::c_uint = 1189489535;
pub const NT_PPC_VMX: ::libc::c_uint = 256;
pub const NT_PPC_SPE: ::libc::c_uint = 257;
pub const NT_PPC_VSX: ::libc::c_uint = 258;
pub const NT_386_TLS: ::libc::c_uint = 512;
pub const NT_PPC_TM_SPR: ::libc::c_uint = 268;
pub const NT_386_IOPERM: ::libc::c_uint = 513;
pub const NT_X86_XSTATE: ::libc::c_uint = 514;
pub const NT_S390_HIGH_GPRS: ::libc::c_uint = 768;
pub const NT_S390_TIMER: ::libc::c_uint = 769;
pub const NT_S390_TODCMP: ::libc::c_uint = 770;
pub const NT_S390_TODPREG: ::libc::c_uint = 771;
pub const NT_S390_CTRS: ::libc::c_uint = 772;
pub const NT_S390_PREFIX: ::libc::c_uint = 773;
pub const NT_S390_LAST_BREAK: ::libc::c_uint = 774;
pub const NT_S390_SYSTEM_CALL: ::libc::c_uint = 775;
pub const NT_S390_TDB: ::libc::c_uint = 776;
pub const NT_ARM_VFP: ::libc::c_uint = 1024;
pub const NT_ARM_TLS: ::libc::c_uint = 1025;
pub const NT_ARM_HW_BREAK: ::libc::c_uint = 1026;
pub const NT_ARM_HW_WATCH: ::libc::c_uint = 1027;
pub const NT_ARM_SYSTEM_CALL: ::libc::c_uint = 1028;
pub const NT_VERSION: ::libc::c_uint = 1;
pub const DT_NULL: ::libc::c_uint = 0;
pub const DT_NEEDED: ::libc::c_uint = 1;
pub const DT_PLTRELSZ: ::libc::c_uint = 2;
pub const DT_PLTGOT: ::libc::c_uint = 3;
pub const DT_HASH: ::libc::c_uint = 4;
pub const DT_STRTAB: ::libc::c_uint = 5;
pub const DT_SYMTAB: ::libc::c_uint = 6;
pub const DT_RELA: ::libc::c_uint = 7;
pub const DT_RELASZ: ::libc::c_uint = 8;
pub const DT_RELAENT: ::libc::c_uint = 9;
pub const DT_STRSZ: ::libc::c_uint = 10;
pub const DT_SYMENT: ::libc::c_uint = 11;
pub const DT_INIT: ::libc::c_uint = 12;
pub const DT_FINI: ::libc::c_uint = 13;
pub const DT_SONAME: ::libc::c_uint = 14;
pub const DT_RPATH: ::libc::c_uint = 15;
pub const DT_SYMBOLIC: ::libc::c_uint = 16;
pub const DT_REL: ::libc::c_uint = 17;
pub const DT_RELSZ: ::libc::c_uint = 18;
pub const DT_RELENT: ::libc::c_uint = 19;
pub const DT_PLTREL: ::libc::c_uint = 20;
pub const DT_DEBUG: ::libc::c_uint = 21;
pub const DT_TEXTREL: ::libc::c_uint = 22;
pub const DT_JMPREL: ::libc::c_uint = 23;
pub const DT_BIND_NOW: ::libc::c_uint = 24;
pub const DT_INIT_ARRAY: ::libc::c_uint = 25;
pub const DT_FINI_ARRAY: ::libc::c_uint = 26;
pub const DT_INIT_ARRAYSZ: ::libc::c_uint = 27;
pub const DT_FINI_ARRAYSZ: ::libc::c_uint = 28;
pub const DT_RUNPATH: ::libc::c_uint = 29;
pub const DT_FLAGS: ::libc::c_uint = 30;
pub const DT_ENCODING: ::libc::c_uint = 32;
pub const DT_PREINIT_ARRAY: ::libc::c_uint = 32;
pub const DT_PREINIT_ARRAYSZ: ::libc::c_uint = 33;
pub const DT_NUM: ::libc::c_uint = 34;
pub const DT_LOOS: ::libc::c_uint = 1610612749;
pub const DT_HIOS: ::libc::c_uint = 1879044096;
pub const DT_LOPROC: ::libc::c_uint = 1879048192;
pub const DT_HIPROC: ::libc::c_uint = 2147483647;
pub const DT_VALRNGLO: ::libc::c_uint = 1879047424;
pub const DT_GNU_PRELINKED: ::libc::c_uint = 1879047669;
pub const DT_GNU_CONFLICTSZ: ::libc::c_uint = 1879047670;
pub const DT_GNU_LIBLISTSZ: ::libc::c_uint = 1879047671;
pub const DT_CHECKSUM: ::libc::c_uint = 1879047672;
pub const DT_PLTPADSZ: ::libc::c_uint = 1879047673;
pub const DT_MOVEENT: ::libc::c_uint = 1879047674;
pub const DT_MOVESZ: ::libc::c_uint = 1879047675;
pub const DT_FEATURE_1: ::libc::c_uint = 1879047676;
pub const DT_POSFLAG_1: ::libc::c_uint = 1879047677;
pub const DT_SYMINSZ: ::libc::c_uint = 1879047678;
pub const DT_SYMINENT: ::libc::c_uint = 1879047679;
pub const DT_VALRNGHI: ::libc::c_uint = 1879047679;
pub const DT_VALNUM: ::libc::c_uint = 12;
pub const DT_ADDRRNGLO: ::libc::c_uint = 1879047680;
pub const DT_GNU_HASH: ::libc::c_uint = 1879047925;
pub const DT_TLSDESC_PLT: ::libc::c_uint = 1879047926;
pub const DT_TLSDESC_GOT: ::libc::c_uint = 1879047927;
pub const DT_GNU_CONFLICT: ::libc::c_uint = 1879047928;
pub const DT_GNU_LIBLIST: ::libc::c_uint = 1879047929;
pub const DT_CONFIG: ::libc::c_uint = 1879047930;
pub const DT_DEPAUDIT: ::libc::c_uint = 1879047931;
pub const DT_AUDIT: ::libc::c_uint = 1879047932;
pub const DT_PLTPAD: ::libc::c_uint = 1879047933;
pub const DT_MOVETAB: ::libc::c_uint = 1879047934;
pub const DT_SYMINFO: ::libc::c_uint = 1879047935;
pub const DT_ADDRRNGHI: ::libc::c_uint = 1879047935;
pub const DT_ADDRNUM: ::libc::c_uint = 11;
pub const DT_VERSYM: ::libc::c_uint = 1879048176;
pub const DT_RELACOUNT: ::libc::c_uint = 1879048185;
pub const DT_RELCOUNT: ::libc::c_uint = 1879048186;
pub const DT_FLAGS_1: ::libc::c_uint = 1879048187;
pub const DT_VERDEF: ::libc::c_uint = 1879048188;
pub const DT_VERDEFNUM: ::libc::c_uint = 1879048189;
pub const DT_VERNEED: ::libc::c_uint = 1879048190;
pub const DT_VERNEEDNUM: ::libc::c_uint = 1879048191;
pub const DT_VERSIONTAGNUM: ::libc::c_uint = 16;
pub const DT_AUXILIARY: ::libc::c_uint = 2147483645;
pub const DT_FILTER: ::libc::c_uint = 2147483647;
pub const DT_EXTRANUM: ::libc::c_uint = 3;
pub const DF_ORIGIN: ::libc::c_uint = 1;
pub const DF_SYMBOLIC: ::libc::c_uint = 2;
pub const DF_TEXTREL: ::libc::c_uint = 4;
pub const DF_BIND_NOW: ::libc::c_uint = 8;
pub const DF_STATIC_TLS: ::libc::c_uint = 16;
pub const DF_1_NOW: ::libc::c_uint = 1;
pub const DF_1_GLOBAL: ::libc::c_uint = 2;
pub const DF_1_GROUP: ::libc::c_uint = 4;
pub const DF_1_NODELETE: ::libc::c_uint = 8;
pub const DF_1_LOADFLTR: ::libc::c_uint = 16;
pub const DF_1_INITFIRST: ::libc::c_uint = 32;
pub const DF_1_NOOPEN: ::libc::c_uint = 64;
pub const DF_1_ORIGIN: ::libc::c_uint = 128;
pub const DF_1_DIRECT: ::libc::c_uint = 256;
pub const DF_1_TRANS: ::libc::c_uint = 512;
pub const DF_1_INTERPOSE: ::libc::c_uint = 1024;
pub const DF_1_NODEFLIB: ::libc::c_uint = 2048;
pub const DF_1_NODUMP: ::libc::c_uint = 4096;
pub const DF_1_CONFALT: ::libc::c_uint = 8192;
pub const DF_1_ENDFILTEE: ::libc::c_uint = 16384;
pub const DF_1_DISPRELDNE: ::libc::c_uint = 32768;
pub const DF_1_DISPRELPND: ::libc::c_uint = 65536;
pub const DF_1_NODIRECT: ::libc::c_uint = 131072;
pub const DF_1_IGNMULDEF: ::libc::c_uint = 262144;
pub const DF_1_NOKSYMS: ::libc::c_uint = 524288;
pub const DF_1_NOHDR: ::libc::c_uint = 1048576;
pub const DF_1_EDITED: ::libc::c_uint = 2097152;
pub const DF_1_NORELOC: ::libc::c_uint = 4194304;
pub const DF_1_SYMINTPOSE: ::libc::c_uint = 8388608;
pub const DF_1_GLOBAUDIT: ::libc::c_uint = 16777216;
pub const DF_1_SINGLETON: ::libc::c_uint = 33554432;
pub const DTF_1_PARINIT: ::libc::c_uint = 1;
pub const DTF_1_CONFEXP: ::libc::c_uint = 2;
pub const DF_P1_LAZYLOAD: ::libc::c_uint = 1;
pub const DF_P1_GROUPPERM: ::libc::c_uint = 2;
pub const VER_DEF_NONE: ::libc::c_uint = 0;
pub const VER_DEF_CURRENT: ::libc::c_uint = 1;
pub const VER_DEF_NUM: ::libc::c_uint = 2;
pub const VER_FLG_BASE: ::libc::c_uint = 1;
pub const VER_FLG_WEAK: ::libc::c_uint = 2;
pub const VER_NDX_LOCAL: ::libc::c_uint = 0;
pub const VER_NDX_GLOBAL: ::libc::c_uint = 1;
pub const VER_NDX_LORESERVE: ::libc::c_uint = 65280;
pub const VER_NDX_ELIMINATE: ::libc::c_uint = 65281;
pub const VER_NEED_NONE: ::libc::c_uint = 0;
pub const VER_NEED_CURRENT: ::libc::c_uint = 1;
pub const VER_NEED_NUM: ::libc::c_uint = 2;
pub const AT_NULL: ::libc::c_uint = 0;
pub const AT_IGNORE: ::libc::c_uint = 1;
pub const AT_EXECFD: ::libc::c_uint = 2;
pub const AT_PHDR: ::libc::c_uint = 3;
pub const AT_PHENT: ::libc::c_uint = 4;
pub const AT_PHNUM: ::libc::c_uint = 5;
pub const AT_PAGESZ: ::libc::c_uint = 6;
pub const AT_BASE: ::libc::c_uint = 7;
pub const AT_FLAGS: ::libc::c_uint = 8;
pub const AT_ENTRY: ::libc::c_uint = 9;
pub const AT_NOTELF: ::libc::c_uint = 10;
pub const AT_UID: ::libc::c_uint = 11;
pub const AT_EUID: ::libc::c_uint = 12;
pub const AT_GID: ::libc::c_uint = 13;
pub const AT_EGID: ::libc::c_uint = 14;
pub const AT_CLKTCK: ::libc::c_uint = 17;
pub const AT_PLATFORM: ::libc::c_uint = 15;
pub const AT_HWCAP: ::libc::c_uint = 16;
pub const AT_FPUCW: ::libc::c_uint = 18;
pub const AT_DCACHEBSIZE: ::libc::c_uint = 19;
pub const AT_ICACHEBSIZE: ::libc::c_uint = 20;
pub const AT_UCACHEBSIZE: ::libc::c_uint = 21;
pub const AT_IGNOREPPC: ::libc::c_uint = 22;
pub const AT_SECURE: ::libc::c_uint = 23;
pub const AT_BASE_PLATFORM: ::libc::c_uint = 24;
pub const AT_RANDOM: ::libc::c_uint = 25;
pub const AT_HWCAP2: ::libc::c_uint = 26;
pub const AT_EXECFN: ::libc::c_uint = 31;
pub const AT_SYSINFO: ::libc::c_uint = 32;
pub const AT_SYSINFO_EHDR: ::libc::c_uint = 33;
pub const AT_L1I_CACHESHAPE: ::libc::c_uint = 34;
pub const AT_L1D_CACHESHAPE: ::libc::c_uint = 35;
pub const AT_L2_CACHESHAPE: ::libc::c_uint = 36;
pub const AT_L3_CACHESHAPE: ::libc::c_uint = 37;
pub const ELF_NOTE_SOLARIS: &'static [u8; 13usize] = b"SUNW Solaris\x00";
pub const ELF_NOTE_GNU: &'static [u8; 4usize] = b"GNU\x00";
pub const ELF_NOTE_PAGESIZE_HINT: ::libc::c_uint = 1;
pub const NT_GNU_ABI_TAG: ::libc::c_uint = 1;
pub const ELF_NOTE_ABI: ::libc::c_uint = 1;
pub const ELF_NOTE_OS_LINUX: ::libc::c_uint = 0;
pub const ELF_NOTE_OS_GNU: ::libc::c_uint = 1;
pub const ELF_NOTE_OS_SOLARIS2: ::libc::c_uint = 2;
pub const ELF_NOTE_OS_FREEBSD: ::libc::c_uint = 3;
pub const NT_GNU_HWCAP: ::libc::c_uint = 2;
pub const NT_GNU_BUILD_ID: ::libc::c_uint = 3;
pub const NT_GNU_GOLD_VERSION: ::libc::c_uint = 4;
pub const EF_CPU32: ::libc::c_uint = 8454144;
pub const R_68K_NONE: ::libc::c_uint = 0;
pub const R_68K_32: ::libc::c_uint = 1;
pub const R_68K_16: ::libc::c_uint = 2;
pub const R_68K_8: ::libc::c_uint = 3;
pub const R_68K_PC32: ::libc::c_uint = 4;
pub const R_68K_PC16: ::libc::c_uint = 5;
pub const R_68K_PC8: ::libc::c_uint = 6;
pub const R_68K_GOT32: ::libc::c_uint = 7;
pub const R_68K_GOT16: ::libc::c_uint = 8;
pub const R_68K_GOT8: ::libc::c_uint = 9;
pub const R_68K_GOT32O: ::libc::c_uint = 10;
pub const R_68K_GOT16O: ::libc::c_uint = 11;
pub const R_68K_GOT8O: ::libc::c_uint = 12;
pub const R_68K_PLT32: ::libc::c_uint = 13;
pub const R_68K_PLT16: ::libc::c_uint = 14;
pub const R_68K_PLT8: ::libc::c_uint = 15;
pub const R_68K_PLT32O: ::libc::c_uint = 16;
pub const R_68K_PLT16O: ::libc::c_uint = 17;
pub const R_68K_PLT8O: ::libc::c_uint = 18;
pub const R_68K_COPY: ::libc::c_uint = 19;
pub const R_68K_GLOB_DAT: ::libc::c_uint = 20;
pub const R_68K_JMP_SLOT: ::libc::c_uint = 21;
pub const R_68K_RELATIVE: ::libc::c_uint = 22;
pub const R_68K_TLS_GD32: ::libc::c_uint = 25;
pub const R_68K_TLS_GD16: ::libc::c_uint = 26;
pub const R_68K_TLS_GD8: ::libc::c_uint = 27;
pub const R_68K_TLS_LDM32: ::libc::c_uint = 28;
pub const R_68K_TLS_LDM16: ::libc::c_uint = 29;
pub const R_68K_TLS_LDM8: ::libc::c_uint = 30;
pub const R_68K_TLS_LDO32: ::libc::c_uint = 31;
pub const R_68K_TLS_LDO16: ::libc::c_uint = 32;
pub const R_68K_TLS_LDO8: ::libc::c_uint = 33;
pub const R_68K_TLS_IE32: ::libc::c_uint = 34;
pub const R_68K_TLS_IE16: ::libc::c_uint = 35;
pub const R_68K_TLS_IE8: ::libc::c_uint = 36;
pub const R_68K_TLS_LE32: ::libc::c_uint = 37;
pub const R_68K_TLS_LE16: ::libc::c_uint = 38;
pub const R_68K_TLS_LE8: ::libc::c_uint = 39;
pub const R_68K_TLS_DTPMOD32: ::libc::c_uint = 40;
pub const R_68K_TLS_DTPREL32: ::libc::c_uint = 41;
pub const R_68K_TLS_TPREL32: ::libc::c_uint = 42;
pub const R_68K_NUM: ::libc::c_uint = 43;
pub const R_386_NONE: ::libc::c_uint = 0;
pub const R_386_32: ::libc::c_uint = 1;
pub const R_386_PC32: ::libc::c_uint = 2;
pub const R_386_GOT32: ::libc::c_uint = 3;
pub const R_386_PLT32: ::libc::c_uint = 4;
pub const R_386_COPY: ::libc::c_uint = 5;
pub const R_386_GLOB_DAT: ::libc::c_uint = 6;
pub const R_386_JMP_SLOT: ::libc::c_uint = 7;
pub const R_386_RELATIVE: ::libc::c_uint = 8;
pub const R_386_GOTOFF: ::libc::c_uint = 9;
pub const R_386_GOTPC: ::libc::c_uint = 10;
pub const R_386_32PLT: ::libc::c_uint = 11;
pub const R_386_TLS_TPOFF: ::libc::c_uint = 14;
pub const R_386_TLS_IE: ::libc::c_uint = 15;
pub const R_386_TLS_GOTIE: ::libc::c_uint = 16;
pub const R_386_TLS_LE: ::libc::c_uint = 17;
pub const R_386_TLS_GD: ::libc::c_uint = 18;
pub const R_386_TLS_LDM: ::libc::c_uint = 19;
pub const R_386_16: ::libc::c_uint = 20;
pub const R_386_PC16: ::libc::c_uint = 21;
pub const R_386_8: ::libc::c_uint = 22;
pub const R_386_PC8: ::libc::c_uint = 23;
pub const R_386_TLS_GD_32: ::libc::c_uint = 24;
pub const R_386_TLS_GD_PUSH: ::libc::c_uint = 25;
pub const R_386_TLS_GD_CALL: ::libc::c_uint = 26;
pub const R_386_TLS_GD_POP: ::libc::c_uint = 27;
pub const R_386_TLS_LDM_32: ::libc::c_uint = 28;
pub const R_386_TLS_LDM_PUSH: ::libc::c_uint = 29;
pub const R_386_TLS_LDM_CALL: ::libc::c_uint = 30;
pub const R_386_TLS_LDM_POP: ::libc::c_uint = 31;
pub const R_386_TLS_LDO_32: ::libc::c_uint = 32;
pub const R_386_TLS_IE_32: ::libc::c_uint = 33;
pub const R_386_TLS_LE_32: ::libc::c_uint = 34;
pub const R_386_TLS_DTPMOD32: ::libc::c_uint = 35;
pub const R_386_TLS_DTPOFF32: ::libc::c_uint = 36;
pub const R_386_TLS_TPOFF32: ::libc::c_uint = 37;
pub const R_386_SIZE32: ::libc::c_uint = 38;
pub const R_386_TLS_GOTDESC: ::libc::c_uint = 39;
pub const R_386_TLS_DESC_CALL: ::libc::c_uint = 40;
pub const R_386_TLS_DESC: ::libc::c_uint = 41;
pub const R_386_IRELATIVE: ::libc::c_uint = 42;
pub const R_386_GOT32X: ::libc::c_uint = 43;
pub const R_386_NUM: ::libc::c_uint = 44;
pub const STT_SPARC_REGISTER: ::libc::c_uint = 13;
pub const EF_SPARCV9_MM: ::libc::c_uint = 3;
pub const EF_SPARCV9_TSO: ::libc::c_uint = 0;
pub const EF_SPARCV9_PSO: ::libc::c_uint = 1;
pub const EF_SPARCV9_RMO: ::libc::c_uint = 2;
pub const EF_SPARC_LEDATA: ::libc::c_uint = 8388608;
pub const EF_SPARC_EXT_MASK: ::libc::c_uint = 16776960;
pub const EF_SPARC_32PLUS: ::libc::c_uint = 256;
pub const EF_SPARC_SUN_US1: ::libc::c_uint = 512;
pub const EF_SPARC_HAL_R1: ::libc::c_uint = 1024;
pub const EF_SPARC_SUN_US3: ::libc::c_uint = 2048;
pub const R_SPARC_NONE: ::libc::c_uint = 0;
pub const R_SPARC_8: ::libc::c_uint = 1;
pub const R_SPARC_16: ::libc::c_uint = 2;
pub const R_SPARC_32: ::libc::c_uint = 3;
pub const R_SPARC_DISP8: ::libc::c_uint = 4;
pub const R_SPARC_DISP16: ::libc::c_uint = 5;
pub const R_SPARC_DISP32: ::libc::c_uint = 6;
pub const R_SPARC_WDISP30: ::libc::c_uint = 7;
pub const R_SPARC_WDISP22: ::libc::c_uint = 8;
pub const R_SPARC_HI22: ::libc::c_uint = 9;
pub const R_SPARC_22: ::libc::c_uint = 10;
pub const R_SPARC_13: ::libc::c_uint = 11;
pub const R_SPARC_LO10: ::libc::c_uint = 12;
pub const R_SPARC_GOT10: ::libc::c_uint = 13;
pub const R_SPARC_GOT13: ::libc::c_uint = 14;
pub const R_SPARC_GOT22: ::libc::c_uint = 15;
pub const R_SPARC_PC10: ::libc::c_uint = 16;
pub const R_SPARC_PC22: ::libc::c_uint = 17;
pub const R_SPARC_WPLT30: ::libc::c_uint = 18;
pub const R_SPARC_COPY: ::libc::c_uint = 19;
pub const R_SPARC_GLOB_DAT: ::libc::c_uint = 20;
pub const R_SPARC_JMP_SLOT: ::libc::c_uint = 21;
pub const R_SPARC_RELATIVE: ::libc::c_uint = 22;
pub const R_SPARC_UA32: ::libc::c_uint = 23;
pub const R_SPARC_PLT32: ::libc::c_uint = 24;
pub const R_SPARC_HIPLT22: ::libc::c_uint = 25;
pub const R_SPARC_LOPLT10: ::libc::c_uint = 26;
pub const R_SPARC_PCPLT32: ::libc::c_uint = 27;
pub const R_SPARC_PCPLT22: ::libc::c_uint = 28;
pub const R_SPARC_PCPLT10: ::libc::c_uint = 29;
pub const R_SPARC_10: ::libc::c_uint = 30;
pub const R_SPARC_11: ::libc::c_uint = 31;
pub const R_SPARC_64: ::libc::c_uint = 32;
pub const R_SPARC_OLO10: ::libc::c_uint = 33;
pub const R_SPARC_HH22: ::libc::c_uint = 34;
pub const R_SPARC_HM10: ::libc::c_uint = 35;
pub const R_SPARC_LM22: ::libc::c_uint = 36;
pub const R_SPARC_PC_HH22: ::libc::c_uint = 37;
pub const R_SPARC_PC_HM10: ::libc::c_uint = 38;
pub const R_SPARC_PC_LM22: ::libc::c_uint = 39;
pub const R_SPARC_WDISP16: ::libc::c_uint = 40;
pub const R_SPARC_WDISP19: ::libc::c_uint = 41;
pub const R_SPARC_GLOB_JMP: ::libc::c_uint = 42;
pub const R_SPARC_7: ::libc::c_uint = 43;
pub const R_SPARC_5: ::libc::c_uint = 44;
pub const R_SPARC_6: ::libc::c_uint = 45;
pub const R_SPARC_DISP64: ::libc::c_uint = 46;
pub const R_SPARC_PLT64: ::libc::c_uint = 47;
pub const R_SPARC_HIX22: ::libc::c_uint = 48;
pub const R_SPARC_LOX10: ::libc::c_uint = 49;
pub const R_SPARC_H44: ::libc::c_uint = 50;
pub const R_SPARC_M44: ::libc::c_uint = 51;
pub const R_SPARC_L44: ::libc::c_uint = 52;
pub const R_SPARC_REGISTER: ::libc::c_uint = 53;
pub const R_SPARC_UA64: ::libc::c_uint = 54;
pub const R_SPARC_UA16: ::libc::c_uint = 55;
pub const R_SPARC_TLS_GD_HI22: ::libc::c_uint = 56;
pub const R_SPARC_TLS_GD_LO10: ::libc::c_uint = 57;
pub const R_SPARC_TLS_GD_ADD: ::libc::c_uint = 58;
pub const R_SPARC_TLS_GD_CALL: ::libc::c_uint = 59;
pub const R_SPARC_TLS_LDM_HI22: ::libc::c_uint = 60;
pub const R_SPARC_TLS_LDM_LO10: ::libc::c_uint = 61;
pub const R_SPARC_TLS_LDM_ADD: ::libc::c_uint = 62;
pub const R_SPARC_TLS_LDM_CALL: ::libc::c_uint = 63;
pub const R_SPARC_TLS_LDO_HIX22: ::libc::c_uint = 64;
pub const R_SPARC_TLS_LDO_LOX10: ::libc::c_uint = 65;
pub const R_SPARC_TLS_LDO_ADD: ::libc::c_uint = 66;
pub const R_SPARC_TLS_IE_HI22: ::libc::c_uint = 67;
pub const R_SPARC_TLS_IE_LO10: ::libc::c_uint = 68;
pub const R_SPARC_TLS_IE_LD: ::libc::c_uint = 69;
pub const R_SPARC_TLS_IE_LDX: ::libc::c_uint = 70;
pub const R_SPARC_TLS_IE_ADD: ::libc::c_uint = 71;
pub const R_SPARC_TLS_LE_HIX22: ::libc::c_uint = 72;
pub const R_SPARC_TLS_LE_LOX10: ::libc::c_uint = 73;
pub const R_SPARC_TLS_DTPMOD32: ::libc::c_uint = 74;
pub const R_SPARC_TLS_DTPMOD64: ::libc::c_uint = 75;
pub const R_SPARC_TLS_DTPOFF32: ::libc::c_uint = 76;
pub const R_SPARC_TLS_DTPOFF64: ::libc::c_uint = 77;
pub const R_SPARC_TLS_TPOFF32: ::libc::c_uint = 78;
pub const R_SPARC_TLS_TPOFF64: ::libc::c_uint = 79;
pub const R_SPARC_GOTDATA_HIX22: ::libc::c_uint = 80;
pub const R_SPARC_GOTDATA_LOX10: ::libc::c_uint = 81;
pub const R_SPARC_GOTDATA_OP_HIX22: ::libc::c_uint = 82;
pub const R_SPARC_GOTDATA_OP_LOX10: ::libc::c_uint = 83;
pub const R_SPARC_GOTDATA_OP: ::libc::c_uint = 84;
pub const R_SPARC_H34: ::libc::c_uint = 85;
pub const R_SPARC_SIZE32: ::libc::c_uint = 86;
pub const R_SPARC_SIZE64: ::libc::c_uint = 87;
pub const R_SPARC_WDISP10: ::libc::c_uint = 88;
pub const R_SPARC_JMP_IREL: ::libc::c_uint = 248;
pub const R_SPARC_IRELATIVE: ::libc::c_uint = 249;
pub const R_SPARC_GNU_VTINHERIT: ::libc::c_uint = 250;
pub const R_SPARC_GNU_VTENTRY: ::libc::c_uint = 251;
pub const R_SPARC_REV32: ::libc::c_uint = 252;
pub const R_SPARC_NUM: ::libc::c_uint = 253;
pub const DT_SPARC_REGISTER: ::libc::c_uint = 1879048193;
pub const DT_SPARC_NUM: ::libc::c_uint = 2;
pub const EF_MIPS_NOREORDER: ::libc::c_uint = 1;
pub const EF_MIPS_PIC: ::libc::c_uint = 2;
pub const EF_MIPS_CPIC: ::libc::c_uint = 4;
pub const EF_MIPS_XGOT: ::libc::c_uint = 8;
pub const EF_MIPS_64BIT_WHIRL: ::libc::c_uint = 16;
pub const EF_MIPS_ABI2: ::libc::c_uint = 32;
pub const EF_MIPS_ABI_ON32: ::libc::c_uint = 64;
pub const EF_MIPS_FP64: ::libc::c_uint = 512;
pub const EF_MIPS_NAN2008: ::libc::c_uint = 1024;
pub const EF_MIPS_ARCH: ::libc::c_uint = 4026531840;
pub const EF_MIPS_ARCH_1: ::libc::c_uint = 0;
pub const EF_MIPS_ARCH_2: ::libc::c_uint = 268435456;
pub const EF_MIPS_ARCH_3: ::libc::c_uint = 536870912;
pub const EF_MIPS_ARCH_4: ::libc::c_uint = 805306368;
pub const EF_MIPS_ARCH_5: ::libc::c_uint = 1073741824;
pub const EF_MIPS_ARCH_32: ::libc::c_uint = 1342177280;
pub const EF_MIPS_ARCH_64: ::libc::c_uint = 1610612736;
pub const EF_MIPS_ARCH_32R2: ::libc::c_uint = 1879048192;
pub const EF_MIPS_ARCH_64R2: ::libc::c_uint = 2147483648;
pub const SHN_MIPS_ACOMMON: ::libc::c_uint = 65280;
pub const SHN_MIPS_TEXT: ::libc::c_uint = 65281;
pub const SHN_MIPS_DATA: ::libc::c_uint = 65282;
pub const SHN_MIPS_SCOMMON: ::libc::c_uint = 65283;
pub const SHN_MIPS_SUNDEFINED: ::libc::c_uint = 65284;
pub const SHT_MIPS_LIBLIST: ::libc::c_uint = 1879048192;
pub const SHT_MIPS_MSYM: ::libc::c_uint = 1879048193;
pub const SHT_MIPS_CONFLICT: ::libc::c_uint = 1879048194;
pub const SHT_MIPS_GPTAB: ::libc::c_uint = 1879048195;
pub const SHT_MIPS_UCODE: ::libc::c_uint = 1879048196;
pub const SHT_MIPS_DEBUG: ::libc::c_uint = 1879048197;
pub const SHT_MIPS_REGINFO: ::libc::c_uint = 1879048198;
pub const SHT_MIPS_PACKAGE: ::libc::c_uint = 1879048199;
pub const SHT_MIPS_PACKSYM: ::libc::c_uint = 1879048200;
pub const SHT_MIPS_RELD: ::libc::c_uint = 1879048201;
pub const SHT_MIPS_IFACE: ::libc::c_uint = 1879048203;
pub const SHT_MIPS_CONTENT: ::libc::c_uint = 1879048204;
pub const SHT_MIPS_OPTIONS: ::libc::c_uint = 1879048205;
pub const SHT_MIPS_SHDR: ::libc::c_uint = 1879048208;
pub const SHT_MIPS_FDESC: ::libc::c_uint = 1879048209;
pub const SHT_MIPS_EXTSYM: ::libc::c_uint = 1879048210;
pub const SHT_MIPS_DENSE: ::libc::c_uint = 1879048211;
pub const SHT_MIPS_PDESC: ::libc::c_uint = 1879048212;
pub const SHT_MIPS_LOCSYM: ::libc::c_uint = 1879048213;
pub const SHT_MIPS_AUXSYM: ::libc::c_uint = 1879048214;
pub const SHT_MIPS_OPTSYM: ::libc::c_uint = 1879048215;
pub const SHT_MIPS_LOCSTR: ::libc::c_uint = 1879048216;
pub const SHT_MIPS_LINE: ::libc::c_uint = 1879048217;
pub const SHT_MIPS_RFDESC: ::libc::c_uint = 1879048218;
pub const SHT_MIPS_DELTASYM: ::libc::c_uint = 1879048219;
pub const SHT_MIPS_DELTAINST: ::libc::c_uint = 1879048220;
pub const SHT_MIPS_DELTACLASS: ::libc::c_uint = 1879048221;
pub const SHT_MIPS_DWARF: ::libc::c_uint = 1879048222;
pub const SHT_MIPS_DELTADECL: ::libc::c_uint = 1879048223;
pub const SHT_MIPS_SYMBOL_LIB: ::libc::c_uint = 1879048224;
pub const SHT_MIPS_EVENTS: ::libc::c_uint = 1879048225;
pub const SHT_MIPS_TRANSLATE: ::libc::c_uint = 1879048226;
pub const SHT_MIPS_PIXIE: ::libc::c_uint = 1879048227;
pub const SHT_MIPS_XLATE: ::libc::c_uint = 1879048228;
pub const SHT_MIPS_XLATE_DEBUG: ::libc::c_uint = 1879048229;
pub const SHT_MIPS_WHIRL: ::libc::c_uint = 1879048230;
pub const SHT_MIPS_EH_REGION: ::libc::c_uint = 1879048231;
pub const SHT_MIPS_XLATE_OLD: ::libc::c_uint = 1879048232;
pub const SHT_MIPS_PDR_EXCEPTION: ::libc::c_uint = 1879048233;
pub const SHF_MIPS_GPREL: ::libc::c_uint = 268435456;
pub const SHF_MIPS_MERGE: ::libc::c_uint = 536870912;
pub const SHF_MIPS_ADDR: ::libc::c_uint = 1073741824;
pub const SHF_MIPS_STRINGS: ::libc::c_uint = 2147483648;
pub const SHF_MIPS_NOSTRIP: ::libc::c_uint = 134217728;
pub const SHF_MIPS_LOCAL: ::libc::c_uint = 67108864;
pub const SHF_MIPS_NAMES: ::libc::c_uint = 33554432;
pub const SHF_MIPS_NODUPE: ::libc::c_uint = 16777216;
pub const STO_MIPS_DEFAULT: ::libc::c_uint = 0;
pub const STO_MIPS_INTERNAL: ::libc::c_uint = 1;
pub const STO_MIPS_HIDDEN: ::libc::c_uint = 2;
pub const STO_MIPS_PROTECTED: ::libc::c_uint = 3;
pub const STO_MIPS_PLT: ::libc::c_uint = 8;
pub const STO_MIPS_SC_ALIGN_UNUSED: ::libc::c_uint = 255;
pub const STB_MIPS_SPLIT_COMMON: ::libc::c_uint = 13;
pub const ODK_NULL: ::libc::c_uint = 0;
pub const ODK_REGINFO: ::libc::c_uint = 1;
pub const ODK_EXCEPTIONS: ::libc::c_uint = 2;
pub const ODK_PAD: ::libc::c_uint = 3;
pub const ODK_HWPATCH: ::libc::c_uint = 4;
pub const ODK_FILL: ::libc::c_uint = 5;
pub const ODK_TAGS: ::libc::c_uint = 6;
pub const ODK_HWAND: ::libc::c_uint = 7;
pub const ODK_HWOR: ::libc::c_uint = 8;
pub const OEX_FPU_MIN: ::libc::c_uint = 31;
pub const OEX_FPU_MAX: ::libc::c_uint = 7936;
pub const OEX_PAGE0: ::libc::c_uint = 65536;
pub const OEX_SMM: ::libc::c_uint = 131072;
pub const OEX_FPDBUG: ::libc::c_uint = 262144;
pub const OEX_PRECISEFP: ::libc::c_uint = 262144;
pub const OEX_DISMISS: ::libc::c_uint = 524288;
pub const OEX_FPU_INVAL: ::libc::c_uint = 16;
pub const OEX_FPU_DIV0: ::libc::c_uint = 8;
pub const OEX_FPU_OFLO: ::libc::c_uint = 4;
pub const OEX_FPU_UFLO: ::libc::c_uint = 2;
pub const OEX_FPU_INEX: ::libc::c_uint = 1;
pub const OHW_R4KEOP: ::libc::c_uint = 1;
pub const OHW_R8KPFETCH: ::libc::c_uint = 2;
pub const OHW_R5KEOP: ::libc::c_uint = 4;
pub const OHW_R5KCVTL: ::libc::c_uint = 8;
pub const OPAD_PREFIX: ::libc::c_uint = 1;
pub const OPAD_POSTFIX: ::libc::c_uint = 2;
pub const OPAD_SYMBOL: ::libc::c_uint = 4;
pub const OHWA0_R4KEOP_CHECKED: ::libc::c_uint = 1;
pub const OHWA1_R4KEOP_CLEAN: ::libc::c_uint = 2;
pub const R_MIPS_NONE: ::libc::c_uint = 0;
pub const R_MIPS_16: ::libc::c_uint = 1;
pub const R_MIPS_32: ::libc::c_uint = 2;
pub const R_MIPS_REL32: ::libc::c_uint = 3;
pub const R_MIPS_26: ::libc::c_uint = 4;
pub const R_MIPS_HI16: ::libc::c_uint = 5;
pub const R_MIPS_LO16: ::libc::c_uint = 6;
pub const R_MIPS_GPREL16: ::libc::c_uint = 7;
pub const R_MIPS_LITERAL: ::libc::c_uint = 8;
pub const R_MIPS_GOT16: ::libc::c_uint = 9;
pub const R_MIPS_PC16: ::libc::c_uint = 10;
pub const R_MIPS_CALL16: ::libc::c_uint = 11;
pub const R_MIPS_GPREL32: ::libc::c_uint = 12;
pub const R_MIPS_SHIFT5: ::libc::c_uint = 16;
pub const R_MIPS_SHIFT6: ::libc::c_uint = 17;
pub const R_MIPS_64: ::libc::c_uint = 18;
pub const R_MIPS_GOT_DISP: ::libc::c_uint = 19;
pub const R_MIPS_GOT_PAGE: ::libc::c_uint = 20;
pub const R_MIPS_GOT_OFST: ::libc::c_uint = 21;
pub const R_MIPS_GOT_HI16: ::libc::c_uint = 22;
pub const R_MIPS_GOT_LO16: ::libc::c_uint = 23;
pub const R_MIPS_SUB: ::libc::c_uint = 24;
pub const R_MIPS_INSERT_A: ::libc::c_uint = 25;
pub const R_MIPS_INSERT_B: ::libc::c_uint = 26;
pub const R_MIPS_DELETE: ::libc::c_uint = 27;
pub const R_MIPS_HIGHER: ::libc::c_uint = 28;
pub const R_MIPS_HIGHEST: ::libc::c_uint = 29;
pub const R_MIPS_CALL_HI16: ::libc::c_uint = 30;
pub const R_MIPS_CALL_LO16: ::libc::c_uint = 31;
pub const R_MIPS_SCN_DISP: ::libc::c_uint = 32;
pub const R_MIPS_REL16: ::libc::c_uint = 33;
pub const R_MIPS_ADD_IMMEDIATE: ::libc::c_uint = 34;
pub const R_MIPS_PJUMP: ::libc::c_uint = 35;
pub const R_MIPS_RELGOT: ::libc::c_uint = 36;
pub const R_MIPS_JALR: ::libc::c_uint = 37;
pub const R_MIPS_TLS_DTPMOD32: ::libc::c_uint = 38;
pub const R_MIPS_TLS_DTPREL32: ::libc::c_uint = 39;
pub const R_MIPS_TLS_DTPMOD64: ::libc::c_uint = 40;
pub const R_MIPS_TLS_DTPREL64: ::libc::c_uint = 41;
pub const R_MIPS_TLS_GD: ::libc::c_uint = 42;
pub const R_MIPS_TLS_LDM: ::libc::c_uint = 43;
pub const R_MIPS_TLS_DTPREL_HI16: ::libc::c_uint = 44;
pub const R_MIPS_TLS_DTPREL_LO16: ::libc::c_uint = 45;
pub const R_MIPS_TLS_GOTTPREL: ::libc::c_uint = 46;
pub const R_MIPS_TLS_TPREL32: ::libc::c_uint = 47;
pub const R_MIPS_TLS_TPREL64: ::libc::c_uint = 48;
pub const R_MIPS_TLS_TPREL_HI16: ::libc::c_uint = 49;
pub const R_MIPS_TLS_TPREL_LO16: ::libc::c_uint = 50;
pub const R_MIPS_GLOB_DAT: ::libc::c_uint = 51;
pub const R_MIPS_COPY: ::libc::c_uint = 126;
pub const R_MIPS_JUMP_SLOT: ::libc::c_uint = 127;
pub const R_MIPS_NUM: ::libc::c_uint = 128;
pub const PT_MIPS_REGINFO: ::libc::c_uint = 1879048192;
pub const PT_MIPS_RTPROC: ::libc::c_uint = 1879048193;
pub const PT_MIPS_OPTIONS: ::libc::c_uint = 1879048194;
pub const PT_MIPS_ABIFLAGS: ::libc::c_uint = 1879048195;
pub const PF_MIPS_LOCAL: ::libc::c_uint = 268435456;
pub const DT_MIPS_RLD_VERSION: ::libc::c_uint = 1879048193;
pub const DT_MIPS_TIME_STAMP: ::libc::c_uint = 1879048194;
pub const DT_MIPS_ICHECKSUM: ::libc::c_uint = 1879048195;
pub const DT_MIPS_IVERSION: ::libc::c_uint = 1879048196;
pub const DT_MIPS_FLAGS: ::libc::c_uint = 1879048197;
pub const DT_MIPS_BASE_ADDRESS: ::libc::c_uint = 1879048198;
pub const DT_MIPS_MSYM: ::libc::c_uint = 1879048199;
pub const DT_MIPS_CONFLICT: ::libc::c_uint = 1879048200;
pub const DT_MIPS_LIBLIST: ::libc::c_uint = 1879048201;
pub const DT_MIPS_LOCAL_GOTNO: ::libc::c_uint = 1879048202;
pub const DT_MIPS_CONFLICTNO: ::libc::c_uint = 1879048203;
pub const DT_MIPS_LIBLISTNO: ::libc::c_uint = 1879048208;
pub const DT_MIPS_SYMTABNO: ::libc::c_uint = 1879048209;
pub const DT_MIPS_UNREFEXTNO: ::libc::c_uint = 1879048210;
pub const DT_MIPS_GOTSYM: ::libc::c_uint = 1879048211;
pub const DT_MIPS_HIPAGENO: ::libc::c_uint = 1879048212;
pub const DT_MIPS_RLD_MAP: ::libc::c_uint = 1879048214;
pub const DT_MIPS_DELTA_CLASS: ::libc::c_uint = 1879048215;
pub const DT_MIPS_DELTA_CLASS_NO: ::libc::c_uint = 1879048216;
pub const DT_MIPS_DELTA_INSTANCE: ::libc::c_uint = 1879048217;
pub const DT_MIPS_DELTA_INSTANCE_NO: ::libc::c_uint = 1879048218;
pub const DT_MIPS_DELTA_RELOC: ::libc::c_uint = 1879048219;
pub const DT_MIPS_DELTA_RELOC_NO: ::libc::c_uint = 1879048220;
pub const DT_MIPS_DELTA_SYM: ::libc::c_uint = 1879048221;
pub const DT_MIPS_DELTA_SYM_NO: ::libc::c_uint = 1879048222;
pub const DT_MIPS_DELTA_CLASSSYM: ::libc::c_uint = 1879048224;
pub const DT_MIPS_DELTA_CLASSSYM_NO: ::libc::c_uint = 1879048225;
pub const DT_MIPS_CXX_FLAGS: ::libc::c_uint = 1879048226;
pub const DT_MIPS_PIXIE_INIT: ::libc::c_uint = 1879048227;
pub const DT_MIPS_SYMBOL_LIB: ::libc::c_uint = 1879048228;
pub const DT_MIPS_LOCALPAGE_GOTIDX: ::libc::c_uint = 1879048229;
pub const DT_MIPS_LOCAL_GOTIDX: ::libc::c_uint = 1879048230;
pub const DT_MIPS_HIDDEN_GOTIDX: ::libc::c_uint = 1879048231;
pub const DT_MIPS_PROTECTED_GOTIDX: ::libc::c_uint = 1879048232;
pub const DT_MIPS_OPTIONS: ::libc::c_uint = 1879048233;
pub const DT_MIPS_INTERFACE: ::libc::c_uint = 1879048234;
pub const DT_MIPS_DYNSTR_ALIGN: ::libc::c_uint = 1879048235;
pub const DT_MIPS_INTERFACE_SIZE: ::libc::c_uint = 1879048236;
pub const DT_MIPS_RLD_TEXT_RESOLVE_ADDR: ::libc::c_uint = 1879048237;
pub const DT_MIPS_PERF_SUFFIX: ::libc::c_uint = 1879048238;
pub const DT_MIPS_COMPACT_SIZE: ::libc::c_uint = 1879048239;
pub const DT_MIPS_GP_VALUE: ::libc::c_uint = 1879048240;
pub const DT_MIPS_AUX_DYNAMIC: ::libc::c_uint = 1879048241;
pub const DT_MIPS_PLTGOT: ::libc::c_uint = 1879048242;
pub const DT_MIPS_RWPLT: ::libc::c_uint = 1879048244;
pub const DT_MIPS_RLD_MAP_REL: ::libc::c_uint = 1879048245;
pub const DT_MIPS_NUM: ::libc::c_uint = 54;
pub const RHF_NONE: ::libc::c_uint = 0;
pub const RHF_QUICKSTART: ::libc::c_uint = 1;
pub const RHF_NOTPOT: ::libc::c_uint = 2;
pub const RHF_NO_LIBRARY_REPLACEMENT: ::libc::c_uint = 4;
pub const RHF_NO_MOVE: ::libc::c_uint = 8;
pub const RHF_SGI_ONLY: ::libc::c_uint = 16;
pub const RHF_GUARANTEE_INIT: ::libc::c_uint = 32;
pub const RHF_DELTA_C_PLUS_PLUS: ::libc::c_uint = 64;
pub const RHF_GUARANTEE_START_INIT: ::libc::c_uint = 128;
pub const RHF_PIXIE: ::libc::c_uint = 256;
pub const RHF_DEFAULT_DELAY_LOAD: ::libc::c_uint = 512;
pub const RHF_REQUICKSTART: ::libc::c_uint = 1024;
pub const RHF_REQUICKSTARTED: ::libc::c_uint = 2048;
pub const RHF_CORD: ::libc::c_uint = 4096;
pub const RHF_NO_UNRES_UNDEF: ::libc::c_uint = 8192;
pub const RHF_RLD_ORDER_SAFE: ::libc::c_uint = 16384;
pub const LL_NONE: ::libc::c_uint = 0;
pub const LL_EXACT_MATCH: ::libc::c_uint = 1;
pub const LL_IGNORE_INT_VER: ::libc::c_uint = 2;
pub const LL_REQUIRE_MINOR: ::libc::c_uint = 4;
pub const LL_EXPORTS: ::libc::c_uint = 8;
pub const LL_DELAY_LOAD: ::libc::c_uint = 16;
pub const LL_DELTA: ::libc::c_uint = 32;
pub const MIPS_AFL_REG_NONE: ::libc::c_uint = 0;
pub const MIPS_AFL_REG_32: ::libc::c_uint = 1;
pub const MIPS_AFL_REG_64: ::libc::c_uint = 2;
pub const MIPS_AFL_REG_128: ::libc::c_uint = 3;
pub const MIPS_AFL_ASE_DSP: ::libc::c_uint = 1;
pub const MIPS_AFL_ASE_DSPR2: ::libc::c_uint = 2;
pub const MIPS_AFL_ASE_EVA: ::libc::c_uint = 4;
pub const MIPS_AFL_ASE_MCU: ::libc::c_uint = 8;
pub const MIPS_AFL_ASE_MDMX: ::libc::c_uint = 16;
pub const MIPS_AFL_ASE_MIPS3D: ::libc::c_uint = 32;
pub const MIPS_AFL_ASE_MT: ::libc::c_uint = 64;
pub const MIPS_AFL_ASE_SMARTMIPS: ::libc::c_uint = 128;
pub const MIPS_AFL_ASE_VIRT: ::libc::c_uint = 256;
pub const MIPS_AFL_ASE_MSA: ::libc::c_uint = 512;
pub const MIPS_AFL_ASE_MIPS16: ::libc::c_uint = 1024;
pub const MIPS_AFL_ASE_MICROMIPS: ::libc::c_uint = 2048;
pub const MIPS_AFL_ASE_XPA: ::libc::c_uint = 4096;
pub const MIPS_AFL_ASE_MASK: ::libc::c_uint = 8191;
pub const MIPS_AFL_EXT_XLR: ::libc::c_uint = 1;
pub const MIPS_AFL_EXT_OCTEON2: ::libc::c_uint = 2;
pub const MIPS_AFL_EXT_OCTEONP: ::libc::c_uint = 3;
pub const MIPS_AFL_EXT_LOONGSON_3A: ::libc::c_uint = 4;
pub const MIPS_AFL_EXT_OCTEON: ::libc::c_uint = 5;
pub const MIPS_AFL_EXT_5900: ::libc::c_uint = 6;
pub const MIPS_AFL_EXT_4650: ::libc::c_uint = 7;
pub const MIPS_AFL_EXT_4010: ::libc::c_uint = 8;
pub const MIPS_AFL_EXT_4100: ::libc::c_uint = 9;
pub const MIPS_AFL_EXT_3900: ::libc::c_uint = 10;
pub const MIPS_AFL_EXT_10000: ::libc::c_uint = 11;
pub const MIPS_AFL_EXT_SB1: ::libc::c_uint = 12;
pub const MIPS_AFL_EXT_4111: ::libc::c_uint = 13;
pub const MIPS_AFL_EXT_4120: ::libc::c_uint = 14;
pub const MIPS_AFL_EXT_5400: ::libc::c_uint = 15;
pub const MIPS_AFL_EXT_5500: ::libc::c_uint = 16;
pub const MIPS_AFL_EXT_LOONGSON_2E: ::libc::c_uint = 17;
pub const MIPS_AFL_EXT_LOONGSON_2F: ::libc::c_uint = 18;
pub const MIPS_AFL_FLAGS1_ODDSPREG: ::libc::c_uint = 1;
pub const EF_PARISC_TRAPNIL: ::libc::c_uint = 65536;
pub const EF_PARISC_EXT: ::libc::c_uint = 131072;
pub const EF_PARISC_LSB: ::libc::c_uint = 262144;
pub const EF_PARISC_WIDE: ::libc::c_uint = 524288;
pub const EF_PARISC_NO_KABP: ::libc::c_uint = 1048576;
pub const EF_PARISC_LAZYSWAP: ::libc::c_uint = 4194304;
pub const EF_PARISC_ARCH: ::libc::c_uint = 65535;
pub const EFA_PARISC_1_0: ::libc::c_uint = 523;
pub const EFA_PARISC_1_1: ::libc::c_uint = 528;
pub const EFA_PARISC_2_0: ::libc::c_uint = 532;
pub const SHN_PARISC_ANSI_COMMON: ::libc::c_uint = 65280;
pub const SHN_PARISC_HUGE_COMMON: ::libc::c_uint = 65281;
pub const SHT_PARISC_EXT: ::libc::c_uint = 1879048192;
pub const SHT_PARISC_UNWIND: ::libc::c_uint = 1879048193;
pub const SHT_PARISC_DOC: ::libc::c_uint = 1879048194;
pub const SHF_PARISC_SHORT: ::libc::c_uint = 536870912;
pub const SHF_PARISC_HUGE: ::libc::c_uint = 1073741824;
pub const SHF_PARISC_SBP: ::libc::c_uint = 2147483648;
pub const STT_PARISC_MILLICODE: ::libc::c_uint = 13;
pub const STT_HP_OPAQUE: ::libc::c_uint = 11;
pub const STT_HP_STUB: ::libc::c_uint = 12;
pub const R_PARISC_NONE: ::libc::c_uint = 0;
pub const R_PARISC_DIR32: ::libc::c_uint = 1;
pub const R_PARISC_DIR21L: ::libc::c_uint = 2;
pub const R_PARISC_DIR17R: ::libc::c_uint = 3;
pub const R_PARISC_DIR17F: ::libc::c_uint = 4;
pub const R_PARISC_DIR14R: ::libc::c_uint = 6;
pub const R_PARISC_PCREL32: ::libc::c_uint = 9;
pub const R_PARISC_PCREL21L: ::libc::c_uint = 10;
pub const R_PARISC_PCREL17R: ::libc::c_uint = 11;
pub const R_PARISC_PCREL17F: ::libc::c_uint = 12;
pub const R_PARISC_PCREL14R: ::libc::c_uint = 14;
pub const R_PARISC_DPREL21L: ::libc::c_uint = 18;
pub const R_PARISC_DPREL14R: ::libc::c_uint = 22;
pub const R_PARISC_GPREL21L: ::libc::c_uint = 26;
pub const R_PARISC_GPREL14R: ::libc::c_uint = 30;
pub const R_PARISC_LTOFF21L: ::libc::c_uint = 34;
pub const R_PARISC_LTOFF14R: ::libc::c_uint = 38;
pub const R_PARISC_SECREL32: ::libc::c_uint = 41;
pub const R_PARISC_SEGBASE: ::libc::c_uint = 48;
pub const R_PARISC_SEGREL32: ::libc::c_uint = 49;
pub const R_PARISC_PLTOFF21L: ::libc::c_uint = 50;
pub const R_PARISC_PLTOFF14R: ::libc::c_uint = 54;
pub const R_PARISC_LTOFF_FPTR32: ::libc::c_uint = 57;
pub const R_PARISC_LTOFF_FPTR21L: ::libc::c_uint = 58;
pub const R_PARISC_LTOFF_FPTR14R: ::libc::c_uint = 62;
pub const R_PARISC_FPTR64: ::libc::c_uint = 64;
pub const R_PARISC_PLABEL32: ::libc::c_uint = 65;
pub const R_PARISC_PLABEL21L: ::libc::c_uint = 66;
pub const R_PARISC_PLABEL14R: ::libc::c_uint = 70;
pub const R_PARISC_PCREL64: ::libc::c_uint = 72;
pub const R_PARISC_PCREL22F: ::libc::c_uint = 74;
pub const R_PARISC_PCREL14WR: ::libc::c_uint = 75;
pub const R_PARISC_PCREL14DR: ::libc::c_uint = 76;
pub const R_PARISC_PCREL16F: ::libc::c_uint = 77;
pub const R_PARISC_PCREL16WF: ::libc::c_uint = 78;
pub const R_PARISC_PCREL16DF: ::libc::c_uint = 79;
pub const R_PARISC_DIR64: ::libc::c_uint = 80;
pub const R_PARISC_DIR14WR: ::libc::c_uint = 83;
pub const R_PARISC_DIR14DR: ::libc::c_uint = 84;
pub const R_PARISC_DIR16F: ::libc::c_uint = 85;
pub const R_PARISC_DIR16WF: ::libc::c_uint = 86;
pub const R_PARISC_DIR16DF: ::libc::c_uint = 87;
pub const R_PARISC_GPREL64: ::libc::c_uint = 88;
pub const R_PARISC_GPREL14WR: ::libc::c_uint = 91;
pub const R_PARISC_GPREL14DR: ::libc::c_uint = 92;
pub const R_PARISC_GPREL16F: ::libc::c_uint = 93;
pub const R_PARISC_GPREL16WF: ::libc::c_uint = 94;
pub const R_PARISC_GPREL16DF: ::libc::c_uint = 95;
pub const R_PARISC_LTOFF64: ::libc::c_uint = 96;
pub const R_PARISC_LTOFF14WR: ::libc::c_uint = 99;
pub const R_PARISC_LTOFF14DR: ::libc::c_uint = 100;
pub const R_PARISC_LTOFF16F: ::libc::c_uint = 101;
pub const R_PARISC_LTOFF16WF: ::libc::c_uint = 102;
pub const R_PARISC_LTOFF16DF: ::libc::c_uint = 103;
pub const R_PARISC_SECREL64: ::libc::c_uint = 104;
pub const R_PARISC_SEGREL64: ::libc::c_uint = 112;
pub const R_PARISC_PLTOFF14WR: ::libc::c_uint = 115;
pub const R_PARISC_PLTOFF14DR: ::libc::c_uint = 116;
pub const R_PARISC_PLTOFF16F: ::libc::c_uint = 117;
pub const R_PARISC_PLTOFF16WF: ::libc::c_uint = 118;
pub const R_PARISC_PLTOFF16DF: ::libc::c_uint = 119;
pub const R_PARISC_LTOFF_FPTR64: ::libc::c_uint = 120;
pub const R_PARISC_LTOFF_FPTR14WR: ::libc::c_uint = 123;
pub const R_PARISC_LTOFF_FPTR14DR: ::libc::c_uint = 124;
pub const R_PARISC_LTOFF_FPTR16F: ::libc::c_uint = 125;
pub const R_PARISC_LTOFF_FPTR16WF: ::libc::c_uint = 126;
pub const R_PARISC_LTOFF_FPTR16DF: ::libc::c_uint = 127;
pub const R_PARISC_LORESERVE: ::libc::c_uint = 128;
pub const R_PARISC_COPY: ::libc::c_uint = 128;
pub const R_PARISC_IPLT: ::libc::c_uint = 129;
pub const R_PARISC_EPLT: ::libc::c_uint = 130;
pub const R_PARISC_TPREL32: ::libc::c_uint = 153;
pub const R_PARISC_TPREL21L: ::libc::c_uint = 154;
pub const R_PARISC_TPREL14R: ::libc::c_uint = 158;
pub const R_PARISC_LTOFF_TP21L: ::libc::c_uint = 162;
pub const R_PARISC_LTOFF_TP14R: ::libc::c_uint = 166;
pub const R_PARISC_LTOFF_TP14F: ::libc::c_uint = 167;
pub const R_PARISC_TPREL64: ::libc::c_uint = 216;
pub const R_PARISC_TPREL14WR: ::libc::c_uint = 219;
pub const R_PARISC_TPREL14DR: ::libc::c_uint = 220;
pub const R_PARISC_TPREL16F: ::libc::c_uint = 221;
pub const R_PARISC_TPREL16WF: ::libc::c_uint = 222;
pub const R_PARISC_TPREL16DF: ::libc::c_uint = 223;
pub const R_PARISC_LTOFF_TP64: ::libc::c_uint = 224;
pub const R_PARISC_LTOFF_TP14WR: ::libc::c_uint = 227;
pub const R_PARISC_LTOFF_TP14DR: ::libc::c_uint = 228;
pub const R_PARISC_LTOFF_TP16F: ::libc::c_uint = 229;
pub const R_PARISC_LTOFF_TP16WF: ::libc::c_uint = 230;
pub const R_PARISC_LTOFF_TP16DF: ::libc::c_uint = 231;
pub const R_PARISC_GNU_VTENTRY: ::libc::c_uint = 232;
pub const R_PARISC_GNU_VTINHERIT: ::libc::c_uint = 233;
pub const R_PARISC_TLS_GD21L: ::libc::c_uint = 234;
pub const R_PARISC_TLS_GD14R: ::libc::c_uint = 235;
pub const R_PARISC_TLS_GDCALL: ::libc::c_uint = 236;
pub const R_PARISC_TLS_LDM21L: ::libc::c_uint = 237;
pub const R_PARISC_TLS_LDM14R: ::libc::c_uint = 238;
pub const R_PARISC_TLS_LDMCALL: ::libc::c_uint = 239;
pub const R_PARISC_TLS_LDO21L: ::libc::c_uint = 240;
pub const R_PARISC_TLS_LDO14R: ::libc::c_uint = 241;
pub const R_PARISC_TLS_DTPMOD32: ::libc::c_uint = 242;
pub const R_PARISC_TLS_DTPMOD64: ::libc::c_uint = 243;
pub const R_PARISC_TLS_DTPOFF32: ::libc::c_uint = 244;
pub const R_PARISC_TLS_DTPOFF64: ::libc::c_uint = 245;
pub const R_PARISC_TLS_LE21L: ::libc::c_uint = 154;
pub const R_PARISC_TLS_LE14R: ::libc::c_uint = 158;
pub const R_PARISC_TLS_IE21L: ::libc::c_uint = 162;
pub const R_PARISC_TLS_IE14R: ::libc::c_uint = 166;
pub const R_PARISC_TLS_TPREL32: ::libc::c_uint = 153;
pub const R_PARISC_TLS_TPREL64: ::libc::c_uint = 216;
pub const R_PARISC_HIRESERVE: ::libc::c_uint = 255;
pub const PT_HP_TLS: ::libc::c_uint = 1610612736;
pub const PT_HP_CORE_NONE: ::libc::c_uint = 1610612737;
pub const PT_HP_CORE_VERSION: ::libc::c_uint = 1610612738;
pub const PT_HP_CORE_KERNEL: ::libc::c_uint = 1610612739;
pub const PT_HP_CORE_COMM: ::libc::c_uint = 1610612740;
pub const PT_HP_CORE_PROC: ::libc::c_uint = 1610612741;
pub const PT_HP_CORE_LOADABLE: ::libc::c_uint = 1610612742;
pub const PT_HP_CORE_STACK: ::libc::c_uint = 1610612743;
pub const PT_HP_CORE_SHM: ::libc::c_uint = 1610612744;
pub const PT_HP_CORE_MMF: ::libc::c_uint = 1610612745;
pub const PT_HP_PARALLEL: ::libc::c_uint = 1610612752;
pub const PT_HP_FASTBIND: ::libc::c_uint = 1610612753;
pub const PT_HP_OPT_ANNOT: ::libc::c_uint = 1610612754;
pub const PT_HP_HSL_ANNOT: ::libc::c_uint = 1610612755;
pub const PT_HP_STACK: ::libc::c_uint = 1610612756;
pub const PT_PARISC_ARCHEXT: ::libc::c_uint = 1879048192;
pub const PT_PARISC_UNWIND: ::libc::c_uint = 1879048193;
pub const PF_PARISC_SBP: ::libc::c_uint = 134217728;
pub const PF_HP_PAGE_SIZE: ::libc::c_uint = 1048576;
pub const PF_HP_FAR_SHARED: ::libc::c_uint = 2097152;
pub const PF_HP_NEAR_SHARED: ::libc::c_uint = 4194304;
pub const PF_HP_CODE: ::libc::c_uint = 16777216;
pub const PF_HP_MODIFY: ::libc::c_uint = 33554432;
pub const PF_HP_LAZYSWAP: ::libc::c_uint = 67108864;
pub const PF_HP_SBP: ::libc::c_uint = 134217728;
pub const EF_ALPHA_32BIT: ::libc::c_uint = 1;
pub const EF_ALPHA_CANRELAX: ::libc::c_uint = 2;
pub const SHT_ALPHA_DEBUG: ::libc::c_uint = 1879048193;
pub const SHT_ALPHA_REGINFO: ::libc::c_uint = 1879048194;
pub const SHF_ALPHA_GPREL: ::libc::c_uint = 268435456;
pub const STO_ALPHA_NOPV: ::libc::c_uint = 128;
pub const STO_ALPHA_STD_GPLOAD: ::libc::c_uint = 136;
pub const R_ALPHA_NONE: ::libc::c_uint = 0;
pub const R_ALPHA_REFLONG: ::libc::c_uint = 1;
pub const R_ALPHA_REFQUAD: ::libc::c_uint = 2;
pub const R_ALPHA_GPREL32: ::libc::c_uint = 3;
pub const R_ALPHA_LITERAL: ::libc::c_uint = 4;
pub const R_ALPHA_LITUSE: ::libc::c_uint = 5;
pub const R_ALPHA_GPDISP: ::libc::c_uint = 6;
pub const R_ALPHA_BRADDR: ::libc::c_uint = 7;
pub const R_ALPHA_HINT: ::libc::c_uint = 8;
pub const R_ALPHA_SREL16: ::libc::c_uint = 9;
pub const R_ALPHA_SREL32: ::libc::c_uint = 10;
pub const R_ALPHA_SREL64: ::libc::c_uint = 11;
pub const R_ALPHA_GPRELHIGH: ::libc::c_uint = 17;
pub const R_ALPHA_GPRELLOW: ::libc::c_uint = 18;
pub const R_ALPHA_GPREL16: ::libc::c_uint = 19;
pub const R_ALPHA_COPY: ::libc::c_uint = 24;
pub const R_ALPHA_GLOB_DAT: ::libc::c_uint = 25;
pub const R_ALPHA_JMP_SLOT: ::libc::c_uint = 26;
pub const R_ALPHA_RELATIVE: ::libc::c_uint = 27;
pub const R_ALPHA_TLS_GD_HI: ::libc::c_uint = 28;
pub const R_ALPHA_TLSGD: ::libc::c_uint = 29;
pub const R_ALPHA_TLS_LDM: ::libc::c_uint = 30;
pub const R_ALPHA_DTPMOD64: ::libc::c_uint = 31;
pub const R_ALPHA_GOTDTPREL: ::libc::c_uint = 32;
pub const R_ALPHA_DTPREL64: ::libc::c_uint = 33;
pub const R_ALPHA_DTPRELHI: ::libc::c_uint = 34;
pub const R_ALPHA_DTPRELLO: ::libc::c_uint = 35;
pub const R_ALPHA_DTPREL16: ::libc::c_uint = 36;
pub const R_ALPHA_GOTTPREL: ::libc::c_uint = 37;
pub const R_ALPHA_TPREL64: ::libc::c_uint = 38;
pub const R_ALPHA_TPRELHI: ::libc::c_uint = 39;
pub const R_ALPHA_TPRELLO: ::libc::c_uint = 40;
pub const R_ALPHA_TPREL16: ::libc::c_uint = 41;
pub const R_ALPHA_NUM: ::libc::c_uint = 46;
pub const LITUSE_ALPHA_ADDR: ::libc::c_uint = 0;
pub const LITUSE_ALPHA_BASE: ::libc::c_uint = 1;
pub const LITUSE_ALPHA_BYTOFF: ::libc::c_uint = 2;
pub const LITUSE_ALPHA_JSR: ::libc::c_uint = 3;
pub const LITUSE_ALPHA_TLS_GD: ::libc::c_uint = 4;
pub const LITUSE_ALPHA_TLS_LDM: ::libc::c_uint = 5;
pub const DT_ALPHA_PLTRO: ::libc::c_uint = 1879048192;
pub const DT_ALPHA_NUM: ::libc::c_uint = 1;
pub const EF_PPC_EMB: ::libc::c_uint = 2147483648;
pub const EF_PPC_RELOCATABLE: ::libc::c_uint = 65536;
pub const EF_PPC_RELOCATABLE_LIB: ::libc::c_uint = 32768;
pub const R_PPC_NONE: ::libc::c_uint = 0;
pub const R_PPC_ADDR32: ::libc::c_uint = 1;
pub const R_PPC_ADDR24: ::libc::c_uint = 2;
pub const R_PPC_ADDR16: ::libc::c_uint = 3;
pub const R_PPC_ADDR16_LO: ::libc::c_uint = 4;
pub const R_PPC_ADDR16_HI: ::libc::c_uint = 5;
pub const R_PPC_ADDR16_HA: ::libc::c_uint = 6;
pub const R_PPC_ADDR14: ::libc::c_uint = 7;
pub const R_PPC_ADDR14_BRTAKEN: ::libc::c_uint = 8;
pub const R_PPC_ADDR14_BRNTAKEN: ::libc::c_uint = 9;
pub const R_PPC_REL24: ::libc::c_uint = 10;
pub const R_PPC_REL14: ::libc::c_uint = 11;
pub const R_PPC_REL14_BRTAKEN: ::libc::c_uint = 12;
pub const R_PPC_REL14_BRNTAKEN: ::libc::c_uint = 13;
pub const R_PPC_GOT16: ::libc::c_uint = 14;
pub const R_PPC_GOT16_LO: ::libc::c_uint = 15;
pub const R_PPC_GOT16_HI: ::libc::c_uint = 16;
pub const R_PPC_GOT16_HA: ::libc::c_uint = 17;
pub const R_PPC_PLTREL24: ::libc::c_uint = 18;
pub const R_PPC_COPY: ::libc::c_uint = 19;
pub const R_PPC_GLOB_DAT: ::libc::c_uint = 20;
pub const R_PPC_JMP_SLOT: ::libc::c_uint = 21;
pub const R_PPC_RELATIVE: ::libc::c_uint = 22;
pub const R_PPC_LOCAL24PC: ::libc::c_uint = 23;
pub const R_PPC_UADDR32: ::libc::c_uint = 24;
pub const R_PPC_UADDR16: ::libc::c_uint = 25;
pub const R_PPC_REL32: ::libc::c_uint = 26;
pub const R_PPC_PLT32: ::libc::c_uint = 27;
pub const R_PPC_PLTREL32: ::libc::c_uint = 28;
pub const R_PPC_PLT16_LO: ::libc::c_uint = 29;
pub const R_PPC_PLT16_HI: ::libc::c_uint = 30;
pub const R_PPC_PLT16_HA: ::libc::c_uint = 31;
pub const R_PPC_SDAREL16: ::libc::c_uint = 32;
pub const R_PPC_SECTOFF: ::libc::c_uint = 33;
pub const R_PPC_SECTOFF_LO: ::libc::c_uint = 34;
pub const R_PPC_SECTOFF_HI: ::libc::c_uint = 35;
pub const R_PPC_SECTOFF_HA: ::libc::c_uint = 36;
pub const R_PPC_TLS: ::libc::c_uint = 67;
pub const R_PPC_DTPMOD32: ::libc::c_uint = 68;
pub const R_PPC_TPREL16: ::libc::c_uint = 69;
pub const R_PPC_TPREL16_LO: ::libc::c_uint = 70;
pub const R_PPC_TPREL16_HI: ::libc::c_uint = 71;
pub const R_PPC_TPREL16_HA: ::libc::c_uint = 72;
pub const R_PPC_TPREL32: ::libc::c_uint = 73;
pub const R_PPC_DTPREL16: ::libc::c_uint = 74;
pub const R_PPC_DTPREL16_LO: ::libc::c_uint = 75;
pub const R_PPC_DTPREL16_HI: ::libc::c_uint = 76;
pub const R_PPC_DTPREL16_HA: ::libc::c_uint = 77;
pub const R_PPC_DTPREL32: ::libc::c_uint = 78;
pub const R_PPC_GOT_TLSGD16: ::libc::c_uint = 79;
pub const R_PPC_GOT_TLSGD16_LO: ::libc::c_uint = 80;
pub const R_PPC_GOT_TLSGD16_HI: ::libc::c_uint = 81;
pub const R_PPC_GOT_TLSGD16_HA: ::libc::c_uint = 82;
pub const R_PPC_GOT_TLSLD16: ::libc::c_uint = 83;
pub const R_PPC_GOT_TLSLD16_LO: ::libc::c_uint = 84;
pub const R_PPC_GOT_TLSLD16_HI: ::libc::c_uint = 85;
pub const R_PPC_GOT_TLSLD16_HA: ::libc::c_uint = 86;
pub const R_PPC_GOT_TPREL16: ::libc::c_uint = 87;
pub const R_PPC_GOT_TPREL16_LO: ::libc::c_uint = 88;
pub const R_PPC_GOT_TPREL16_HI: ::libc::c_uint = 89;
pub const R_PPC_GOT_TPREL16_HA: ::libc::c_uint = 90;
pub const R_PPC_GOT_DTPREL16: ::libc::c_uint = 91;
pub const R_PPC_GOT_DTPREL16_LO: ::libc::c_uint = 92;
pub const R_PPC_GOT_DTPREL16_HI: ::libc::c_uint = 93;
pub const R_PPC_GOT_DTPREL16_HA: ::libc::c_uint = 94;
pub const R_PPC_TLSGD: ::libc::c_uint = 95;
pub const R_PPC_TLSLD: ::libc::c_uint = 96;
pub const R_PPC_EMB_NADDR32: ::libc::c_uint = 101;
pub const R_PPC_EMB_NADDR16: ::libc::c_uint = 102;
pub const R_PPC_EMB_NADDR16_LO: ::libc::c_uint = 103;
pub const R_PPC_EMB_NADDR16_HI: ::libc::c_uint = 104;
pub const R_PPC_EMB_NADDR16_HA: ::libc::c_uint = 105;
pub const R_PPC_EMB_SDAI16: ::libc::c_uint = 106;
pub const R_PPC_EMB_SDA2I16: ::libc::c_uint = 107;
pub const R_PPC_EMB_SDA2REL: ::libc::c_uint = 108;
pub const R_PPC_EMB_SDA21: ::libc::c_uint = 109;
pub const R_PPC_EMB_MRKREF: ::libc::c_uint = 110;
pub const R_PPC_EMB_RELSEC16: ::libc::c_uint = 111;
pub const R_PPC_EMB_RELST_LO: ::libc::c_uint = 112;
pub const R_PPC_EMB_RELST_HI: ::libc::c_uint = 113;
pub const R_PPC_EMB_RELST_HA: ::libc::c_uint = 114;
pub const R_PPC_EMB_BIT_FLD: ::libc::c_uint = 115;
pub const R_PPC_EMB_RELSDA: ::libc::c_uint = 116;
pub const R_PPC_DIAB_SDA21_LO: ::libc::c_uint = 180;
pub const R_PPC_DIAB_SDA21_HI: ::libc::c_uint = 181;
pub const R_PPC_DIAB_SDA21_HA: ::libc::c_uint = 182;
pub const R_PPC_DIAB_RELSDA_LO: ::libc::c_uint = 183;
pub const R_PPC_DIAB_RELSDA_HI: ::libc::c_uint = 184;
pub const R_PPC_DIAB_RELSDA_HA: ::libc::c_uint = 185;
pub const R_PPC_IRELATIVE: ::libc::c_uint = 248;
pub const R_PPC_REL16: ::libc::c_uint = 249;
pub const R_PPC_REL16_LO: ::libc::c_uint = 250;
pub const R_PPC_REL16_HI: ::libc::c_uint = 251;
pub const R_PPC_REL16_HA: ::libc::c_uint = 252;
pub const R_PPC_TOC16: ::libc::c_uint = 255;
pub const DT_PPC_GOT: ::libc::c_uint = 1879048192;
pub const DT_PPC_OPT: ::libc::c_uint = 1879048193;
pub const DT_PPC_NUM: ::libc::c_uint = 2;
pub const PPC_OPT_TLS: ::libc::c_uint = 1;
pub const R_PPC64_NONE: ::libc::c_uint = 0;
pub const R_PPC64_ADDR32: ::libc::c_uint = 1;
pub const R_PPC64_ADDR24: ::libc::c_uint = 2;
pub const R_PPC64_ADDR16: ::libc::c_uint = 3;
pub const R_PPC64_ADDR16_LO: ::libc::c_uint = 4;
pub const R_PPC64_ADDR16_HI: ::libc::c_uint = 5;
pub const R_PPC64_ADDR16_HA: ::libc::c_uint = 6;
pub const R_PPC64_ADDR14: ::libc::c_uint = 7;
pub const R_PPC64_ADDR14_BRTAKEN: ::libc::c_uint = 8;
pub const R_PPC64_ADDR14_BRNTAKEN: ::libc::c_uint = 9;
pub const R_PPC64_REL24: ::libc::c_uint = 10;
pub const R_PPC64_REL14: ::libc::c_uint = 11;
pub const R_PPC64_REL14_BRTAKEN: ::libc::c_uint = 12;
pub const R_PPC64_REL14_BRNTAKEN: ::libc::c_uint = 13;
pub const R_PPC64_GOT16: ::libc::c_uint = 14;
pub const R_PPC64_GOT16_LO: ::libc::c_uint = 15;
pub const R_PPC64_GOT16_HI: ::libc::c_uint = 16;
pub const R_PPC64_GOT16_HA: ::libc::c_uint = 17;
pub const R_PPC64_COPY: ::libc::c_uint = 19;
pub const R_PPC64_GLOB_DAT: ::libc::c_uint = 20;
pub const R_PPC64_JMP_SLOT: ::libc::c_uint = 21;
pub const R_PPC64_RELATIVE: ::libc::c_uint = 22;
pub const R_PPC64_UADDR32: ::libc::c_uint = 24;
pub const R_PPC64_UADDR16: ::libc::c_uint = 25;
pub const R_PPC64_REL32: ::libc::c_uint = 26;
pub const R_PPC64_PLT32: ::libc::c_uint = 27;
pub const R_PPC64_PLTREL32: ::libc::c_uint = 28;
pub const R_PPC64_PLT16_LO: ::libc::c_uint = 29;
pub const R_PPC64_PLT16_HI: ::libc::c_uint = 30;
pub const R_PPC64_PLT16_HA: ::libc::c_uint = 31;
pub const R_PPC64_SECTOFF: ::libc::c_uint = 33;
pub const R_PPC64_SECTOFF_LO: ::libc::c_uint = 34;
pub const R_PPC64_SECTOFF_HI: ::libc::c_uint = 35;
pub const R_PPC64_SECTOFF_HA: ::libc::c_uint = 36;
pub const R_PPC64_ADDR30: ::libc::c_uint = 37;
pub const R_PPC64_ADDR64: ::libc::c_uint = 38;
pub const R_PPC64_ADDR16_HIGHER: ::libc::c_uint = 39;
pub const R_PPC64_ADDR16_HIGHERA: ::libc::c_uint = 40;
pub const R_PPC64_ADDR16_HIGHEST: ::libc::c_uint = 41;
pub const R_PPC64_ADDR16_HIGHESTA: ::libc::c_uint = 42;
pub const R_PPC64_UADDR64: ::libc::c_uint = 43;
pub const R_PPC64_REL64: ::libc::c_uint = 44;
pub const R_PPC64_PLT64: ::libc::c_uint = 45;
pub const R_PPC64_PLTREL64: ::libc::c_uint = 46;
pub const R_PPC64_TOC16: ::libc::c_uint = 47;
pub const R_PPC64_TOC16_LO: ::libc::c_uint = 48;
pub const R_PPC64_TOC16_HI: ::libc::c_uint = 49;
pub const R_PPC64_TOC16_HA: ::libc::c_uint = 50;
pub const R_PPC64_TOC: ::libc::c_uint = 51;
pub const R_PPC64_PLTGOT16: ::libc::c_uint = 52;
pub const R_PPC64_PLTGOT16_LO: ::libc::c_uint = 53;
pub const R_PPC64_PLTGOT16_HI: ::libc::c_uint = 54;
pub const R_PPC64_PLTGOT16_HA: ::libc::c_uint = 55;
pub const R_PPC64_ADDR16_DS: ::libc::c_uint = 56;
pub const R_PPC64_ADDR16_LO_DS: ::libc::c_uint = 57;
pub const R_PPC64_GOT16_DS: ::libc::c_uint = 58;
pub const R_PPC64_GOT16_LO_DS: ::libc::c_uint = 59;
pub const R_PPC64_PLT16_LO_DS: ::libc::c_uint = 60;
pub const R_PPC64_SECTOFF_DS: ::libc::c_uint = 61;
pub const R_PPC64_SECTOFF_LO_DS: ::libc::c_uint = 62;
pub const R_PPC64_TOC16_DS: ::libc::c_uint = 63;
pub const R_PPC64_TOC16_LO_DS: ::libc::c_uint = 64;
pub const R_PPC64_PLTGOT16_DS: ::libc::c_uint = 65;
pub const R_PPC64_PLTGOT16_LO_DS: ::libc::c_uint = 66;
pub const R_PPC64_TLS: ::libc::c_uint = 67;
pub const R_PPC64_DTPMOD64: ::libc::c_uint = 68;
pub const R_PPC64_TPREL16: ::libc::c_uint = 69;
pub const R_PPC64_TPREL16_LO: ::libc::c_uint = 70;
pub const R_PPC64_TPREL16_HI: ::libc::c_uint = 71;
pub const R_PPC64_TPREL16_HA: ::libc::c_uint = 72;
pub const R_PPC64_TPREL64: ::libc::c_uint = 73;
pub const R_PPC64_DTPREL16: ::libc::c_uint = 74;
pub const R_PPC64_DTPREL16_LO: ::libc::c_uint = 75;
pub const R_PPC64_DTPREL16_HI: ::libc::c_uint = 76;
pub const R_PPC64_DTPREL16_HA: ::libc::c_uint = 77;
pub const R_PPC64_DTPREL64: ::libc::c_uint = 78;
pub const R_PPC64_GOT_TLSGD16: ::libc::c_uint = 79;
pub const R_PPC64_GOT_TLSGD16_LO: ::libc::c_uint = 80;
pub const R_PPC64_GOT_TLSGD16_HI: ::libc::c_uint = 81;
pub const R_PPC64_GOT_TLSGD16_HA: ::libc::c_uint = 82;
pub const R_PPC64_GOT_TLSLD16: ::libc::c_uint = 83;
pub const R_PPC64_GOT_TLSLD16_LO: ::libc::c_uint = 84;
pub const R_PPC64_GOT_TLSLD16_HI: ::libc::c_uint = 85;
pub const R_PPC64_GOT_TLSLD16_HA: ::libc::c_uint = 86;
pub const R_PPC64_GOT_TPREL16_DS: ::libc::c_uint = 87;
pub const R_PPC64_GOT_TPREL16_LO_DS: ::libc::c_uint = 88;
pub const R_PPC64_GOT_TPREL16_HI: ::libc::c_uint = 89;
pub const R_PPC64_GOT_TPREL16_HA: ::libc::c_uint = 90;
pub const R_PPC64_GOT_DTPREL16_DS: ::libc::c_uint = 91;
pub const R_PPC64_GOT_DTPREL16_LO_DS: ::libc::c_uint = 92;
pub const R_PPC64_GOT_DTPREL16_HI: ::libc::c_uint = 93;
pub const R_PPC64_GOT_DTPREL16_HA: ::libc::c_uint = 94;
pub const R_PPC64_TPREL16_DS: ::libc::c_uint = 95;
pub const R_PPC64_TPREL16_LO_DS: ::libc::c_uint = 96;
pub const R_PPC64_TPREL16_HIGHER: ::libc::c_uint = 97;
pub const R_PPC64_TPREL16_HIGHERA: ::libc::c_uint = 98;
pub const R_PPC64_TPREL16_HIGHEST: ::libc::c_uint = 99;
pub const R_PPC64_TPREL16_HIGHESTA: ::libc::c_uint = 100;
pub const R_PPC64_DTPREL16_DS: ::libc::c_uint = 101;
pub const R_PPC64_DTPREL16_LO_DS: ::libc::c_uint = 102;
pub const R_PPC64_DTPREL16_HIGHER: ::libc::c_uint = 103;
pub const R_PPC64_DTPREL16_HIGHERA: ::libc::c_uint = 104;
pub const R_PPC64_DTPREL16_HIGHEST: ::libc::c_uint = 105;
pub const R_PPC64_DTPREL16_HIGHESTA: ::libc::c_uint = 106;
pub const R_PPC64_TLSGD: ::libc::c_uint = 107;
pub const R_PPC64_TLSLD: ::libc::c_uint = 108;
pub const R_PPC64_TOCSAVE: ::libc::c_uint = 109;
pub const R_PPC64_ADDR16_HIGH: ::libc::c_uint = 110;
pub const R_PPC64_ADDR16_HIGHA: ::libc::c_uint = 111;
pub const R_PPC64_TPREL16_HIGH: ::libc::c_uint = 112;
pub const R_PPC64_TPREL16_HIGHA: ::libc::c_uint = 113;
pub const R_PPC64_DTPREL16_HIGH: ::libc::c_uint = 114;
pub const R_PPC64_DTPREL16_HIGHA: ::libc::c_uint = 115;
pub const R_PPC64_JMP_IREL: ::libc::c_uint = 247;
pub const R_PPC64_IRELATIVE: ::libc::c_uint = 248;
pub const R_PPC64_REL16: ::libc::c_uint = 249;
pub const R_PPC64_REL16_LO: ::libc::c_uint = 250;
pub const R_PPC64_REL16_HI: ::libc::c_uint = 251;
pub const R_PPC64_REL16_HA: ::libc::c_uint = 252;
pub const EF_PPC64_ABI: ::libc::c_uint = 3;
pub const DT_PPC64_GLINK: ::libc::c_uint = 1879048192;
pub const DT_PPC64_OPD: ::libc::c_uint = 1879048193;
pub const DT_PPC64_OPDSZ: ::libc::c_uint = 1879048194;
pub const DT_PPC64_OPT: ::libc::c_uint = 1879048195;
pub const DT_PPC64_NUM: ::libc::c_uint = 4;
pub const PPC64_OPT_TLS: ::libc::c_uint = 1;
pub const PPC64_OPT_MULTI_TOC: ::libc::c_uint = 2;
pub const STO_PPC64_LOCAL_BIT: ::libc::c_uint = 5;
pub const STO_PPC64_LOCAL_MASK: ::libc::c_uint = 224;
pub const EF_ARM_RELEXEC: ::libc::c_uint = 1;
pub const EF_ARM_HASENTRY: ::libc::c_uint = 2;
pub const EF_ARM_INTERWORK: ::libc::c_uint = 4;
pub const EF_ARM_APCS_26: ::libc::c_uint = 8;
pub const EF_ARM_APCS_FLOAT: ::libc::c_uint = 16;
pub const EF_ARM_PIC: ::libc::c_uint = 32;
pub const EF_ARM_ALIGN8: ::libc::c_uint = 64;
pub const EF_ARM_NEW_ABI: ::libc::c_uint = 128;
pub const EF_ARM_OLD_ABI: ::libc::c_uint = 256;
pub const EF_ARM_SOFT_FLOAT: ::libc::c_uint = 512;
pub const EF_ARM_VFP_FLOAT: ::libc::c_uint = 1024;
pub const EF_ARM_MAVERICK_FLOAT: ::libc::c_uint = 2048;
pub const EF_ARM_ABI_FLOAT_SOFT: ::libc::c_uint = 512;
pub const EF_ARM_ABI_FLOAT_HARD: ::libc::c_uint = 1024;
pub const EF_ARM_SYMSARESORTED: ::libc::c_uint = 4;
pub const EF_ARM_DYNSYMSUSESEGIDX: ::libc::c_uint = 8;
pub const EF_ARM_MAPSYMSFIRST: ::libc::c_uint = 16;
pub const EF_ARM_BE8: ::libc::c_uint = 8388608;
pub const EF_ARM_LE8: ::libc::c_uint = 4194304;
pub const EF_ARM_EABI_UNKNOWN: ::libc::c_uint = 0;
pub const EF_ARM_EABI_VER1: ::libc::c_uint = 16777216;
pub const EF_ARM_EABI_VER2: ::libc::c_uint = 33554432;
pub const EF_ARM_EABI_VER3: ::libc::c_uint = 50331648;
pub const EF_ARM_EABI_VER4: ::libc::c_uint = 67108864;
pub const EF_ARM_EABI_VER5: ::libc::c_uint = 83886080;
pub const STT_ARM_TFUNC: ::libc::c_uint = 13;
pub const STT_ARM_16BIT: ::libc::c_uint = 15;
pub const SHF_ARM_ENTRYSECT: ::libc::c_uint = 268435456;
pub const SHF_ARM_COMDEF: ::libc::c_uint = 2147483648;
pub const PF_ARM_SB: ::libc::c_uint = 268435456;
pub const PF_ARM_PI: ::libc::c_uint = 536870912;
pub const PF_ARM_ABS: ::libc::c_uint = 1073741824;
pub const PT_ARM_EXIDX: ::libc::c_uint = 1879048193;
pub const SHT_ARM_EXIDX: ::libc::c_uint = 1879048193;
pub const SHT_ARM_PREEMPTMAP: ::libc::c_uint = 1879048194;
pub const SHT_ARM_ATTRIBUTES: ::libc::c_uint = 1879048195;
pub const R_AARCH64_NONE: ::libc::c_uint = 0;
pub const R_AARCH64_P32_ABS32: ::libc::c_uint = 1;
pub const R_AARCH64_P32_COPY: ::libc::c_uint = 180;
pub const R_AARCH64_P32_GLOB_DAT: ::libc::c_uint = 181;
pub const R_AARCH64_P32_JUMP_SLOT: ::libc::c_uint = 182;
pub const R_AARCH64_P32_RELATIVE: ::libc::c_uint = 183;
pub const R_AARCH64_P32_TLS_DTPMOD: ::libc::c_uint = 184;
pub const R_AARCH64_P32_TLS_DTPREL: ::libc::c_uint = 185;
pub const R_AARCH64_P32_TLS_TPREL: ::libc::c_uint = 186;
pub const R_AARCH64_P32_TLSDESC: ::libc::c_uint = 187;
pub const R_AARCH64_P32_IRELATIVE: ::libc::c_uint = 188;
pub const R_AARCH64_ABS64: ::libc::c_uint = 257;
pub const R_AARCH64_ABS32: ::libc::c_uint = 258;
pub const R_AARCH64_ABS16: ::libc::c_uint = 259;
pub const R_AARCH64_PREL64: ::libc::c_uint = 260;
pub const R_AARCH64_PREL32: ::libc::c_uint = 261;
pub const R_AARCH64_PREL16: ::libc::c_uint = 262;
pub const R_AARCH64_MOVW_UABS_G0: ::libc::c_uint = 263;
pub const R_AARCH64_MOVW_UABS_G0_NC: ::libc::c_uint = 264;
pub const R_AARCH64_MOVW_UABS_G1: ::libc::c_uint = 265;
pub const R_AARCH64_MOVW_UABS_G1_NC: ::libc::c_uint = 266;
pub const R_AARCH64_MOVW_UABS_G2: ::libc::c_uint = 267;
pub const R_AARCH64_MOVW_UABS_G2_NC: ::libc::c_uint = 268;
pub const R_AARCH64_MOVW_UABS_G3: ::libc::c_uint = 269;
pub const R_AARCH64_MOVW_SABS_G0: ::libc::c_uint = 270;
pub const R_AARCH64_MOVW_SABS_G1: ::libc::c_uint = 271;
pub const R_AARCH64_MOVW_SABS_G2: ::libc::c_uint = 272;
pub const R_AARCH64_LD_PREL_LO19: ::libc::c_uint = 273;
pub const R_AARCH64_ADR_PREL_LO21: ::libc::c_uint = 274;
pub const R_AARCH64_ADR_PREL_PG_HI21: ::libc::c_uint = 275;
pub const R_AARCH64_ADR_PREL_PG_HI21_NC: ::libc::c_uint = 276;
pub const R_AARCH64_ADD_ABS_LO12_NC: ::libc::c_uint = 277;
pub const R_AARCH64_LDST8_ABS_LO12_NC: ::libc::c_uint = 278;
pub const R_AARCH64_TSTBR14: ::libc::c_uint = 279;
pub const R_AARCH64_CONDBR19: ::libc::c_uint = 280;
pub const R_AARCH64_JUMP26: ::libc::c_uint = 282;
pub const R_AARCH64_CALL26: ::libc::c_uint = 283;
pub const R_AARCH64_LDST16_ABS_LO12_NC: ::libc::c_uint = 284;
pub const R_AARCH64_LDST32_ABS_LO12_NC: ::libc::c_uint = 285;
pub const R_AARCH64_LDST64_ABS_LO12_NC: ::libc::c_uint = 286;
pub const R_AARCH64_MOVW_PREL_G0: ::libc::c_uint = 287;
pub const R_AARCH64_MOVW_PREL_G0_NC: ::libc::c_uint = 288;
pub const R_AARCH64_MOVW_PREL_G1: ::libc::c_uint = 289;
pub const R_AARCH64_MOVW_PREL_G1_NC: ::libc::c_uint = 290;
pub const R_AARCH64_MOVW_PREL_G2: ::libc::c_uint = 291;
pub const R_AARCH64_MOVW_PREL_G2_NC: ::libc::c_uint = 292;
pub const R_AARCH64_MOVW_PREL_G3: ::libc::c_uint = 293;
pub const R_AARCH64_LDST128_ABS_LO12_NC: ::libc::c_uint = 299;
pub const R_AARCH64_MOVW_GOTOFF_G0: ::libc::c_uint = 300;
pub const R_AARCH64_MOVW_GOTOFF_G0_NC: ::libc::c_uint = 301;
pub const R_AARCH64_MOVW_GOTOFF_G1: ::libc::c_uint = 302;
pub const R_AARCH64_MOVW_GOTOFF_G1_NC: ::libc::c_uint = 303;
pub const R_AARCH64_MOVW_GOTOFF_G2: ::libc::c_uint = 304;
pub const R_AARCH64_MOVW_GOTOFF_G2_NC: ::libc::c_uint = 305;
pub const R_AARCH64_MOVW_GOTOFF_G3: ::libc::c_uint = 306;
pub const R_AARCH64_GOTREL64: ::libc::c_uint = 307;
pub const R_AARCH64_GOTREL32: ::libc::c_uint = 308;
pub const R_AARCH64_GOT_LD_PREL19: ::libc::c_uint = 309;
pub const R_AARCH64_LD64_GOTOFF_LO15: ::libc::c_uint = 310;
pub const R_AARCH64_ADR_GOT_PAGE: ::libc::c_uint = 311;
pub const R_AARCH64_LD64_GOT_LO12_NC: ::libc::c_uint = 312;
pub const R_AARCH64_LD64_GOTPAGE_LO15: ::libc::c_uint = 313;
pub const R_AARCH64_TLSGD_ADR_PREL21: ::libc::c_uint = 512;
pub const R_AARCH64_TLSGD_ADR_PAGE21: ::libc::c_uint = 513;
pub const R_AARCH64_TLSGD_ADD_LO12_NC: ::libc::c_uint = 514;
pub const R_AARCH64_TLSGD_MOVW_G1: ::libc::c_uint = 515;
pub const R_AARCH64_TLSGD_MOVW_G0_NC: ::libc::c_uint = 516;
pub const R_AARCH64_TLSLD_ADR_PREL21: ::libc::c_uint = 517;
pub const R_AARCH64_TLSLD_ADR_PAGE21: ::libc::c_uint = 518;
pub const R_AARCH64_TLSLD_ADD_LO12_NC: ::libc::c_uint = 519;
pub const R_AARCH64_TLSLD_MOVW_G1: ::libc::c_uint = 520;
pub const R_AARCH64_TLSLD_MOVW_G0_NC: ::libc::c_uint = 521;
pub const R_AARCH64_TLSLD_LD_PREL19: ::libc::c_uint = 522;
pub const R_AARCH64_TLSLD_MOVW_DTPREL_G2: ::libc::c_uint = 523;
pub const R_AARCH64_TLSLD_MOVW_DTPREL_G1: ::libc::c_uint = 524;
pub const R_AARCH64_TLSLD_MOVW_DTPREL_G1_NC: ::libc::c_uint = 525;
pub const R_AARCH64_TLSLD_MOVW_DTPREL_G0: ::libc::c_uint = 526;
pub const R_AARCH64_TLSLD_MOVW_DTPREL_G0_NC: ::libc::c_uint = 527;
pub const R_AARCH64_TLSLD_ADD_DTPREL_HI12: ::libc::c_uint = 528;
pub const R_AARCH64_TLSLD_ADD_DTPREL_LO12: ::libc::c_uint = 529;
pub const R_AARCH64_TLSLD_ADD_DTPREL_LO12_NC: ::libc::c_uint = 530;
pub const R_AARCH64_TLSLD_LDST8_DTPREL_LO12: ::libc::c_uint = 531;
pub const R_AARCH64_TLSLD_LDST8_DTPREL_LO12_NC: ::libc::c_uint = 532;
pub const R_AARCH64_TLSLD_LDST16_DTPREL_LO12: ::libc::c_uint = 533;
pub const R_AARCH64_TLSLD_LDST16_DTPREL_LO12_NC: ::libc::c_uint = 534;
pub const R_AARCH64_TLSLD_LDST32_DTPREL_LO12: ::libc::c_uint = 535;
pub const R_AARCH64_TLSLD_LDST32_DTPREL_LO12_NC: ::libc::c_uint = 536;
pub const R_AARCH64_TLSLD_LDST64_DTPREL_LO12: ::libc::c_uint = 537;
pub const R_AARCH64_TLSLD_LDST64_DTPREL_LO12_NC: ::libc::c_uint = 538;
pub const R_AARCH64_TLSIE_MOVW_GOTTPREL_G1: ::libc::c_uint = 539;
pub const R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC: ::libc::c_uint = 540;
pub const R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21: ::libc::c_uint = 541;
pub const R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC: ::libc::c_uint = 542;
pub const R_AARCH64_TLSIE_LD_GOTTPREL_PREL19: ::libc::c_uint = 543;
pub const R_AARCH64_TLSLE_MOVW_TPREL_G2: ::libc::c_uint = 544;
pub const R_AARCH64_TLSLE_MOVW_TPREL_G1: ::libc::c_uint = 545;
pub const R_AARCH64_TLSLE_MOVW_TPREL_G1_NC: ::libc::c_uint = 546;
pub const R_AARCH64_TLSLE_MOVW_TPREL_G0: ::libc::c_uint = 547;
pub const R_AARCH64_TLSLE_MOVW_TPREL_G0_NC: ::libc::c_uint = 548;
pub const R_AARCH64_TLSLE_ADD_TPREL_HI12: ::libc::c_uint = 549;
pub const R_AARCH64_TLSLE_ADD_TPREL_LO12: ::libc::c_uint = 550;
pub const R_AARCH64_TLSLE_ADD_TPREL_LO12_NC: ::libc::c_uint = 551;
pub const R_AARCH64_TLSLE_LDST8_TPREL_LO12: ::libc::c_uint = 552;
pub const R_AARCH64_TLSLE_LDST8_TPREL_LO12_NC: ::libc::c_uint = 553;
pub const R_AARCH64_TLSLE_LDST16_TPREL_LO12: ::libc::c_uint = 554;
pub const R_AARCH64_TLSLE_LDST16_TPREL_LO12_NC: ::libc::c_uint = 555;
pub const R_AARCH64_TLSLE_LDST32_TPREL_LO12: ::libc::c_uint = 556;
pub const R_AARCH64_TLSLE_LDST32_TPREL_LO12_NC: ::libc::c_uint = 557;
pub const R_AARCH64_TLSLE_LDST64_TPREL_LO12: ::libc::c_uint = 558;
pub const R_AARCH64_TLSLE_LDST64_TPREL_LO12_NC: ::libc::c_uint = 559;
pub const R_AARCH64_TLSDESC_LD_PREL19: ::libc::c_uint = 560;
pub const R_AARCH64_TLSDESC_ADR_PREL21: ::libc::c_uint = 561;
pub const R_AARCH64_TLSDESC_ADR_PAGE21: ::libc::c_uint = 562;
pub const R_AARCH64_TLSDESC_LD64_LO12: ::libc::c_uint = 563;
pub const R_AARCH64_TLSDESC_ADD_LO12: ::libc::c_uint = 564;
pub const R_AARCH64_TLSDESC_OFF_G1: ::libc::c_uint = 565;
pub const R_AARCH64_TLSDESC_OFF_G0_NC: ::libc::c_uint = 566;
pub const R_AARCH64_TLSDESC_LDR: ::libc::c_uint = 567;
pub const R_AARCH64_TLSDESC_ADD: ::libc::c_uint = 568;
pub const R_AARCH64_TLSDESC_CALL: ::libc::c_uint = 569;
pub const R_AARCH64_TLSLE_LDST128_TPREL_LO12: ::libc::c_uint = 570;
pub const R_AARCH64_TLSLE_LDST128_TPREL_LO12_NC: ::libc::c_uint = 571;
pub const R_AARCH64_TLSLD_LDST128_DTPREL_LO12: ::libc::c_uint = 572;
pub const R_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC: ::libc::c_uint = 573;
pub const R_AARCH64_COPY: ::libc::c_uint = 1024;
pub const R_AARCH64_GLOB_DAT: ::libc::c_uint = 1025;
pub const R_AARCH64_JUMP_SLOT: ::libc::c_uint = 1026;
pub const R_AARCH64_RELATIVE: ::libc::c_uint = 1027;
pub const R_AARCH64_TLS_DTPMOD: ::libc::c_uint = 1028;
pub const R_AARCH64_TLS_DTPREL: ::libc::c_uint = 1029;
pub const R_AARCH64_TLS_TPREL: ::libc::c_uint = 1030;
pub const R_AARCH64_TLSDESC: ::libc::c_uint = 1031;
pub const R_AARCH64_IRELATIVE: ::libc::c_uint = 1032;
pub const R_ARM_NONE: ::libc::c_uint = 0;
pub const R_ARM_PC24: ::libc::c_uint = 1;
pub const R_ARM_ABS32: ::libc::c_uint = 2;
pub const R_ARM_REL32: ::libc::c_uint = 3;
pub const R_ARM_PC13: ::libc::c_uint = 4;
pub const R_ARM_ABS16: ::libc::c_uint = 5;
pub const R_ARM_ABS12: ::libc::c_uint = 6;
pub const R_ARM_THM_ABS5: ::libc::c_uint = 7;
pub const R_ARM_ABS8: ::libc::c_uint = 8;
pub const R_ARM_SBREL32: ::libc::c_uint = 9;
pub const R_ARM_THM_PC22: ::libc::c_uint = 10;
pub const R_ARM_THM_PC8: ::libc::c_uint = 11;
pub const R_ARM_AMP_VCALL9: ::libc::c_uint = 12;
pub const R_ARM_SWI24: ::libc::c_uint = 13;
pub const R_ARM_TLS_DESC: ::libc::c_uint = 13;
pub const R_ARM_THM_SWI8: ::libc::c_uint = 14;
pub const R_ARM_XPC25: ::libc::c_uint = 15;
pub const R_ARM_THM_XPC22: ::libc::c_uint = 16;
pub const R_ARM_TLS_DTPMOD32: ::libc::c_uint = 17;
pub const R_ARM_TLS_DTPOFF32: ::libc::c_uint = 18;
pub const R_ARM_TLS_TPOFF32: ::libc::c_uint = 19;
pub const R_ARM_COPY: ::libc::c_uint = 20;
pub const R_ARM_GLOB_DAT: ::libc::c_uint = 21;
pub const R_ARM_JUMP_SLOT: ::libc::c_uint = 22;
pub const R_ARM_RELATIVE: ::libc::c_uint = 23;
pub const R_ARM_GOTOFF: ::libc::c_uint = 24;
pub const R_ARM_GOTPC: ::libc::c_uint = 25;
pub const R_ARM_GOT32: ::libc::c_uint = 26;
pub const R_ARM_PLT32: ::libc::c_uint = 27;
pub const R_ARM_CALL: ::libc::c_uint = 28;
pub const R_ARM_JUMP24: ::libc::c_uint = 29;
pub const R_ARM_THM_JUMP24: ::libc::c_uint = 30;
pub const R_ARM_BASE_ABS: ::libc::c_uint = 31;
pub const R_ARM_ALU_PCREL_7_0: ::libc::c_uint = 32;
pub const R_ARM_ALU_PCREL_15_8: ::libc::c_uint = 33;
pub const R_ARM_ALU_PCREL_23_15: ::libc::c_uint = 34;
pub const R_ARM_LDR_SBREL_11_0: ::libc::c_uint = 35;
pub const R_ARM_ALU_SBREL_19_12: ::libc::c_uint = 36;
pub const R_ARM_ALU_SBREL_27_20: ::libc::c_uint = 37;
pub const R_ARM_TARGET1: ::libc::c_uint = 38;
pub const R_ARM_SBREL31: ::libc::c_uint = 39;
pub const R_ARM_V4BX: ::libc::c_uint = 40;
pub const R_ARM_TARGET2: ::libc::c_uint = 41;
pub const R_ARM_PREL31: ::libc::c_uint = 42;
pub const R_ARM_MOVW_ABS_NC: ::libc::c_uint = 43;
pub const R_ARM_MOVT_ABS: ::libc::c_uint = 44;
pub const R_ARM_MOVW_PREL_NC: ::libc::c_uint = 45;
pub const R_ARM_MOVT_PREL: ::libc::c_uint = 46;
pub const R_ARM_THM_MOVW_ABS_NC: ::libc::c_uint = 47;
pub const R_ARM_THM_MOVT_ABS: ::libc::c_uint = 48;
pub const R_ARM_THM_MOVW_PREL_NC: ::libc::c_uint = 49;
pub const R_ARM_THM_MOVT_PREL: ::libc::c_uint = 50;
pub const R_ARM_THM_JUMP19: ::libc::c_uint = 51;
pub const R_ARM_THM_JUMP6: ::libc::c_uint = 52;
pub const R_ARM_THM_ALU_PREL_11_0: ::libc::c_uint = 53;
pub const R_ARM_THM_PC12: ::libc::c_uint = 54;
pub const R_ARM_ABS32_NOI: ::libc::c_uint = 55;
pub const R_ARM_REL32_NOI: ::libc::c_uint = 56;
pub const R_ARM_ALU_PC_G0_NC: ::libc::c_uint = 57;
pub const R_ARM_ALU_PC_G0: ::libc::c_uint = 58;
pub const R_ARM_ALU_PC_G1_NC: ::libc::c_uint = 59;
pub const R_ARM_ALU_PC_G1: ::libc::c_uint = 60;
pub const R_ARM_ALU_PC_G2: ::libc::c_uint = 61;
pub const R_ARM_LDR_PC_G1: ::libc::c_uint = 62;
pub const R_ARM_LDR_PC_G2: ::libc::c_uint = 63;
pub const R_ARM_LDRS_PC_G0: ::libc::c_uint = 64;
pub const R_ARM_LDRS_PC_G1: ::libc::c_uint = 65;
pub const R_ARM_LDRS_PC_G2: ::libc::c_uint = 66;
pub const R_ARM_LDC_PC_G0: ::libc::c_uint = 67;
pub const R_ARM_LDC_PC_G1: ::libc::c_uint = 68;
pub const R_ARM_LDC_PC_G2: ::libc::c_uint = 69;
pub const R_ARM_ALU_SB_G0_NC: ::libc::c_uint = 70;
pub const R_ARM_ALU_SB_G0: ::libc::c_uint = 71;
pub const R_ARM_ALU_SB_G1_NC: ::libc::c_uint = 72;
pub const R_ARM_ALU_SB_G1: ::libc::c_uint = 73;
pub const R_ARM_ALU_SB_G2: ::libc::c_uint = 74;
pub const R_ARM_LDR_SB_G0: ::libc::c_uint = 75;
pub const R_ARM_LDR_SB_G1: ::libc::c_uint = 76;
pub const R_ARM_LDR_SB_G2: ::libc::c_uint = 77;
pub const R_ARM_LDRS_SB_G0: ::libc::c_uint = 78;
pub const R_ARM_LDRS_SB_G1: ::libc::c_uint = 79;
pub const R_ARM_LDRS_SB_G2: ::libc::c_uint = 80;
pub const R_ARM_LDC_SB_G0: ::libc::c_uint = 81;
pub const R_ARM_LDC_SB_G1: ::libc::c_uint = 82;
pub const R_ARM_LDC_SB_G2: ::libc::c_uint = 83;
pub const R_ARM_MOVW_BREL_NC: ::libc::c_uint = 84;
pub const R_ARM_MOVT_BREL: ::libc::c_uint = 85;
pub const R_ARM_MOVW_BREL: ::libc::c_uint = 86;
pub const R_ARM_THM_MOVW_BREL_NC: ::libc::c_uint = 87;
pub const R_ARM_THM_MOVT_BREL: ::libc::c_uint = 88;
pub const R_ARM_THM_MOVW_BREL: ::libc::c_uint = 89;
pub const R_ARM_TLS_GOTDESC: ::libc::c_uint = 90;
pub const R_ARM_TLS_CALL: ::libc::c_uint = 91;
pub const R_ARM_TLS_DESCSEQ: ::libc::c_uint = 92;
pub const R_ARM_THM_TLS_CALL: ::libc::c_uint = 93;
pub const R_ARM_PLT32_ABS: ::libc::c_uint = 94;
pub const R_ARM_GOT_ABS: ::libc::c_uint = 95;
pub const R_ARM_GOT_PREL: ::libc::c_uint = 96;
pub const R_ARM_GOT_BREL12: ::libc::c_uint = 97;
pub const R_ARM_GOTOFF12: ::libc::c_uint = 98;
pub const R_ARM_GOTRELAX: ::libc::c_uint = 99;
pub const R_ARM_GNU_VTENTRY: ::libc::c_uint = 100;
pub const R_ARM_GNU_VTINHERIT: ::libc::c_uint = 101;
pub const R_ARM_THM_PC11: ::libc::c_uint = 102;
pub const R_ARM_THM_PC9: ::libc::c_uint = 103;
pub const R_ARM_TLS_GD32: ::libc::c_uint = 104;
pub const R_ARM_TLS_LDM32: ::libc::c_uint = 105;
pub const R_ARM_TLS_LDO32: ::libc::c_uint = 106;
pub const R_ARM_TLS_IE32: ::libc::c_uint = 107;
pub const R_ARM_TLS_LE32: ::libc::c_uint = 108;
pub const R_ARM_TLS_LDO12: ::libc::c_uint = 109;
pub const R_ARM_TLS_LE12: ::libc::c_uint = 110;
pub const R_ARM_TLS_IE12GP: ::libc::c_uint = 111;
pub const R_ARM_ME_TOO: ::libc::c_uint = 128;
pub const R_ARM_THM_TLS_DESCSEQ: ::libc::c_uint = 129;
pub const R_ARM_THM_TLS_DESCSEQ16: ::libc::c_uint = 129;
pub const R_ARM_THM_TLS_DESCSEQ32: ::libc::c_uint = 130;
pub const R_ARM_THM_GOT_BREL12: ::libc::c_uint = 131;
pub const R_ARM_IRELATIVE: ::libc::c_uint = 160;
pub const R_ARM_RXPC25: ::libc::c_uint = 249;
pub const R_ARM_RSBREL32: ::libc::c_uint = 250;
pub const R_ARM_THM_RPC22: ::libc::c_uint = 251;
pub const R_ARM_RREL32: ::libc::c_uint = 252;
pub const R_ARM_RABS22: ::libc::c_uint = 253;
pub const R_ARM_RPC24: ::libc::c_uint = 254;
pub const R_ARM_RBASE: ::libc::c_uint = 255;
pub const R_ARM_NUM: ::libc::c_uint = 256;
pub const EF_IA_64_MASKOS: ::libc::c_uint = 15;
pub const EF_IA_64_ABI64: ::libc::c_uint = 16;
pub const EF_IA_64_ARCH: ::libc::c_uint = 4278190080;
pub const PT_IA_64_ARCHEXT: ::libc::c_uint = 1879048192;
pub const PT_IA_64_UNWIND: ::libc::c_uint = 1879048193;
pub const PT_IA_64_HP_OPT_ANOT: ::libc::c_uint = 1610612754;
pub const PT_IA_64_HP_HSL_ANOT: ::libc::c_uint = 1610612755;
pub const PT_IA_64_HP_STACK: ::libc::c_uint = 1610612756;
pub const PF_IA_64_NORECOV: ::libc::c_uint = 2147483648;
pub const SHT_IA_64_EXT: ::libc::c_uint = 1879048192;
pub const SHT_IA_64_UNWIND: ::libc::c_uint = 1879048193;
pub const SHF_IA_64_SHORT: ::libc::c_uint = 268435456;
pub const SHF_IA_64_NORECOV: ::libc::c_uint = 536870912;
pub const DT_IA_64_PLT_RESERVE: ::libc::c_uint = 1879048192;
pub const DT_IA_64_NUM: ::libc::c_uint = 1;
pub const R_IA64_NONE: ::libc::c_uint = 0;
pub const R_IA64_IMM14: ::libc::c_uint = 33;
pub const R_IA64_IMM22: ::libc::c_uint = 34;
pub const R_IA64_IMM64: ::libc::c_uint = 35;
pub const R_IA64_DIR32MSB: ::libc::c_uint = 36;
pub const R_IA64_DIR32LSB: ::libc::c_uint = 37;
pub const R_IA64_DIR64MSB: ::libc::c_uint = 38;
pub const R_IA64_DIR64LSB: ::libc::c_uint = 39;
pub const R_IA64_GPREL22: ::libc::c_uint = 42;
pub const R_IA64_GPREL64I: ::libc::c_uint = 43;
pub const R_IA64_GPREL32MSB: ::libc::c_uint = 44;
pub const R_IA64_GPREL32LSB: ::libc::c_uint = 45;
pub const R_IA64_GPREL64MSB: ::libc::c_uint = 46;
pub const R_IA64_GPREL64LSB: ::libc::c_uint = 47;
pub const R_IA64_LTOFF22: ::libc::c_uint = 50;
pub const R_IA64_LTOFF64I: ::libc::c_uint = 51;
pub const R_IA64_PLTOFF22: ::libc::c_uint = 58;
pub const R_IA64_PLTOFF64I: ::libc::c_uint = 59;
pub const R_IA64_PLTOFF64MSB: ::libc::c_uint = 62;
pub const R_IA64_PLTOFF64LSB: ::libc::c_uint = 63;
pub const R_IA64_FPTR64I: ::libc::c_uint = 67;
pub const R_IA64_FPTR32MSB: ::libc::c_uint = 68;
pub const R_IA64_FPTR32LSB: ::libc::c_uint = 69;
pub const R_IA64_FPTR64MSB: ::libc::c_uint = 70;
pub const R_IA64_FPTR64LSB: ::libc::c_uint = 71;
pub const R_IA64_PCREL60B: ::libc::c_uint = 72;
pub const R_IA64_PCREL21B: ::libc::c_uint = 73;
pub const R_IA64_PCREL21M: ::libc::c_uint = 74;
pub const R_IA64_PCREL21F: ::libc::c_uint = 75;
pub const R_IA64_PCREL32MSB: ::libc::c_uint = 76;
pub const R_IA64_PCREL32LSB: ::libc::c_uint = 77;
pub const R_IA64_PCREL64MSB: ::libc::c_uint = 78;
pub const R_IA64_PCREL64LSB: ::libc::c_uint = 79;
pub const R_IA64_LTOFF_FPTR22: ::libc::c_uint = 82;
pub const R_IA64_LTOFF_FPTR64I: ::libc::c_uint = 83;
pub const R_IA64_LTOFF_FPTR32MSB: ::libc::c_uint = 84;
pub const R_IA64_LTOFF_FPTR32LSB: ::libc::c_uint = 85;
pub const R_IA64_LTOFF_FPTR64MSB: ::libc::c_uint = 86;
pub const R_IA64_LTOFF_FPTR64LSB: ::libc::c_uint = 87;
pub const R_IA64_SEGREL32MSB: ::libc::c_uint = 92;
pub const R_IA64_SEGREL32LSB: ::libc::c_uint = 93;
pub const R_IA64_SEGREL64MSB: ::libc::c_uint = 94;
pub const R_IA64_SEGREL64LSB: ::libc::c_uint = 95;
pub const R_IA64_SECREL32MSB: ::libc::c_uint = 100;
pub const R_IA64_SECREL32LSB: ::libc::c_uint = 101;
pub const R_IA64_SECREL64MSB: ::libc::c_uint = 102;
pub const R_IA64_SECREL64LSB: ::libc::c_uint = 103;
pub const R_IA64_REL32MSB: ::libc::c_uint = 108;
pub const R_IA64_REL32LSB: ::libc::c_uint = 109;
pub const R_IA64_REL64MSB: ::libc::c_uint = 110;
pub const R_IA64_REL64LSB: ::libc::c_uint = 111;
pub const R_IA64_LTV32MSB: ::libc::c_uint = 116;
pub const R_IA64_LTV32LSB: ::libc::c_uint = 117;
pub const R_IA64_LTV64MSB: ::libc::c_uint = 118;
pub const R_IA64_LTV64LSB: ::libc::c_uint = 119;
pub const R_IA64_PCREL21BI: ::libc::c_uint = 121;
pub const R_IA64_PCREL22: ::libc::c_uint = 122;
pub const R_IA64_PCREL64I: ::libc::c_uint = 123;
pub const R_IA64_IPLTMSB: ::libc::c_uint = 128;
pub const R_IA64_IPLTLSB: ::libc::c_uint = 129;
pub const R_IA64_COPY: ::libc::c_uint = 132;
pub const R_IA64_SUB: ::libc::c_uint = 133;
pub const R_IA64_LTOFF22X: ::libc::c_uint = 134;
pub const R_IA64_LDXMOV: ::libc::c_uint = 135;
pub const R_IA64_TPREL14: ::libc::c_uint = 145;
pub const R_IA64_TPREL22: ::libc::c_uint = 146;
pub const R_IA64_TPREL64I: ::libc::c_uint = 147;
pub const R_IA64_TPREL64MSB: ::libc::c_uint = 150;
pub const R_IA64_TPREL64LSB: ::libc::c_uint = 151;
pub const R_IA64_LTOFF_TPREL22: ::libc::c_uint = 154;
pub const R_IA64_DTPMOD64MSB: ::libc::c_uint = 166;
pub const R_IA64_DTPMOD64LSB: ::libc::c_uint = 167;
pub const R_IA64_LTOFF_DTPMOD22: ::libc::c_uint = 170;
pub const R_IA64_DTPREL14: ::libc::c_uint = 177;
pub const R_IA64_DTPREL22: ::libc::c_uint = 178;
pub const R_IA64_DTPREL64I: ::libc::c_uint = 179;
pub const R_IA64_DTPREL32MSB: ::libc::c_uint = 180;
pub const R_IA64_DTPREL32LSB: ::libc::c_uint = 181;
pub const R_IA64_DTPREL64MSB: ::libc::c_uint = 182;
pub const R_IA64_DTPREL64LSB: ::libc::c_uint = 183;
pub const R_IA64_LTOFF_DTPREL22: ::libc::c_uint = 186;
pub const EF_SH_MACH_MASK: ::libc::c_uint = 31;
pub const EF_SH_UNKNOWN: ::libc::c_uint = 0;
pub const EF_SH1: ::libc::c_uint = 1;
pub const EF_SH2: ::libc::c_uint = 2;
pub const EF_SH3: ::libc::c_uint = 3;
pub const EF_SH_DSP: ::libc::c_uint = 4;
pub const EF_SH3_DSP: ::libc::c_uint = 5;
pub const EF_SH4AL_DSP: ::libc::c_uint = 6;
pub const EF_SH3E: ::libc::c_uint = 8;
pub const EF_SH4: ::libc::c_uint = 9;
pub const EF_SH2E: ::libc::c_uint = 11;
pub const EF_SH4A: ::libc::c_uint = 12;
pub const EF_SH2A: ::libc::c_uint = 13;
pub const EF_SH4_NOFPU: ::libc::c_uint = 16;
pub const EF_SH4A_NOFPU: ::libc::c_uint = 17;
pub const EF_SH4_NOMMU_NOFPU: ::libc::c_uint = 18;
pub const EF_SH2A_NOFPU: ::libc::c_uint = 19;
pub const EF_SH3_NOMMU: ::libc::c_uint = 20;
pub const EF_SH2A_SH4_NOFPU: ::libc::c_uint = 21;
pub const EF_SH2A_SH3_NOFPU: ::libc::c_uint = 22;
pub const EF_SH2A_SH4: ::libc::c_uint = 23;
pub const EF_SH2A_SH3E: ::libc::c_uint = 24;
pub const R_SH_NONE: ::libc::c_uint = 0;
pub const R_SH_DIR32: ::libc::c_uint = 1;
pub const R_SH_REL32: ::libc::c_uint = 2;
pub const R_SH_DIR8WPN: ::libc::c_uint = 3;
pub const R_SH_IND12W: ::libc::c_uint = 4;
pub const R_SH_DIR8WPL: ::libc::c_uint = 5;
pub const R_SH_DIR8WPZ: ::libc::c_uint = 6;
pub const R_SH_DIR8BP: ::libc::c_uint = 7;
pub const R_SH_DIR8W: ::libc::c_uint = 8;
pub const R_SH_DIR8L: ::libc::c_uint = 9;
pub const R_SH_SWITCH16: ::libc::c_uint = 25;
pub const R_SH_SWITCH32: ::libc::c_uint = 26;
pub const R_SH_USES: ::libc::c_uint = 27;
pub const R_SH_COUNT: ::libc::c_uint = 28;
pub const R_SH_ALIGN: ::libc::c_uint = 29;
pub const R_SH_CODE: ::libc::c_uint = 30;
pub const R_SH_DATA: ::libc::c_uint = 31;
pub const R_SH_LABEL: ::libc::c_uint = 32;
pub const R_SH_SWITCH8: ::libc::c_uint = 33;
pub const R_SH_GNU_VTINHERIT: ::libc::c_uint = 34;
pub const R_SH_GNU_VTENTRY: ::libc::c_uint = 35;
pub const R_SH_TLS_GD_32: ::libc::c_uint = 144;
pub const R_SH_TLS_LD_32: ::libc::c_uint = 145;
pub const R_SH_TLS_LDO_32: ::libc::c_uint = 146;
pub const R_SH_TLS_IE_32: ::libc::c_uint = 147;
pub const R_SH_TLS_LE_32: ::libc::c_uint = 148;
pub const R_SH_TLS_DTPMOD32: ::libc::c_uint = 149;
pub const R_SH_TLS_DTPOFF32: ::libc::c_uint = 150;
pub const R_SH_TLS_TPOFF32: ::libc::c_uint = 151;
pub const R_SH_GOT32: ::libc::c_uint = 160;
pub const R_SH_PLT32: ::libc::c_uint = 161;
pub const R_SH_COPY: ::libc::c_uint = 162;
pub const R_SH_GLOB_DAT: ::libc::c_uint = 163;
pub const R_SH_JMP_SLOT: ::libc::c_uint = 164;
pub const R_SH_RELATIVE: ::libc::c_uint = 165;
pub const R_SH_GOTOFF: ::libc::c_uint = 166;
pub const R_SH_GOTPC: ::libc::c_uint = 167;
pub const R_SH_NUM: ::libc::c_uint = 256;
pub const EF_S390_HIGH_GPRS: ::libc::c_uint = 1;
pub const R_390_NONE: ::libc::c_uint = 0;
pub const R_390_8: ::libc::c_uint = 1;
pub const R_390_12: ::libc::c_uint = 2;
pub const R_390_16: ::libc::c_uint = 3;
pub const R_390_32: ::libc::c_uint = 4;
pub const R_390_PC32: ::libc::c_uint = 5;
pub const R_390_GOT12: ::libc::c_uint = 6;
pub const R_390_GOT32: ::libc::c_uint = 7;
pub const R_390_PLT32: ::libc::c_uint = 8;
pub const R_390_COPY: ::libc::c_uint = 9;
pub const R_390_GLOB_DAT: ::libc::c_uint = 10;
pub const R_390_JMP_SLOT: ::libc::c_uint = 11;
pub const R_390_RELATIVE: ::libc::c_uint = 12;
pub const R_390_GOTOFF32: ::libc::c_uint = 13;
pub const R_390_GOTPC: ::libc::c_uint = 14;
pub const R_390_GOT16: ::libc::c_uint = 15;
pub const R_390_PC16: ::libc::c_uint = 16;
pub const R_390_PC16DBL: ::libc::c_uint = 17;
pub const R_390_PLT16DBL: ::libc::c_uint = 18;
pub const R_390_PC32DBL: ::libc::c_uint = 19;
pub const R_390_PLT32DBL: ::libc::c_uint = 20;
pub const R_390_GOTPCDBL: ::libc::c_uint = 21;
pub const R_390_64: ::libc::c_uint = 22;
pub const R_390_PC64: ::libc::c_uint = 23;
pub const R_390_GOT64: ::libc::c_uint = 24;
pub const R_390_PLT64: ::libc::c_uint = 25;
pub const R_390_GOTENT: ::libc::c_uint = 26;
pub const R_390_GOTOFF16: ::libc::c_uint = 27;
pub const R_390_GOTOFF64: ::libc::c_uint = 28;
pub const R_390_GOTPLT12: ::libc::c_uint = 29;
pub const R_390_GOTPLT16: ::libc::c_uint = 30;
pub const R_390_GOTPLT32: ::libc::c_uint = 31;
pub const R_390_GOTPLT64: ::libc::c_uint = 32;
pub const R_390_GOTPLTENT: ::libc::c_uint = 33;
pub const R_390_PLTOFF16: ::libc::c_uint = 34;
pub const R_390_PLTOFF32: ::libc::c_uint = 35;
pub const R_390_PLTOFF64: ::libc::c_uint = 36;
pub const R_390_TLS_LOAD: ::libc::c_uint = 37;
pub const R_390_TLS_GDCALL: ::libc::c_uint = 38;
pub const R_390_TLS_LDCALL: ::libc::c_uint = 39;
pub const R_390_TLS_GD32: ::libc::c_uint = 40;
pub const R_390_TLS_GD64: ::libc::c_uint = 41;
pub const R_390_TLS_GOTIE12: ::libc::c_uint = 42;
pub const R_390_TLS_GOTIE32: ::libc::c_uint = 43;
pub const R_390_TLS_GOTIE64: ::libc::c_uint = 44;
pub const R_390_TLS_LDM32: ::libc::c_uint = 45;
pub const R_390_TLS_LDM64: ::libc::c_uint = 46;
pub const R_390_TLS_IE32: ::libc::c_uint = 47;
pub const R_390_TLS_IE64: ::libc::c_uint = 48;
pub const R_390_TLS_IEENT: ::libc::c_uint = 49;
pub const R_390_TLS_LE32: ::libc::c_uint = 50;
pub const R_390_TLS_LE64: ::libc::c_uint = 51;
pub const R_390_TLS_LDO32: ::libc::c_uint = 52;
pub const R_390_TLS_LDO64: ::libc::c_uint = 53;
pub const R_390_TLS_DTPMOD: ::libc::c_uint = 54;
pub const R_390_TLS_DTPOFF: ::libc::c_uint = 55;
pub const R_390_TLS_TPOFF: ::libc::c_uint = 56;
pub const R_390_20: ::libc::c_uint = 57;
pub const R_390_GOT20: ::libc::c_uint = 58;
pub const R_390_GOTPLT20: ::libc::c_uint = 59;
pub const R_390_TLS_GOTIE20: ::libc::c_uint = 60;
pub const R_390_IRELATIVE: ::libc::c_uint = 61;
pub const R_390_NUM: ::libc::c_uint = 62;
pub const R_CRIS_NONE: ::libc::c_uint = 0;
pub const R_CRIS_8: ::libc::c_uint = 1;
pub const R_CRIS_16: ::libc::c_uint = 2;
pub const R_CRIS_32: ::libc::c_uint = 3;
pub const R_CRIS_8_PCREL: ::libc::c_uint = 4;
pub const R_CRIS_16_PCREL: ::libc::c_uint = 5;
pub const R_CRIS_32_PCREL: ::libc::c_uint = 6;
pub const R_CRIS_GNU_VTINHERIT: ::libc::c_uint = 7;
pub const R_CRIS_GNU_VTENTRY: ::libc::c_uint = 8;
pub const R_CRIS_COPY: ::libc::c_uint = 9;
pub const R_CRIS_GLOB_DAT: ::libc::c_uint = 10;
pub const R_CRIS_JUMP_SLOT: ::libc::c_uint = 11;
pub const R_CRIS_RELATIVE: ::libc::c_uint = 12;
pub const R_CRIS_16_GOT: ::libc::c_uint = 13;
pub const R_CRIS_32_GOT: ::libc::c_uint = 14;
pub const R_CRIS_16_GOTPLT: ::libc::c_uint = 15;
pub const R_CRIS_32_GOTPLT: ::libc::c_uint = 16;
pub const R_CRIS_32_GOTREL: ::libc::c_uint = 17;
pub const R_CRIS_32_PLT_GOTREL: ::libc::c_uint = 18;
pub const R_CRIS_32_PLT_PCREL: ::libc::c_uint = 19;
pub const R_CRIS_NUM: ::libc::c_uint = 20;
pub const R_X86_64_NONE: ::libc::c_uint = 0;
pub const R_X86_64_64: ::libc::c_uint = 1;
pub const R_X86_64_PC32: ::libc::c_uint = 2;
pub const R_X86_64_GOT32: ::libc::c_uint = 3;
pub const R_X86_64_PLT32: ::libc::c_uint = 4;
pub const R_X86_64_COPY: ::libc::c_uint = 5;
pub const R_X86_64_GLOB_DAT: ::libc::c_uint = 6;
pub const R_X86_64_JUMP_SLOT: ::libc::c_uint = 7;
pub const R_X86_64_RELATIVE: ::libc::c_uint = 8;
pub const R_X86_64_GOTPCREL: ::libc::c_uint = 9;
pub const R_X86_64_32: ::libc::c_uint = 10;
pub const R_X86_64_32S: ::libc::c_uint = 11;
pub const R_X86_64_16: ::libc::c_uint = 12;
pub const R_X86_64_PC16: ::libc::c_uint = 13;
pub const R_X86_64_8: ::libc::c_uint = 14;
pub const R_X86_64_PC8: ::libc::c_uint = 15;
pub const R_X86_64_DTPMOD64: ::libc::c_uint = 16;
pub const R_X86_64_DTPOFF64: ::libc::c_uint = 17;
pub const R_X86_64_TPOFF64: ::libc::c_uint = 18;
pub const R_X86_64_TLSGD: ::libc::c_uint = 19;
pub const R_X86_64_TLSLD: ::libc::c_uint = 20;
pub const R_X86_64_DTPOFF32: ::libc::c_uint = 21;
pub const R_X86_64_GOTTPOFF: ::libc::c_uint = 22;
pub const R_X86_64_TPOFF32: ::libc::c_uint = 23;
pub const R_X86_64_PC64: ::libc::c_uint = 24;
pub const R_X86_64_GOTOFF64: ::libc::c_uint = 25;
pub const R_X86_64_GOTPC32: ::libc::c_uint = 26;
pub const R_X86_64_GOT64: ::libc::c_uint = 27;
pub const R_X86_64_GOTPCREL64: ::libc::c_uint = 28;
pub const R_X86_64_GOTPC64: ::libc::c_uint = 29;
pub const R_X86_64_GOTPLT64: ::libc::c_uint = 30;
pub const R_X86_64_PLTOFF64: ::libc::c_uint = 31;
pub const R_X86_64_SIZE32: ::libc::c_uint = 32;
pub const R_X86_64_SIZE64: ::libc::c_uint = 33;
pub const R_X86_64_GOTPC32_TLSDESC: ::libc::c_uint = 34;
pub const R_X86_64_TLSDESC_CALL: ::libc::c_uint = 35;
pub const R_X86_64_TLSDESC: ::libc::c_uint = 36;
pub const R_X86_64_IRELATIVE: ::libc::c_uint = 37;
pub const R_X86_64_RELATIVE64: ::libc::c_uint = 38;
pub const R_X86_64_GOTPCRELX: ::libc::c_uint = 41;
pub const R_X86_64_REX_GOTPCRELX: ::libc::c_uint = 42;
pub const R_X86_64_NUM: ::libc::c_uint = 43;
pub const R_MN10300_NONE: ::libc::c_uint = 0;
pub const R_MN10300_32: ::libc::c_uint = 1;
pub const R_MN10300_16: ::libc::c_uint = 2;
pub const R_MN10300_8: ::libc::c_uint = 3;
pub const R_MN10300_PCREL32: ::libc::c_uint = 4;
pub const R_MN10300_PCREL16: ::libc::c_uint = 5;
pub const R_MN10300_PCREL8: ::libc::c_uint = 6;
pub const R_MN10300_GNU_VTINHERIT: ::libc::c_uint = 7;
pub const R_MN10300_GNU_VTENTRY: ::libc::c_uint = 8;
pub const R_MN10300_24: ::libc::c_uint = 9;
pub const R_MN10300_GOTPC32: ::libc::c_uint = 10;
pub const R_MN10300_GOTPC16: ::libc::c_uint = 11;
pub const R_MN10300_GOTOFF32: ::libc::c_uint = 12;
pub const R_MN10300_GOTOFF24: ::libc::c_uint = 13;
pub const R_MN10300_GOTOFF16: ::libc::c_uint = 14;
pub const R_MN10300_PLT32: ::libc::c_uint = 15;
pub const R_MN10300_PLT16: ::libc::c_uint = 16;
pub const R_MN10300_GOT32: ::libc::c_uint = 17;
pub const R_MN10300_GOT24: ::libc::c_uint = 18;
pub const R_MN10300_GOT16: ::libc::c_uint = 19;
pub const R_MN10300_COPY: ::libc::c_uint = 20;
pub const R_MN10300_GLOB_DAT: ::libc::c_uint = 21;
pub const R_MN10300_JMP_SLOT: ::libc::c_uint = 22;
pub const R_MN10300_RELATIVE: ::libc::c_uint = 23;
pub const R_MN10300_TLS_GD: ::libc::c_uint = 24;
pub const R_MN10300_TLS_LD: ::libc::c_uint = 25;
pub const R_MN10300_TLS_LDO: ::libc::c_uint = 26;
pub const R_MN10300_TLS_GOTIE: ::libc::c_uint = 27;
pub const R_MN10300_TLS_IE: ::libc::c_uint = 28;
pub const R_MN10300_TLS_LE: ::libc::c_uint = 29;
pub const R_MN10300_TLS_DTPMOD: ::libc::c_uint = 30;
pub const R_MN10300_TLS_DTPOFF: ::libc::c_uint = 31;
pub const R_MN10300_TLS_TPOFF: ::libc::c_uint = 32;
pub const R_MN10300_SYM_DIFF: ::libc::c_uint = 33;
pub const R_MN10300_ALIGN: ::libc::c_uint = 34;
pub const R_MN10300_NUM: ::libc::c_uint = 35;
pub const R_M32R_NONE: ::libc::c_uint = 0;
pub const R_M32R_16: ::libc::c_uint = 1;
pub const R_M32R_32: ::libc::c_uint = 2;
pub const R_M32R_24: ::libc::c_uint = 3;
pub const R_M32R_10_PCREL: ::libc::c_uint = 4;
pub const R_M32R_18_PCREL: ::libc::c_uint = 5;
pub const R_M32R_26_PCREL: ::libc::c_uint = 6;
pub const R_M32R_HI16_ULO: ::libc::c_uint = 7;
pub const R_M32R_HI16_SLO: ::libc::c_uint = 8;
pub const R_M32R_LO16: ::libc::c_uint = 9;
pub const R_M32R_SDA16: ::libc::c_uint = 10;
pub const R_M32R_GNU_VTINHERIT: ::libc::c_uint = 11;
pub const R_M32R_GNU_VTENTRY: ::libc::c_uint = 12;
pub const R_M32R_16_RELA: ::libc::c_uint = 33;
pub const R_M32R_32_RELA: ::libc::c_uint = 34;
pub const R_M32R_24_RELA: ::libc::c_uint = 35;
pub const R_M32R_10_PCREL_RELA: ::libc::c_uint = 36;
pub const R_M32R_18_PCREL_RELA: ::libc::c_uint = 37;
pub const R_M32R_26_PCREL_RELA: ::libc::c_uint = 38;
pub const R_M32R_HI16_ULO_RELA: ::libc::c_uint = 39;
pub const R_M32R_HI16_SLO_RELA: ::libc::c_uint = 40;
pub const R_M32R_LO16_RELA: ::libc::c_uint = 41;
pub const R_M32R_SDA16_RELA: ::libc::c_uint = 42;
pub const R_M32R_RELA_GNU_VTINHERIT: ::libc::c_uint = 43;
pub const R_M32R_RELA_GNU_VTENTRY: ::libc::c_uint = 44;
pub const R_M32R_REL32: ::libc::c_uint = 45;
pub const R_M32R_GOT24: ::libc::c_uint = 48;
pub const R_M32R_26_PLTREL: ::libc::c_uint = 49;
pub const R_M32R_COPY: ::libc::c_uint = 50;
pub const R_M32R_GLOB_DAT: ::libc::c_uint = 51;
pub const R_M32R_JMP_SLOT: ::libc::c_uint = 52;
pub const R_M32R_RELATIVE: ::libc::c_uint = 53;
pub const R_M32R_GOTOFF: ::libc::c_uint = 54;
pub const R_M32R_GOTPC24: ::libc::c_uint = 55;
pub const R_M32R_GOT16_HI_ULO: ::libc::c_uint = 56;
pub const R_M32R_GOT16_HI_SLO: ::libc::c_uint = 57;
pub const R_M32R_GOT16_LO: ::libc::c_uint = 58;
pub const R_M32R_GOTPC_HI_ULO: ::libc::c_uint = 59;
pub const R_M32R_GOTPC_HI_SLO: ::libc::c_uint = 60;
pub const R_M32R_GOTPC_LO: ::libc::c_uint = 61;
pub const R_M32R_GOTOFF_HI_ULO: ::libc::c_uint = 62;
pub const R_M32R_GOTOFF_HI_SLO: ::libc::c_uint = 63;
pub const R_M32R_GOTOFF_LO: ::libc::c_uint = 64;
pub const R_M32R_NUM: ::libc::c_uint = 256;
pub const R_MICROBLAZE_NONE: ::libc::c_uint = 0;
pub const R_MICROBLAZE_32: ::libc::c_uint = 1;
pub const R_MICROBLAZE_32_PCREL: ::libc::c_uint = 2;
pub const R_MICROBLAZE_64_PCREL: ::libc::c_uint = 3;
pub const R_MICROBLAZE_32_PCREL_LO: ::libc::c_uint = 4;
pub const R_MICROBLAZE_64: ::libc::c_uint = 5;
pub const R_MICROBLAZE_32_LO: ::libc::c_uint = 6;
pub const R_MICROBLAZE_SRO32: ::libc::c_uint = 7;
pub const R_MICROBLAZE_SRW32: ::libc::c_uint = 8;
pub const R_MICROBLAZE_64_NONE: ::libc::c_uint = 9;
pub const R_MICROBLAZE_32_SYM_OP_SYM: ::libc::c_uint = 10;
pub const R_MICROBLAZE_GNU_VTINHERIT: ::libc::c_uint = 11;
pub const R_MICROBLAZE_GNU_VTENTRY: ::libc::c_uint = 12;
pub const R_MICROBLAZE_GOTPC_64: ::libc::c_uint = 13;
pub const R_MICROBLAZE_GOT_64: ::libc::c_uint = 14;
pub const R_MICROBLAZE_PLT_64: ::libc::c_uint = 15;
pub const R_MICROBLAZE_REL: ::libc::c_uint = 16;
pub const R_MICROBLAZE_JUMP_SLOT: ::libc::c_uint = 17;
pub const R_MICROBLAZE_GLOB_DAT: ::libc::c_uint = 18;
pub const R_MICROBLAZE_GOTOFF_64: ::libc::c_uint = 19;
pub const R_MICROBLAZE_GOTOFF_32: ::libc::c_uint = 20;
pub const R_MICROBLAZE_COPY: ::libc::c_uint = 21;
pub const R_MICROBLAZE_TLS: ::libc::c_uint = 22;
pub const R_MICROBLAZE_TLSGD: ::libc::c_uint = 23;
pub const R_MICROBLAZE_TLSLD: ::libc::c_uint = 24;
pub const R_MICROBLAZE_TLSDTPMOD32: ::libc::c_uint = 25;
pub const R_MICROBLAZE_TLSDTPREL32: ::libc::c_uint = 26;
pub const R_MICROBLAZE_TLSDTPREL64: ::libc::c_uint = 27;
pub const R_MICROBLAZE_TLSGOTTPREL32: ::libc::c_uint = 28;
pub const R_MICROBLAZE_TLSTPREL32: ::libc::c_uint = 29;
pub const DT_NIOS2_GP: ::libc::c_uint = 1879048194;
pub const R_NIOS2_NONE: ::libc::c_uint = 0;
pub const R_NIOS2_S16: ::libc::c_uint = 1;
pub const R_NIOS2_U16: ::libc::c_uint = 2;
pub const R_NIOS2_PCREL16: ::libc::c_uint = 3;
pub const R_NIOS2_CALL26: ::libc::c_uint = 4;
pub const R_NIOS2_IMM5: ::libc::c_uint = 5;
pub const R_NIOS2_CACHE_OPX: ::libc::c_uint = 6;
pub const R_NIOS2_IMM6: ::libc::c_uint = 7;
pub const R_NIOS2_IMM8: ::libc::c_uint = 8;
pub const R_NIOS2_HI16: ::libc::c_uint = 9;
pub const R_NIOS2_LO16: ::libc::c_uint = 10;
pub const R_NIOS2_HIADJ16: ::libc::c_uint = 11;
pub const R_NIOS2_BFD_RELOC_32: ::libc::c_uint = 12;
pub const R_NIOS2_BFD_RELOC_16: ::libc::c_uint = 13;
pub const R_NIOS2_BFD_RELOC_8: ::libc::c_uint = 14;
pub const R_NIOS2_GPREL: ::libc::c_uint = 15;
pub const R_NIOS2_GNU_VTINHERIT: ::libc::c_uint = 16;
pub const R_NIOS2_GNU_VTENTRY: ::libc::c_uint = 17;
pub const R_NIOS2_UJMP: ::libc::c_uint = 18;
pub const R_NIOS2_CJMP: ::libc::c_uint = 19;
pub const R_NIOS2_CALLR: ::libc::c_uint = 20;
pub const R_NIOS2_ALIGN: ::libc::c_uint = 21;
pub const R_NIOS2_GOT16: ::libc::c_uint = 22;
pub const R_NIOS2_CALL16: ::libc::c_uint = 23;
pub const R_NIOS2_GOTOFF_LO: ::libc::c_uint = 24;
pub const R_NIOS2_GOTOFF_HA: ::libc::c_uint = 25;
pub const R_NIOS2_PCREL_LO: ::libc::c_uint = 26;
pub const R_NIOS2_PCREL_HA: ::libc::c_uint = 27;
pub const R_NIOS2_TLS_GD16: ::libc::c_uint = 28;
pub const R_NIOS2_TLS_LDM16: ::libc::c_uint = 29;
pub const R_NIOS2_TLS_LDO16: ::libc::c_uint = 30;
pub const R_NIOS2_TLS_IE16: ::libc::c_uint = 31;
pub const R_NIOS2_TLS_LE16: ::libc::c_uint = 32;
pub const R_NIOS2_TLS_DTPMOD: ::libc::c_uint = 33;
pub const R_NIOS2_TLS_DTPREL: ::libc::c_uint = 34;
pub const R_NIOS2_TLS_TPREL: ::libc::c_uint = 35;
pub const R_NIOS2_COPY: ::libc::c_uint = 36;
pub const R_NIOS2_GLOB_DAT: ::libc::c_uint = 37;
pub const R_NIOS2_JUMP_SLOT: ::libc::c_uint = 38;
pub const R_NIOS2_RELATIVE: ::libc::c_uint = 39;
pub const R_NIOS2_GOTOFF: ::libc::c_uint = 40;
pub const R_NIOS2_CALL26_NOAT: ::libc::c_uint = 41;
pub const R_NIOS2_GOT_LO: ::libc::c_uint = 42;
pub const R_NIOS2_GOT_HA: ::libc::c_uint = 43;
pub const R_NIOS2_CALL_LO: ::libc::c_uint = 44;
pub const R_NIOS2_CALL_HA: ::libc::c_uint = 45;
pub const R_TILEPRO_NONE: ::libc::c_uint = 0;
pub const R_TILEPRO_32: ::libc::c_uint = 1;
pub const R_TILEPRO_16: ::libc::c_uint = 2;
pub const R_TILEPRO_8: ::libc::c_uint = 3;
pub const R_TILEPRO_32_PCREL: ::libc::c_uint = 4;
pub const R_TILEPRO_16_PCREL: ::libc::c_uint = 5;
pub const R_TILEPRO_8_PCREL: ::libc::c_uint = 6;
pub const R_TILEPRO_LO16: ::libc::c_uint = 7;
pub const R_TILEPRO_HI16: ::libc::c_uint = 8;
pub const R_TILEPRO_HA16: ::libc::c_uint = 9;
pub const R_TILEPRO_COPY: ::libc::c_uint = 10;
pub const R_TILEPRO_GLOB_DAT: ::libc::c_uint = 11;
pub const R_TILEPRO_JMP_SLOT: ::libc::c_uint = 12;
pub const R_TILEPRO_RELATIVE: ::libc::c_uint = 13;
pub const R_TILEPRO_BROFF_X1: ::libc::c_uint = 14;
pub const R_TILEPRO_JOFFLONG_X1: ::libc::c_uint = 15;
pub const R_TILEPRO_JOFFLONG_X1_PLT: ::libc::c_uint = 16;
pub const R_TILEPRO_IMM8_X0: ::libc::c_uint = 17;
pub const R_TILEPRO_IMM8_Y0: ::libc::c_uint = 18;
pub const R_TILEPRO_IMM8_X1: ::libc::c_uint = 19;
pub const R_TILEPRO_IMM8_Y1: ::libc::c_uint = 20;
pub const R_TILEPRO_MT_IMM15_X1: ::libc::c_uint = 21;
pub const R_TILEPRO_MF_IMM15_X1: ::libc::c_uint = 22;
pub const R_TILEPRO_IMM16_X0: ::libc::c_uint = 23;
pub const R_TILEPRO_IMM16_X1: ::libc::c_uint = 24;
pub const R_TILEPRO_IMM16_X0_LO: ::libc::c_uint = 25;
pub const R_TILEPRO_IMM16_X1_LO: ::libc::c_uint = 26;
pub const R_TILEPRO_IMM16_X0_HI: ::libc::c_uint = 27;
pub const R_TILEPRO_IMM16_X1_HI: ::libc::c_uint = 28;
pub const R_TILEPRO_IMM16_X0_HA: ::libc::c_uint = 29;
pub const R_TILEPRO_IMM16_X1_HA: ::libc::c_uint = 30;
pub const R_TILEPRO_IMM16_X0_PCREL: ::libc::c_uint = 31;
pub const R_TILEPRO_IMM16_X1_PCREL: ::libc::c_uint = 32;
pub const R_TILEPRO_IMM16_X0_LO_PCREL: ::libc::c_uint = 33;
pub const R_TILEPRO_IMM16_X1_LO_PCREL: ::libc::c_uint = 34;
pub const R_TILEPRO_IMM16_X0_HI_PCREL: ::libc::c_uint = 35;
pub const R_TILEPRO_IMM16_X1_HI_PCREL: ::libc::c_uint = 36;
pub const R_TILEPRO_IMM16_X0_HA_PCREL: ::libc::c_uint = 37;
pub const R_TILEPRO_IMM16_X1_HA_PCREL: ::libc::c_uint = 38;
pub const R_TILEPRO_IMM16_X0_GOT: ::libc::c_uint = 39;
pub const R_TILEPRO_IMM16_X1_GOT: ::libc::c_uint = 40;
pub const R_TILEPRO_IMM16_X0_GOT_LO: ::libc::c_uint = 41;
pub const R_TILEPRO_IMM16_X1_GOT_LO: ::libc::c_uint = 42;
pub const R_TILEPRO_IMM16_X0_GOT_HI: ::libc::c_uint = 43;
pub const R_TILEPRO_IMM16_X1_GOT_HI: ::libc::c_uint = 44;
pub const R_TILEPRO_IMM16_X0_GOT_HA: ::libc::c_uint = 45;
pub const R_TILEPRO_IMM16_X1_GOT_HA: ::libc::c_uint = 46;
pub const R_TILEPRO_MMSTART_X0: ::libc::c_uint = 47;
pub const R_TILEPRO_MMEND_X0: ::libc::c_uint = 48;
pub const R_TILEPRO_MMSTART_X1: ::libc::c_uint = 49;
pub const R_TILEPRO_MMEND_X1: ::libc::c_uint = 50;
pub const R_TILEPRO_SHAMT_X0: ::libc::c_uint = 51;
pub const R_TILEPRO_SHAMT_X1: ::libc::c_uint = 52;
pub const R_TILEPRO_SHAMT_Y0: ::libc::c_uint = 53;
pub const R_TILEPRO_SHAMT_Y1: ::libc::c_uint = 54;
pub const R_TILEPRO_DEST_IMM8_X1: ::libc::c_uint = 55;
pub const R_TILEPRO_TLS_GD_CALL: ::libc::c_uint = 60;
pub const R_TILEPRO_IMM8_X0_TLS_GD_ADD: ::libc::c_uint = 61;
pub const R_TILEPRO_IMM8_X1_TLS_GD_ADD: ::libc::c_uint = 62;
pub const R_TILEPRO_IMM8_Y0_TLS_GD_ADD: ::libc::c_uint = 63;
pub const R_TILEPRO_IMM8_Y1_TLS_GD_ADD: ::libc::c_uint = 64;
pub const R_TILEPRO_TLS_IE_LOAD: ::libc::c_uint = 65;
pub const R_TILEPRO_IMM16_X0_TLS_GD: ::libc::c_uint = 66;
pub const R_TILEPRO_IMM16_X1_TLS_GD: ::libc::c_uint = 67;
pub const R_TILEPRO_IMM16_X0_TLS_GD_LO: ::libc::c_uint = 68;
pub const R_TILEPRO_IMM16_X1_TLS_GD_LO: ::libc::c_uint = 69;
pub const R_TILEPRO_IMM16_X0_TLS_GD_HI: ::libc::c_uint = 70;
pub const R_TILEPRO_IMM16_X1_TLS_GD_HI: ::libc::c_uint = 71;
pub const R_TILEPRO_IMM16_X0_TLS_GD_HA: ::libc::c_uint = 72;
pub const R_TILEPRO_IMM16_X1_TLS_GD_HA: ::libc::c_uint = 73;
pub const R_TILEPRO_IMM16_X0_TLS_IE: ::libc::c_uint = 74;
pub const R_TILEPRO_IMM16_X1_TLS_IE: ::libc::c_uint = 75;
pub const R_TILEPRO_IMM16_X0_TLS_IE_LO: ::libc::c_uint = 76;
pub const R_TILEPRO_IMM16_X1_TLS_IE_LO: ::libc::c_uint = 77;
pub const R_TILEPRO_IMM16_X0_TLS_IE_HI: ::libc::c_uint = 78;
pub const R_TILEPRO_IMM16_X1_TLS_IE_HI: ::libc::c_uint = 79;
pub const R_TILEPRO_IMM16_X0_TLS_IE_HA: ::libc::c_uint = 80;
pub const R_TILEPRO_IMM16_X1_TLS_IE_HA: ::libc::c_uint = 81;
pub const R_TILEPRO_TLS_DTPMOD32: ::libc::c_uint = 82;
pub const R_TILEPRO_TLS_DTPOFF32: ::libc::c_uint = 83;
pub const R_TILEPRO_TLS_TPOFF32: ::libc::c_uint = 84;
pub const R_TILEPRO_IMM16_X0_TLS_LE: ::libc::c_uint = 85;
pub const R_TILEPRO_IMM16_X1_TLS_LE: ::libc::c_uint = 86;
pub const R_TILEPRO_IMM16_X0_TLS_LE_LO: ::libc::c_uint = 87;
pub const R_TILEPRO_IMM16_X1_TLS_LE_LO: ::libc::c_uint = 88;
pub const R_TILEPRO_IMM16_X0_TLS_LE_HI: ::libc::c_uint = 89;
pub const R_TILEPRO_IMM16_X1_TLS_LE_HI: ::libc::c_uint = 90;
pub const R_TILEPRO_IMM16_X0_TLS_LE_HA: ::libc::c_uint = 91;
pub const R_TILEPRO_IMM16_X1_TLS_LE_HA: ::libc::c_uint = 92;
pub const R_TILEPRO_GNU_VTINHERIT: ::libc::c_uint = 128;
pub const R_TILEPRO_GNU_VTENTRY: ::libc::c_uint = 129;
pub const R_TILEPRO_NUM: ::libc::c_uint = 130;
pub const R_TILEGX_NONE: ::libc::c_uint = 0;
pub const R_TILEGX_64: ::libc::c_uint = 1;
pub const R_TILEGX_32: ::libc::c_uint = 2;
pub const R_TILEGX_16: ::libc::c_uint = 3;
pub const R_TILEGX_8: ::libc::c_uint = 4;
pub const R_TILEGX_64_PCREL: ::libc::c_uint = 5;
pub const R_TILEGX_32_PCREL: ::libc::c_uint = 6;
pub const R_TILEGX_16_PCREL: ::libc::c_uint = 7;
pub const R_TILEGX_8_PCREL: ::libc::c_uint = 8;
pub const R_TILEGX_HW0: ::libc::c_uint = 9;
pub const R_TILEGX_HW1: ::libc::c_uint = 10;
pub const R_TILEGX_HW2: ::libc::c_uint = 11;
pub const R_TILEGX_HW3: ::libc::c_uint = 12;
pub const R_TILEGX_HW0_LAST: ::libc::c_uint = 13;
pub const R_TILEGX_HW1_LAST: ::libc::c_uint = 14;
pub const R_TILEGX_HW2_LAST: ::libc::c_uint = 15;
pub const R_TILEGX_COPY: ::libc::c_uint = 16;
pub const R_TILEGX_GLOB_DAT: ::libc::c_uint = 17;
pub const R_TILEGX_JMP_SLOT: ::libc::c_uint = 18;
pub const R_TILEGX_RELATIVE: ::libc::c_uint = 19;
pub const R_TILEGX_BROFF_X1: ::libc::c_uint = 20;
pub const R_TILEGX_JUMPOFF_X1: ::libc::c_uint = 21;
pub const R_TILEGX_JUMPOFF_X1_PLT: ::libc::c_uint = 22;
pub const R_TILEGX_IMM8_X0: ::libc::c_uint = 23;
pub const R_TILEGX_IMM8_Y0: ::libc::c_uint = 24;
pub const R_TILEGX_IMM8_X1: ::libc::c_uint = 25;
pub const R_TILEGX_IMM8_Y1: ::libc::c_uint = 26;
pub const R_TILEGX_DEST_IMM8_X1: ::libc::c_uint = 27;
pub const R_TILEGX_MT_IMM14_X1: ::libc::c_uint = 28;
pub const R_TILEGX_MF_IMM14_X1: ::libc::c_uint = 29;
pub const R_TILEGX_MMSTART_X0: ::libc::c_uint = 30;
pub const R_TILEGX_MMEND_X0: ::libc::c_uint = 31;
pub const R_TILEGX_SHAMT_X0: ::libc::c_uint = 32;
pub const R_TILEGX_SHAMT_X1: ::libc::c_uint = 33;
pub const R_TILEGX_SHAMT_Y0: ::libc::c_uint = 34;
pub const R_TILEGX_SHAMT_Y1: ::libc::c_uint = 35;
pub const R_TILEGX_IMM16_X0_HW0: ::libc::c_uint = 36;
pub const R_TILEGX_IMM16_X1_HW0: ::libc::c_uint = 37;
pub const R_TILEGX_IMM16_X0_HW1: ::libc::c_uint = 38;
pub const R_TILEGX_IMM16_X1_HW1: ::libc::c_uint = 39;
pub const R_TILEGX_IMM16_X0_HW2: ::libc::c_uint = 40;
pub const R_TILEGX_IMM16_X1_HW2: ::libc::c_uint = 41;
pub const R_TILEGX_IMM16_X0_HW3: ::libc::c_uint = 42;
pub const R_TILEGX_IMM16_X1_HW3: ::libc::c_uint = 43;
pub const R_TILEGX_IMM16_X0_HW0_LAST: ::libc::c_uint = 44;
pub const R_TILEGX_IMM16_X1_HW0_LAST: ::libc::c_uint = 45;
pub const R_TILEGX_IMM16_X0_HW1_LAST: ::libc::c_uint = 46;
pub const R_TILEGX_IMM16_X1_HW1_LAST: ::libc::c_uint = 47;
pub const R_TILEGX_IMM16_X0_HW2_LAST: ::libc::c_uint = 48;
pub const R_TILEGX_IMM16_X1_HW2_LAST: ::libc::c_uint = 49;
pub const R_TILEGX_IMM16_X0_HW0_PCREL: ::libc::c_uint = 50;
pub const R_TILEGX_IMM16_X1_HW0_PCREL: ::libc::c_uint = 51;
pub const R_TILEGX_IMM16_X0_HW1_PCREL: ::libc::c_uint = 52;
pub const R_TILEGX_IMM16_X1_HW1_PCREL: ::libc::c_uint = 53;
pub const R_TILEGX_IMM16_X0_HW2_PCREL: ::libc::c_uint = 54;
pub const R_TILEGX_IMM16_X1_HW2_PCREL: ::libc::c_uint = 55;
pub const R_TILEGX_IMM16_X0_HW3_PCREL: ::libc::c_uint = 56;
pub const R_TILEGX_IMM16_X1_HW3_PCREL: ::libc::c_uint = 57;
pub const R_TILEGX_IMM16_X0_HW0_LAST_PCREL: ::libc::c_uint = 58;
pub const R_TILEGX_IMM16_X1_HW0_LAST_PCREL: ::libc::c_uint = 59;
pub const R_TILEGX_IMM16_X0_HW1_LAST_PCREL: ::libc::c_uint = 60;
pub const R_TILEGX_IMM16_X1_HW1_LAST_PCREL: ::libc::c_uint = 61;
pub const R_TILEGX_IMM16_X0_HW2_LAST_PCREL: ::libc::c_uint = 62;
pub const R_TILEGX_IMM16_X1_HW2_LAST_PCREL: ::libc::c_uint = 63;
pub const R_TILEGX_IMM16_X0_HW0_GOT: ::libc::c_uint = 64;
pub const R_TILEGX_IMM16_X1_HW0_GOT: ::libc::c_uint = 65;
pub const R_TILEGX_IMM16_X0_HW0_PLT_PCREL: ::libc::c_uint = 66;
pub const R_TILEGX_IMM16_X1_HW0_PLT_PCREL: ::libc::c_uint = 67;
pub const R_TILEGX_IMM16_X0_HW1_PLT_PCREL: ::libc::c_uint = 68;
pub const R_TILEGX_IMM16_X1_HW1_PLT_PCREL: ::libc::c_uint = 69;
pub const R_TILEGX_IMM16_X0_HW2_PLT_PCREL: ::libc::c_uint = 70;
pub const R_TILEGX_IMM16_X1_HW2_PLT_PCREL: ::libc::c_uint = 71;
pub const R_TILEGX_IMM16_X0_HW0_LAST_GOT: ::libc::c_uint = 72;
pub const R_TILEGX_IMM16_X1_HW0_LAST_GOT: ::libc::c_uint = 73;
pub const R_TILEGX_IMM16_X0_HW1_LAST_GOT: ::libc::c_uint = 74;
pub const R_TILEGX_IMM16_X1_HW1_LAST_GOT: ::libc::c_uint = 75;
pub const R_TILEGX_IMM16_X0_HW3_PLT_PCREL: ::libc::c_uint = 76;
pub const R_TILEGX_IMM16_X1_HW3_PLT_PCREL: ::libc::c_uint = 77;
pub const R_TILEGX_IMM16_X0_HW0_TLS_GD: ::libc::c_uint = 78;
pub const R_TILEGX_IMM16_X1_HW0_TLS_GD: ::libc::c_uint = 79;
pub const R_TILEGX_IMM16_X0_HW0_TLS_LE: ::libc::c_uint = 80;
pub const R_TILEGX_IMM16_X1_HW0_TLS_LE: ::libc::c_uint = 81;
pub const R_TILEGX_IMM16_X0_HW0_LAST_TLS_LE: ::libc::c_uint = 82;
pub const R_TILEGX_IMM16_X1_HW0_LAST_TLS_LE: ::libc::c_uint = 83;
pub const R_TILEGX_IMM16_X0_HW1_LAST_TLS_LE: ::libc::c_uint = 84;
pub const R_TILEGX_IMM16_X1_HW1_LAST_TLS_LE: ::libc::c_uint = 85;
pub const R_TILEGX_IMM16_X0_HW0_LAST_TLS_GD: ::libc::c_uint = 86;
pub const R_TILEGX_IMM16_X1_HW0_LAST_TLS_GD: ::libc::c_uint = 87;
pub const R_TILEGX_IMM16_X0_HW1_LAST_TLS_GD: ::libc::c_uint = 88;
pub const R_TILEGX_IMM16_X1_HW1_LAST_TLS_GD: ::libc::c_uint = 89;
pub const R_TILEGX_IMM16_X0_HW0_TLS_IE: ::libc::c_uint = 92;
pub const R_TILEGX_IMM16_X1_HW0_TLS_IE: ::libc::c_uint = 93;
pub const R_TILEGX_IMM16_X0_HW0_LAST_PLT_PCREL: ::libc::c_uint = 94;
pub const R_TILEGX_IMM16_X1_HW0_LAST_PLT_PCREL: ::libc::c_uint = 95;
pub const R_TILEGX_IMM16_X0_HW1_LAST_PLT_PCREL: ::libc::c_uint = 96;
pub const R_TILEGX_IMM16_X1_HW1_LAST_PLT_PCREL: ::libc::c_uint = 97;
pub const R_TILEGX_IMM16_X0_HW2_LAST_PLT_PCREL: ::libc::c_uint = 98;
pub const R_TILEGX_IMM16_X1_HW2_LAST_PLT_PCREL: ::libc::c_uint = 99;
pub const R_TILEGX_IMM16_X0_HW0_LAST_TLS_IE: ::libc::c_uint = 100;
pub const R_TILEGX_IMM16_X1_HW0_LAST_TLS_IE: ::libc::c_uint = 101;
pub const R_TILEGX_IMM16_X0_HW1_LAST_TLS_IE: ::libc::c_uint = 102;
pub const R_TILEGX_IMM16_X1_HW1_LAST_TLS_IE: ::libc::c_uint = 103;
pub const R_TILEGX_TLS_DTPMOD64: ::libc::c_uint = 106;
pub const R_TILEGX_TLS_DTPOFF64: ::libc::c_uint = 107;
pub const R_TILEGX_TLS_TPOFF64: ::libc::c_uint = 108;
pub const R_TILEGX_TLS_DTPMOD32: ::libc::c_uint = 109;
pub const R_TILEGX_TLS_DTPOFF32: ::libc::c_uint = 110;
pub const R_TILEGX_TLS_TPOFF32: ::libc::c_uint = 111;
pub const R_TILEGX_TLS_GD_CALL: ::libc::c_uint = 112;
pub const R_TILEGX_IMM8_X0_TLS_GD_ADD: ::libc::c_uint = 113;
pub const R_TILEGX_IMM8_X1_TLS_GD_ADD: ::libc::c_uint = 114;
pub const R_TILEGX_IMM8_Y0_TLS_GD_ADD: ::libc::c_uint = 115;
pub const R_TILEGX_IMM8_Y1_TLS_GD_ADD: ::libc::c_uint = 116;
pub const R_TILEGX_TLS_IE_LOAD: ::libc::c_uint = 117;
pub const R_TILEGX_IMM8_X0_TLS_ADD: ::libc::c_uint = 118;
pub const R_TILEGX_IMM8_X1_TLS_ADD: ::libc::c_uint = 119;
pub const R_TILEGX_IMM8_Y0_TLS_ADD: ::libc::c_uint = 120;
pub const R_TILEGX_IMM8_Y1_TLS_ADD: ::libc::c_uint = 121;
pub const R_TILEGX_GNU_VTINHERIT: ::libc::c_uint = 128;
pub const R_TILEGX_GNU_VTENTRY: ::libc::c_uint = 129;
pub const R_TILEGX_NUM: ::libc::c_uint = 130;
pub const R_BPF_NONE: ::libc::c_uint = 0;
pub const R_BPF_MAP_FD: ::libc::c_uint = 1;
pub type Elf32_Half = u16;
pub type Elf64_Half = u16;
pub type Elf32_Word = u32;
pub type Elf32_Sword = i32;
pub type Elf64_Word = u32;
pub type Elf64_Sword = i32;
pub type Elf32_Xword = u64;
pub type Elf32_Sxword = i64;
pub type Elf64_Xword = u64;
pub type Elf64_Sxword = i64;
pub type Elf32_Addr = u32;
pub type Elf64_Addr = u64;
pub type Elf32_Off = u32;
pub type Elf64_Off = u64;
pub type Elf32_Section = u16;
pub type Elf64_Section = u16;
pub type Elf32_Versym = Elf32_Half;
pub type Elf64_Versym = Elf64_Half;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Elf32_Ehdr {
    pub e_ident: [::libc::c_uchar; 16usize],
    pub e_type: Elf32_Half,
    pub e_machine: Elf32_Half,
    pub e_version: Elf32_Word,
    pub e_entry: Elf32_Addr,
    pub e_phoff: Elf32_Off,
    pub e_shoff: Elf32_Off,
    pub e_flags: Elf32_Word,
    pub e_ehsize: Elf32_Half,
    pub e_phentsize: Elf32_Half,
    pub e_phnum: Elf32_Half,
    pub e_shentsize: Elf32_Half,
    pub e_shnum: Elf32_Half,
    pub e_shstrndx: Elf32_Half,
}
#[test]
fn bindgen_test_layout_Elf32_Ehdr() {
    assert_eq!(::std::mem::size_of::<Elf32_Ehdr>() , 52usize , concat ! (
               "Size of: " , stringify ! ( Elf32_Ehdr ) ));
    assert_eq! (::std::mem::align_of::<Elf32_Ehdr>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( Elf32_Ehdr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Ehdr ) ) . e_ident as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Ehdr ) , "::" ,
                stringify ! ( e_ident ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Ehdr ) ) . e_type as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Ehdr ) , "::" ,
                stringify ! ( e_type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Ehdr ) ) . e_machine as * const _
                as usize } , 18usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Ehdr ) , "::" ,
                stringify ! ( e_machine ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Ehdr ) ) . e_version as * const _
                as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Ehdr ) , "::" ,
                stringify ! ( e_version ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Ehdr ) ) . e_entry as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Ehdr ) , "::" ,
                stringify ! ( e_entry ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Ehdr ) ) . e_phoff as * const _ as
                usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Ehdr ) , "::" ,
                stringify ! ( e_phoff ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Ehdr ) ) . e_shoff as * const _ as
                usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Ehdr ) , "::" ,
                stringify ! ( e_shoff ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Ehdr ) ) . e_flags as * const _ as
                usize } , 36usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Ehdr ) , "::" ,
                stringify ! ( e_flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Ehdr ) ) . e_ehsize as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Ehdr ) , "::" ,
                stringify ! ( e_ehsize ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Ehdr ) ) . e_phentsize as * const _
                as usize } , 42usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Ehdr ) , "::" ,
                stringify ! ( e_phentsize ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Ehdr ) ) . e_phnum as * const _ as
                usize } , 44usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Ehdr ) , "::" ,
                stringify ! ( e_phnum ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Ehdr ) ) . e_shentsize as * const _
                as usize } , 46usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Ehdr ) , "::" ,
                stringify ! ( e_shentsize ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Ehdr ) ) . e_shnum as * const _ as
                usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Ehdr ) , "::" ,
                stringify ! ( e_shnum ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Ehdr ) ) . e_shstrndx as * const _
                as usize } , 50usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Ehdr ) , "::" ,
                stringify ! ( e_shstrndx ) ));
}
impl Clone for Elf32_Ehdr {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Elf64_Ehdr {
    pub e_ident: [::libc::c_uchar; 16usize],
    pub e_type: Elf64_Half,
    pub e_machine: Elf64_Half,
    pub e_version: Elf64_Word,
    pub e_entry: Elf64_Addr,
    pub e_phoff: Elf64_Off,
    pub e_shoff: Elf64_Off,
    pub e_flags: Elf64_Word,
    pub e_ehsize: Elf64_Half,
    pub e_phentsize: Elf64_Half,
    pub e_phnum: Elf64_Half,
    pub e_shentsize: Elf64_Half,
    pub e_shnum: Elf64_Half,
    pub e_shstrndx: Elf64_Half,
}
#[test]
fn bindgen_test_layout_Elf64_Ehdr() {
    assert_eq!(::std::mem::size_of::<Elf64_Ehdr>() , 64usize , concat ! (
               "Size of: " , stringify ! ( Elf64_Ehdr ) ));
    assert_eq! (::std::mem::align_of::<Elf64_Ehdr>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( Elf64_Ehdr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Ehdr ) ) . e_ident as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Ehdr ) , "::" ,
                stringify ! ( e_ident ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Ehdr ) ) . e_type as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Ehdr ) , "::" ,
                stringify ! ( e_type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Ehdr ) ) . e_machine as * const _
                as usize } , 18usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Ehdr ) , "::" ,
                stringify ! ( e_machine ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Ehdr ) ) . e_version as * const _
                as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Ehdr ) , "::" ,
                stringify ! ( e_version ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Ehdr ) ) . e_entry as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Ehdr ) , "::" ,
                stringify ! ( e_entry ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Ehdr ) ) . e_phoff as * const _ as
                usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Ehdr ) , "::" ,
                stringify ! ( e_phoff ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Ehdr ) ) . e_shoff as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Ehdr ) , "::" ,
                stringify ! ( e_shoff ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Ehdr ) ) . e_flags as * const _ as
                usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Ehdr ) , "::" ,
                stringify ! ( e_flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Ehdr ) ) . e_ehsize as * const _ as
                usize } , 52usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Ehdr ) , "::" ,
                stringify ! ( e_ehsize ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Ehdr ) ) . e_phentsize as * const _
                as usize } , 54usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Ehdr ) , "::" ,
                stringify ! ( e_phentsize ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Ehdr ) ) . e_phnum as * const _ as
                usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Ehdr ) , "::" ,
                stringify ! ( e_phnum ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Ehdr ) ) . e_shentsize as * const _
                as usize } , 58usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Ehdr ) , "::" ,
                stringify ! ( e_shentsize ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Ehdr ) ) . e_shnum as * const _ as
                usize } , 60usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Ehdr ) , "::" ,
                stringify ! ( e_shnum ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Ehdr ) ) . e_shstrndx as * const _
                as usize } , 62usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Ehdr ) , "::" ,
                stringify ! ( e_shstrndx ) ));
}
impl Clone for Elf64_Ehdr {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Elf32_Shdr {
    pub sh_name: Elf32_Word,
    pub sh_type: Elf32_Word,
    pub sh_flags: Elf32_Word,
    pub sh_addr: Elf32_Addr,
    pub sh_offset: Elf32_Off,
    pub sh_size: Elf32_Word,
    pub sh_link: Elf32_Word,
    pub sh_info: Elf32_Word,
    pub sh_addralign: Elf32_Word,
    pub sh_entsize: Elf32_Word,
}
#[test]
fn bindgen_test_layout_Elf32_Shdr() {
    assert_eq!(::std::mem::size_of::<Elf32_Shdr>() , 40usize , concat ! (
               "Size of: " , stringify ! ( Elf32_Shdr ) ));
    assert_eq! (::std::mem::align_of::<Elf32_Shdr>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( Elf32_Shdr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Shdr ) ) . sh_name as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Shdr ) , "::" ,
                stringify ! ( sh_name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Shdr ) ) . sh_type as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Shdr ) , "::" ,
                stringify ! ( sh_type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Shdr ) ) . sh_flags as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Shdr ) , "::" ,
                stringify ! ( sh_flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Shdr ) ) . sh_addr as * const _ as
                usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Shdr ) , "::" ,
                stringify ! ( sh_addr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Shdr ) ) . sh_offset as * const _
                as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Shdr ) , "::" ,
                stringify ! ( sh_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Shdr ) ) . sh_size as * const _ as
                usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Shdr ) , "::" ,
                stringify ! ( sh_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Shdr ) ) . sh_link as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Shdr ) , "::" ,
                stringify ! ( sh_link ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Shdr ) ) . sh_info as * const _ as
                usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Shdr ) , "::" ,
                stringify ! ( sh_info ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Shdr ) ) . sh_addralign as * const
                _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Shdr ) , "::" ,
                stringify ! ( sh_addralign ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Shdr ) ) . sh_entsize as * const _
                as usize } , 36usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Shdr ) , "::" ,
                stringify ! ( sh_entsize ) ));
}
impl Clone for Elf32_Shdr {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Elf64_Shdr {
    pub sh_name: Elf64_Word,
    pub sh_type: Elf64_Word,
    pub sh_flags: Elf64_Xword,
    pub sh_addr: Elf64_Addr,
    pub sh_offset: Elf64_Off,
    pub sh_size: Elf64_Xword,
    pub sh_link: Elf64_Word,
    pub sh_info: Elf64_Word,
    pub sh_addralign: Elf64_Xword,
    pub sh_entsize: Elf64_Xword,
}
#[test]
fn bindgen_test_layout_Elf64_Shdr() {
    assert_eq!(::std::mem::size_of::<Elf64_Shdr>() , 64usize , concat ! (
               "Size of: " , stringify ! ( Elf64_Shdr ) ));
    assert_eq! (::std::mem::align_of::<Elf64_Shdr>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( Elf64_Shdr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Shdr ) ) . sh_name as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Shdr ) , "::" ,
                stringify ! ( sh_name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Shdr ) ) . sh_type as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Shdr ) , "::" ,
                stringify ! ( sh_type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Shdr ) ) . sh_flags as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Shdr ) , "::" ,
                stringify ! ( sh_flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Shdr ) ) . sh_addr as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Shdr ) , "::" ,
                stringify ! ( sh_addr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Shdr ) ) . sh_offset as * const _
                as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Shdr ) , "::" ,
                stringify ! ( sh_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Shdr ) ) . sh_size as * const _ as
                usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Shdr ) , "::" ,
                stringify ! ( sh_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Shdr ) ) . sh_link as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Shdr ) , "::" ,
                stringify ! ( sh_link ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Shdr ) ) . sh_info as * const _ as
                usize } , 44usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Shdr ) , "::" ,
                stringify ! ( sh_info ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Shdr ) ) . sh_addralign as * const
                _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Shdr ) , "::" ,
                stringify ! ( sh_addralign ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Shdr ) ) . sh_entsize as * const _
                as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Shdr ) , "::" ,
                stringify ! ( sh_entsize ) ));
}
impl Clone for Elf64_Shdr {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Elf32_Chdr {
    pub ch_type: Elf32_Word,
    pub ch_size: Elf32_Word,
    pub ch_addralign: Elf32_Word,
}
#[test]
fn bindgen_test_layout_Elf32_Chdr() {
    assert_eq!(::std::mem::size_of::<Elf32_Chdr>() , 12usize , concat ! (
               "Size of: " , stringify ! ( Elf32_Chdr ) ));
    assert_eq! (::std::mem::align_of::<Elf32_Chdr>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( Elf32_Chdr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Chdr ) ) . ch_type as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Chdr ) , "::" ,
                stringify ! ( ch_type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Chdr ) ) . ch_size as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Chdr ) , "::" ,
                stringify ! ( ch_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Chdr ) ) . ch_addralign as * const
                _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Chdr ) , "::" ,
                stringify ! ( ch_addralign ) ));
}
impl Clone for Elf32_Chdr {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Elf64_Chdr {
    pub ch_type: Elf64_Word,
    pub ch_reserved: Elf64_Word,
    pub ch_size: Elf64_Xword,
    pub ch_addralign: Elf64_Xword,
}
#[test]
fn bindgen_test_layout_Elf64_Chdr() {
    assert_eq!(::std::mem::size_of::<Elf64_Chdr>() , 24usize , concat ! (
               "Size of: " , stringify ! ( Elf64_Chdr ) ));
    assert_eq! (::std::mem::align_of::<Elf64_Chdr>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( Elf64_Chdr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Chdr ) ) . ch_type as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Chdr ) , "::" ,
                stringify ! ( ch_type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Chdr ) ) . ch_reserved as * const _
                as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Chdr ) , "::" ,
                stringify ! ( ch_reserved ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Chdr ) ) . ch_size as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Chdr ) , "::" ,
                stringify ! ( ch_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Chdr ) ) . ch_addralign as * const
                _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Chdr ) , "::" ,
                stringify ! ( ch_addralign ) ));
}
impl Clone for Elf64_Chdr {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Elf32_Sym {
    pub st_name: Elf32_Word,
    pub st_value: Elf32_Addr,
    pub st_size: Elf32_Word,
    pub st_info: ::libc::c_uchar,
    pub st_other: ::libc::c_uchar,
    pub st_shndx: Elf32_Section,
}
#[test]
fn bindgen_test_layout_Elf32_Sym() {
    assert_eq!(::std::mem::size_of::<Elf32_Sym>() , 16usize , concat ! (
               "Size of: " , stringify ! ( Elf32_Sym ) ));
    assert_eq! (::std::mem::align_of::<Elf32_Sym>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( Elf32_Sym ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Sym ) ) . st_name as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Sym ) , "::" ,
                stringify ! ( st_name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Sym ) ) . st_value as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Sym ) , "::" ,
                stringify ! ( st_value ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Sym ) ) . st_size as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Sym ) , "::" ,
                stringify ! ( st_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Sym ) ) . st_info as * const _ as
                usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Sym ) , "::" ,
                stringify ! ( st_info ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Sym ) ) . st_other as * const _ as
                usize } , 13usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Sym ) , "::" ,
                stringify ! ( st_other ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Sym ) ) . st_shndx as * const _ as
                usize } , 14usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Sym ) , "::" ,
                stringify ! ( st_shndx ) ));
}
impl Clone for Elf32_Sym {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Elf64_Sym {
    pub st_name: Elf64_Word,
    pub st_info: ::libc::c_uchar,
    pub st_other: ::libc::c_uchar,
    pub st_shndx: Elf64_Section,
    pub st_value: Elf64_Addr,
    pub st_size: Elf64_Xword,
}
#[test]
fn bindgen_test_layout_Elf64_Sym() {
    assert_eq!(::std::mem::size_of::<Elf64_Sym>() , 24usize , concat ! (
               "Size of: " , stringify ! ( Elf64_Sym ) ));
    assert_eq! (::std::mem::align_of::<Elf64_Sym>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( Elf64_Sym ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Sym ) ) . st_name as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Sym ) , "::" ,
                stringify ! ( st_name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Sym ) ) . st_info as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Sym ) , "::" ,
                stringify ! ( st_info ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Sym ) ) . st_other as * const _ as
                usize } , 5usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Sym ) , "::" ,
                stringify ! ( st_other ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Sym ) ) . st_shndx as * const _ as
                usize } , 6usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Sym ) , "::" ,
                stringify ! ( st_shndx ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Sym ) ) . st_value as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Sym ) , "::" ,
                stringify ! ( st_value ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Sym ) ) . st_size as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Sym ) , "::" ,
                stringify ! ( st_size ) ));
}
impl Clone for Elf64_Sym {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Elf32_Syminfo {
    pub si_boundto: Elf32_Half,
    pub si_flags: Elf32_Half,
}
#[test]
fn bindgen_test_layout_Elf32_Syminfo() {
    assert_eq!(::std::mem::size_of::<Elf32_Syminfo>() , 4usize , concat ! (
               "Size of: " , stringify ! ( Elf32_Syminfo ) ));
    assert_eq! (::std::mem::align_of::<Elf32_Syminfo>() , 2usize , concat ! (
                "Alignment of " , stringify ! ( Elf32_Syminfo ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Syminfo ) ) . si_boundto as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Syminfo ) , "::"
                , stringify ! ( si_boundto ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Syminfo ) ) . si_flags as * const _
                as usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Syminfo ) , "::"
                , stringify ! ( si_flags ) ));
}
impl Clone for Elf32_Syminfo {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Elf64_Syminfo {
    pub si_boundto: Elf64_Half,
    pub si_flags: Elf64_Half,
}
#[test]
fn bindgen_test_layout_Elf64_Syminfo() {
    assert_eq!(::std::mem::size_of::<Elf64_Syminfo>() , 4usize , concat ! (
               "Size of: " , stringify ! ( Elf64_Syminfo ) ));
    assert_eq! (::std::mem::align_of::<Elf64_Syminfo>() , 2usize , concat ! (
                "Alignment of " , stringify ! ( Elf64_Syminfo ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Syminfo ) ) . si_boundto as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Syminfo ) , "::"
                , stringify ! ( si_boundto ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Syminfo ) ) . si_flags as * const _
                as usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Syminfo ) , "::"
                , stringify ! ( si_flags ) ));
}
impl Clone for Elf64_Syminfo {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Elf32_Rel {
    pub r_offset: Elf32_Addr,
    pub r_info: Elf32_Word,
}
#[test]
fn bindgen_test_layout_Elf32_Rel() {
    assert_eq!(::std::mem::size_of::<Elf32_Rel>() , 8usize , concat ! (
               "Size of: " , stringify ! ( Elf32_Rel ) ));
    assert_eq! (::std::mem::align_of::<Elf32_Rel>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( Elf32_Rel ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Rel ) ) . r_offset as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Rel ) , "::" ,
                stringify ! ( r_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Rel ) ) . r_info as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Rel ) , "::" ,
                stringify ! ( r_info ) ));
}
impl Clone for Elf32_Rel {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Elf64_Rel {
    pub r_offset: Elf64_Addr,
    pub r_info: Elf64_Xword,
}
#[test]
fn bindgen_test_layout_Elf64_Rel() {
    assert_eq!(::std::mem::size_of::<Elf64_Rel>() , 16usize , concat ! (
               "Size of: " , stringify ! ( Elf64_Rel ) ));
    assert_eq! (::std::mem::align_of::<Elf64_Rel>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( Elf64_Rel ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Rel ) ) . r_offset as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Rel ) , "::" ,
                stringify ! ( r_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Rel ) ) . r_info as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Rel ) , "::" ,
                stringify ! ( r_info ) ));
}
impl Clone for Elf64_Rel {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Elf32_Rela {
    pub r_offset: Elf32_Addr,
    pub r_info: Elf32_Word,
    pub r_addend: Elf32_Sword,
}
#[test]
fn bindgen_test_layout_Elf32_Rela() {
    assert_eq!(::std::mem::size_of::<Elf32_Rela>() , 12usize , concat ! (
               "Size of: " , stringify ! ( Elf32_Rela ) ));
    assert_eq! (::std::mem::align_of::<Elf32_Rela>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( Elf32_Rela ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Rela ) ) . r_offset as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Rela ) , "::" ,
                stringify ! ( r_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Rela ) ) . r_info as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Rela ) , "::" ,
                stringify ! ( r_info ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Rela ) ) . r_addend as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Rela ) , "::" ,
                stringify ! ( r_addend ) ));
}
impl Clone for Elf32_Rela {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Elf64_Rela {
    pub r_offset: Elf64_Addr,
    pub r_info: Elf64_Xword,
    pub r_addend: Elf64_Sxword,
}
#[test]
fn bindgen_test_layout_Elf64_Rela() {
    assert_eq!(::std::mem::size_of::<Elf64_Rela>() , 24usize , concat ! (
               "Size of: " , stringify ! ( Elf64_Rela ) ));
    assert_eq! (::std::mem::align_of::<Elf64_Rela>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( Elf64_Rela ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Rela ) ) . r_offset as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Rela ) , "::" ,
                stringify ! ( r_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Rela ) ) . r_info as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Rela ) , "::" ,
                stringify ! ( r_info ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Rela ) ) . r_addend as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Rela ) , "::" ,
                stringify ! ( r_addend ) ));
}
impl Clone for Elf64_Rela {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Elf32_Phdr {
    pub p_type: Elf32_Word,
    pub p_offset: Elf32_Off,
    pub p_vaddr: Elf32_Addr,
    pub p_paddr: Elf32_Addr,
    pub p_filesz: Elf32_Word,
    pub p_memsz: Elf32_Word,
    pub p_flags: Elf32_Word,
    pub p_align: Elf32_Word,
}
#[test]
fn bindgen_test_layout_Elf32_Phdr() {
    assert_eq!(::std::mem::size_of::<Elf32_Phdr>() , 32usize , concat ! (
               "Size of: " , stringify ! ( Elf32_Phdr ) ));
    assert_eq! (::std::mem::align_of::<Elf32_Phdr>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( Elf32_Phdr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Phdr ) ) . p_type as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Phdr ) , "::" ,
                stringify ! ( p_type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Phdr ) ) . p_offset as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Phdr ) , "::" ,
                stringify ! ( p_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Phdr ) ) . p_vaddr as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Phdr ) , "::" ,
                stringify ! ( p_vaddr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Phdr ) ) . p_paddr as * const _ as
                usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Phdr ) , "::" ,
                stringify ! ( p_paddr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Phdr ) ) . p_filesz as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Phdr ) , "::" ,
                stringify ! ( p_filesz ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Phdr ) ) . p_memsz as * const _ as
                usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Phdr ) , "::" ,
                stringify ! ( p_memsz ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Phdr ) ) . p_flags as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Phdr ) , "::" ,
                stringify ! ( p_flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Phdr ) ) . p_align as * const _ as
                usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Phdr ) , "::" ,
                stringify ! ( p_align ) ));
}
impl Clone for Elf32_Phdr {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Elf64_Phdr {
    pub p_type: Elf64_Word,
    pub p_flags: Elf64_Word,
    pub p_offset: Elf64_Off,
    pub p_vaddr: Elf64_Addr,
    pub p_paddr: Elf64_Addr,
    pub p_filesz: Elf64_Xword,
    pub p_memsz: Elf64_Xword,
    pub p_align: Elf64_Xword,
}
#[test]
fn bindgen_test_layout_Elf64_Phdr() {
    assert_eq!(::std::mem::size_of::<Elf64_Phdr>() , 56usize , concat ! (
               "Size of: " , stringify ! ( Elf64_Phdr ) ));
    assert_eq! (::std::mem::align_of::<Elf64_Phdr>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( Elf64_Phdr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Phdr ) ) . p_type as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Phdr ) , "::" ,
                stringify ! ( p_type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Phdr ) ) . p_flags as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Phdr ) , "::" ,
                stringify ! ( p_flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Phdr ) ) . p_offset as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Phdr ) , "::" ,
                stringify ! ( p_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Phdr ) ) . p_vaddr as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Phdr ) , "::" ,
                stringify ! ( p_vaddr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Phdr ) ) . p_paddr as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Phdr ) , "::" ,
                stringify ! ( p_paddr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Phdr ) ) . p_filesz as * const _ as
                usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Phdr ) , "::" ,
                stringify ! ( p_filesz ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Phdr ) ) . p_memsz as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Phdr ) , "::" ,
                stringify ! ( p_memsz ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Phdr ) ) . p_align as * const _ as
                usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Phdr ) , "::" ,
                stringify ! ( p_align ) ));
}
impl Clone for Elf64_Phdr {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct Elf32_Dyn {
    pub d_tag: Elf32_Sword,
    pub d_un: Elf32_Dyn__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy)]
pub union Elf32_Dyn__bindgen_ty_1 {
    pub d_val: Elf32_Word,
    pub d_ptr: Elf32_Addr,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_Elf32_Dyn__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<Elf32_Dyn__bindgen_ty_1>() , 4usize ,
               concat ! (
               "Size of: " , stringify ! ( Elf32_Dyn__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<Elf32_Dyn__bindgen_ty_1>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( Elf32_Dyn__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Dyn__bindgen_ty_1 ) ) . d_val as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Dyn__bindgen_ty_1
                ) , "::" , stringify ! ( d_val ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Dyn__bindgen_ty_1 ) ) . d_ptr as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Dyn__bindgen_ty_1
                ) , "::" , stringify ! ( d_ptr ) ));
}
impl Clone for Elf32_Dyn__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_Elf32_Dyn() {
    assert_eq!(::std::mem::size_of::<Elf32_Dyn>() , 8usize , concat ! (
               "Size of: " , stringify ! ( Elf32_Dyn ) ));
    assert_eq! (::std::mem::align_of::<Elf32_Dyn>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( Elf32_Dyn ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Dyn ) ) . d_tag as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Dyn ) , "::" ,
                stringify ! ( d_tag ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Dyn ) ) . d_un as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Dyn ) , "::" ,
                stringify ! ( d_un ) ));
}
impl Clone for Elf32_Dyn {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct Elf64_Dyn {
    pub d_tag: Elf64_Sxword,
    pub d_un: Elf64_Dyn__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy)]
pub union Elf64_Dyn__bindgen_ty_1 {
    pub d_val: Elf64_Xword,
    pub d_ptr: Elf64_Addr,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_Elf64_Dyn__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<Elf64_Dyn__bindgen_ty_1>() , 8usize ,
               concat ! (
               "Size of: " , stringify ! ( Elf64_Dyn__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<Elf64_Dyn__bindgen_ty_1>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( Elf64_Dyn__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Dyn__bindgen_ty_1 ) ) . d_val as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Dyn__bindgen_ty_1
                ) , "::" , stringify ! ( d_val ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Dyn__bindgen_ty_1 ) ) . d_ptr as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Dyn__bindgen_ty_1
                ) , "::" , stringify ! ( d_ptr ) ));
}
impl Clone for Elf64_Dyn__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_Elf64_Dyn() {
    assert_eq!(::std::mem::size_of::<Elf64_Dyn>() , 16usize , concat ! (
               "Size of: " , stringify ! ( Elf64_Dyn ) ));
    assert_eq! (::std::mem::align_of::<Elf64_Dyn>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( Elf64_Dyn ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Dyn ) ) . d_tag as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Dyn ) , "::" ,
                stringify ! ( d_tag ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Dyn ) ) . d_un as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Dyn ) , "::" ,
                stringify ! ( d_un ) ));
}
impl Clone for Elf64_Dyn {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Elf32_Verdef {
    pub vd_version: Elf32_Half,
    pub vd_flags: Elf32_Half,
    pub vd_ndx: Elf32_Half,
    pub vd_cnt: Elf32_Half,
    pub vd_hash: Elf32_Word,
    pub vd_aux: Elf32_Word,
    pub vd_next: Elf32_Word,
}
#[test]
fn bindgen_test_layout_Elf32_Verdef() {
    assert_eq!(::std::mem::size_of::<Elf32_Verdef>() , 20usize , concat ! (
               "Size of: " , stringify ! ( Elf32_Verdef ) ));
    assert_eq! (::std::mem::align_of::<Elf32_Verdef>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( Elf32_Verdef ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Verdef ) ) . vd_version as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Verdef ) , "::" ,
                stringify ! ( vd_version ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Verdef ) ) . vd_flags as * const _
                as usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Verdef ) , "::" ,
                stringify ! ( vd_flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Verdef ) ) . vd_ndx as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Verdef ) , "::" ,
                stringify ! ( vd_ndx ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Verdef ) ) . vd_cnt as * const _ as
                usize } , 6usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Verdef ) , "::" ,
                stringify ! ( vd_cnt ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Verdef ) ) . vd_hash as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Verdef ) , "::" ,
                stringify ! ( vd_hash ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Verdef ) ) . vd_aux as * const _ as
                usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Verdef ) , "::" ,
                stringify ! ( vd_aux ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Verdef ) ) . vd_next as * const _
                as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Verdef ) , "::" ,
                stringify ! ( vd_next ) ));
}
impl Clone for Elf32_Verdef {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Elf64_Verdef {
    pub vd_version: Elf64_Half,
    pub vd_flags: Elf64_Half,
    pub vd_ndx: Elf64_Half,
    pub vd_cnt: Elf64_Half,
    pub vd_hash: Elf64_Word,
    pub vd_aux: Elf64_Word,
    pub vd_next: Elf64_Word,
}
#[test]
fn bindgen_test_layout_Elf64_Verdef() {
    assert_eq!(::std::mem::size_of::<Elf64_Verdef>() , 20usize , concat ! (
               "Size of: " , stringify ! ( Elf64_Verdef ) ));
    assert_eq! (::std::mem::align_of::<Elf64_Verdef>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( Elf64_Verdef ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Verdef ) ) . vd_version as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Verdef ) , "::" ,
                stringify ! ( vd_version ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Verdef ) ) . vd_flags as * const _
                as usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Verdef ) , "::" ,
                stringify ! ( vd_flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Verdef ) ) . vd_ndx as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Verdef ) , "::" ,
                stringify ! ( vd_ndx ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Verdef ) ) . vd_cnt as * const _ as
                usize } , 6usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Verdef ) , "::" ,
                stringify ! ( vd_cnt ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Verdef ) ) . vd_hash as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Verdef ) , "::" ,
                stringify ! ( vd_hash ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Verdef ) ) . vd_aux as * const _ as
                usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Verdef ) , "::" ,
                stringify ! ( vd_aux ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Verdef ) ) . vd_next as * const _
                as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Verdef ) , "::" ,
                stringify ! ( vd_next ) ));
}
impl Clone for Elf64_Verdef {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Elf32_Verdaux {
    pub vda_name: Elf32_Word,
    pub vda_next: Elf32_Word,
}
#[test]
fn bindgen_test_layout_Elf32_Verdaux() {
    assert_eq!(::std::mem::size_of::<Elf32_Verdaux>() , 8usize , concat ! (
               "Size of: " , stringify ! ( Elf32_Verdaux ) ));
    assert_eq! (::std::mem::align_of::<Elf32_Verdaux>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( Elf32_Verdaux ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Verdaux ) ) . vda_name as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Verdaux ) , "::"
                , stringify ! ( vda_name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Verdaux ) ) . vda_next as * const _
                as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Verdaux ) , "::"
                , stringify ! ( vda_next ) ));
}
impl Clone for Elf32_Verdaux {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Elf64_Verdaux {
    pub vda_name: Elf64_Word,
    pub vda_next: Elf64_Word,
}
#[test]
fn bindgen_test_layout_Elf64_Verdaux() {
    assert_eq!(::std::mem::size_of::<Elf64_Verdaux>() , 8usize , concat ! (
               "Size of: " , stringify ! ( Elf64_Verdaux ) ));
    assert_eq! (::std::mem::align_of::<Elf64_Verdaux>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( Elf64_Verdaux ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Verdaux ) ) . vda_name as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Verdaux ) , "::"
                , stringify ! ( vda_name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Verdaux ) ) . vda_next as * const _
                as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Verdaux ) , "::"
                , stringify ! ( vda_next ) ));
}
impl Clone for Elf64_Verdaux {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Elf32_Verneed {
    pub vn_version: Elf32_Half,
    pub vn_cnt: Elf32_Half,
    pub vn_file: Elf32_Word,
    pub vn_aux: Elf32_Word,
    pub vn_next: Elf32_Word,
}
#[test]
fn bindgen_test_layout_Elf32_Verneed() {
    assert_eq!(::std::mem::size_of::<Elf32_Verneed>() , 16usize , concat ! (
               "Size of: " , stringify ! ( Elf32_Verneed ) ));
    assert_eq! (::std::mem::align_of::<Elf32_Verneed>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( Elf32_Verneed ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Verneed ) ) . vn_version as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Verneed ) , "::"
                , stringify ! ( vn_version ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Verneed ) ) . vn_cnt as * const _
                as usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Verneed ) , "::"
                , stringify ! ( vn_cnt ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Verneed ) ) . vn_file as * const _
                as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Verneed ) , "::"
                , stringify ! ( vn_file ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Verneed ) ) . vn_aux as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Verneed ) , "::"
                , stringify ! ( vn_aux ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Verneed ) ) . vn_next as * const _
                as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Verneed ) , "::"
                , stringify ! ( vn_next ) ));
}
impl Clone for Elf32_Verneed {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Elf64_Verneed {
    pub vn_version: Elf64_Half,
    pub vn_cnt: Elf64_Half,
    pub vn_file: Elf64_Word,
    pub vn_aux: Elf64_Word,
    pub vn_next: Elf64_Word,
}
#[test]
fn bindgen_test_layout_Elf64_Verneed() {
    assert_eq!(::std::mem::size_of::<Elf64_Verneed>() , 16usize , concat ! (
               "Size of: " , stringify ! ( Elf64_Verneed ) ));
    assert_eq! (::std::mem::align_of::<Elf64_Verneed>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( Elf64_Verneed ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Verneed ) ) . vn_version as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Verneed ) , "::"
                , stringify ! ( vn_version ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Verneed ) ) . vn_cnt as * const _
                as usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Verneed ) , "::"
                , stringify ! ( vn_cnt ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Verneed ) ) . vn_file as * const _
                as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Verneed ) , "::"
                , stringify ! ( vn_file ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Verneed ) ) . vn_aux as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Verneed ) , "::"
                , stringify ! ( vn_aux ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Verneed ) ) . vn_next as * const _
                as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Verneed ) , "::"
                , stringify ! ( vn_next ) ));
}
impl Clone for Elf64_Verneed {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Elf32_Vernaux {
    pub vna_hash: Elf32_Word,
    pub vna_flags: Elf32_Half,
    pub vna_other: Elf32_Half,
    pub vna_name: Elf32_Word,
    pub vna_next: Elf32_Word,
}
#[test]
fn bindgen_test_layout_Elf32_Vernaux() {
    assert_eq!(::std::mem::size_of::<Elf32_Vernaux>() , 16usize , concat ! (
               "Size of: " , stringify ! ( Elf32_Vernaux ) ));
    assert_eq! (::std::mem::align_of::<Elf32_Vernaux>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( Elf32_Vernaux ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Vernaux ) ) . vna_hash as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Vernaux ) , "::"
                , stringify ! ( vna_hash ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Vernaux ) ) . vna_flags as * const
                _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Vernaux ) , "::"
                , stringify ! ( vna_flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Vernaux ) ) . vna_other as * const
                _ as usize } , 6usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Vernaux ) , "::"
                , stringify ! ( vna_other ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Vernaux ) ) . vna_name as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Vernaux ) , "::"
                , stringify ! ( vna_name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Vernaux ) ) . vna_next as * const _
                as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Vernaux ) , "::"
                , stringify ! ( vna_next ) ));
}
impl Clone for Elf32_Vernaux {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Elf64_Vernaux {
    pub vna_hash: Elf64_Word,
    pub vna_flags: Elf64_Half,
    pub vna_other: Elf64_Half,
    pub vna_name: Elf64_Word,
    pub vna_next: Elf64_Word,
}
#[test]
fn bindgen_test_layout_Elf64_Vernaux() {
    assert_eq!(::std::mem::size_of::<Elf64_Vernaux>() , 16usize , concat ! (
               "Size of: " , stringify ! ( Elf64_Vernaux ) ));
    assert_eq! (::std::mem::align_of::<Elf64_Vernaux>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( Elf64_Vernaux ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Vernaux ) ) . vna_hash as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Vernaux ) , "::"
                , stringify ! ( vna_hash ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Vernaux ) ) . vna_flags as * const
                _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Vernaux ) , "::"
                , stringify ! ( vna_flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Vernaux ) ) . vna_other as * const
                _ as usize } , 6usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Vernaux ) , "::"
                , stringify ! ( vna_other ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Vernaux ) ) . vna_name as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Vernaux ) , "::"
                , stringify ! ( vna_name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Vernaux ) ) . vna_next as * const _
                as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Vernaux ) , "::"
                , stringify ! ( vna_next ) ));
}
impl Clone for Elf64_Vernaux {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct Elf32_auxv_t {
    pub a_type: u32,
    pub a_un: Elf32_auxv_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy)]
pub union Elf32_auxv_t__bindgen_ty_1 {
    pub a_val: u32,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_Elf32_auxv_t__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<Elf32_auxv_t__bindgen_ty_1>() , 4usize ,
               concat ! (
               "Size of: " , stringify ! ( Elf32_auxv_t__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<Elf32_auxv_t__bindgen_ty_1>() , 4usize
                , concat ! (
                "Alignment of " , stringify ! ( Elf32_auxv_t__bindgen_ty_1 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_auxv_t__bindgen_ty_1 ) ) . a_val as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                Elf32_auxv_t__bindgen_ty_1 ) , "::" , stringify ! ( a_val )
                ));
}
impl Clone for Elf32_auxv_t__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_Elf32_auxv_t() {
    assert_eq!(::std::mem::size_of::<Elf32_auxv_t>() , 8usize , concat ! (
               "Size of: " , stringify ! ( Elf32_auxv_t ) ));
    assert_eq! (::std::mem::align_of::<Elf32_auxv_t>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( Elf32_auxv_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_auxv_t ) ) . a_type as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_auxv_t ) , "::" ,
                stringify ! ( a_type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_auxv_t ) ) . a_un as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_auxv_t ) , "::" ,
                stringify ! ( a_un ) ));
}
impl Clone for Elf32_auxv_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct Elf64_auxv_t {
    pub a_type: u64,
    pub a_un: Elf64_auxv_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy)]
pub union Elf64_auxv_t__bindgen_ty_1 {
    pub a_val: u64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_Elf64_auxv_t__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<Elf64_auxv_t__bindgen_ty_1>() , 8usize ,
               concat ! (
               "Size of: " , stringify ! ( Elf64_auxv_t__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<Elf64_auxv_t__bindgen_ty_1>() , 8usize
                , concat ! (
                "Alignment of " , stringify ! ( Elf64_auxv_t__bindgen_ty_1 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_auxv_t__bindgen_ty_1 ) ) . a_val as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                Elf64_auxv_t__bindgen_ty_1 ) , "::" , stringify ! ( a_val )
                ));
}
impl Clone for Elf64_auxv_t__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_Elf64_auxv_t() {
    assert_eq!(::std::mem::size_of::<Elf64_auxv_t>() , 16usize , concat ! (
               "Size of: " , stringify ! ( Elf64_auxv_t ) ));
    assert_eq! (::std::mem::align_of::<Elf64_auxv_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( Elf64_auxv_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_auxv_t ) ) . a_type as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_auxv_t ) , "::" ,
                stringify ! ( a_type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_auxv_t ) ) . a_un as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_auxv_t ) , "::" ,
                stringify ! ( a_un ) ));
}
impl Clone for Elf64_auxv_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Elf32_Nhdr {
    pub n_namesz: Elf32_Word,
    pub n_descsz: Elf32_Word,
    pub n_type: Elf32_Word,
}
#[test]
fn bindgen_test_layout_Elf32_Nhdr() {
    assert_eq!(::std::mem::size_of::<Elf32_Nhdr>() , 12usize , concat ! (
               "Size of: " , stringify ! ( Elf32_Nhdr ) ));
    assert_eq! (::std::mem::align_of::<Elf32_Nhdr>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( Elf32_Nhdr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Nhdr ) ) . n_namesz as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Nhdr ) , "::" ,
                stringify ! ( n_namesz ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Nhdr ) ) . n_descsz as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Nhdr ) , "::" ,
                stringify ! ( n_descsz ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Nhdr ) ) . n_type as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Nhdr ) , "::" ,
                stringify ! ( n_type ) ));
}
impl Clone for Elf32_Nhdr {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Elf64_Nhdr {
    pub n_namesz: Elf64_Word,
    pub n_descsz: Elf64_Word,
    pub n_type: Elf64_Word,
}
#[test]
fn bindgen_test_layout_Elf64_Nhdr() {
    assert_eq!(::std::mem::size_of::<Elf64_Nhdr>() , 12usize , concat ! (
               "Size of: " , stringify ! ( Elf64_Nhdr ) ));
    assert_eq! (::std::mem::align_of::<Elf64_Nhdr>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( Elf64_Nhdr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Nhdr ) ) . n_namesz as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Nhdr ) , "::" ,
                stringify ! ( n_namesz ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Nhdr ) ) . n_descsz as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Nhdr ) , "::" ,
                stringify ! ( n_descsz ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Nhdr ) ) . n_type as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Nhdr ) , "::" ,
                stringify ! ( n_type ) ));
}
impl Clone for Elf64_Nhdr {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Elf32_Move {
    pub m_value: Elf32_Xword,
    pub m_info: Elf32_Word,
    pub m_poffset: Elf32_Word,
    pub m_repeat: Elf32_Half,
    pub m_stride: Elf32_Half,
}
#[test]
fn bindgen_test_layout_Elf32_Move() {
    assert_eq!(::std::mem::size_of::<Elf32_Move>() , 24usize , concat ! (
               "Size of: " , stringify ! ( Elf32_Move ) ));
    assert_eq! (::std::mem::align_of::<Elf32_Move>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( Elf32_Move ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Move ) ) . m_value as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Move ) , "::" ,
                stringify ! ( m_value ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Move ) ) . m_info as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Move ) , "::" ,
                stringify ! ( m_info ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Move ) ) . m_poffset as * const _
                as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Move ) , "::" ,
                stringify ! ( m_poffset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Move ) ) . m_repeat as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Move ) , "::" ,
                stringify ! ( m_repeat ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Move ) ) . m_stride as * const _ as
                usize } , 18usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Move ) , "::" ,
                stringify ! ( m_stride ) ));
}
impl Clone for Elf32_Move {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Elf64_Move {
    pub m_value: Elf64_Xword,
    pub m_info: Elf64_Xword,
    pub m_poffset: Elf64_Xword,
    pub m_repeat: Elf64_Half,
    pub m_stride: Elf64_Half,
}
#[test]
fn bindgen_test_layout_Elf64_Move() {
    assert_eq!(::std::mem::size_of::<Elf64_Move>() , 32usize , concat ! (
               "Size of: " , stringify ! ( Elf64_Move ) ));
    assert_eq! (::std::mem::align_of::<Elf64_Move>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( Elf64_Move ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Move ) ) . m_value as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Move ) , "::" ,
                stringify ! ( m_value ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Move ) ) . m_info as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Move ) , "::" ,
                stringify ! ( m_info ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Move ) ) . m_poffset as * const _
                as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Move ) , "::" ,
                stringify ! ( m_poffset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Move ) ) . m_repeat as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Move ) , "::" ,
                stringify ! ( m_repeat ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Move ) ) . m_stride as * const _ as
                usize } , 26usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Move ) , "::" ,
                stringify ! ( m_stride ) ));
}
impl Clone for Elf64_Move {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub union Elf32_gptab {
    pub gt_header: Elf32_gptab__bindgen_ty_1,
    pub gt_entry: Elf32_gptab__bindgen_ty_2,
    _bindgen_union_align: [u32; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Elf32_gptab__bindgen_ty_1 {
    pub gt_current_g_value: Elf32_Word,
    pub gt_unused: Elf32_Word,
}
#[test]
fn bindgen_test_layout_Elf32_gptab__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<Elf32_gptab__bindgen_ty_1>() , 8usize ,
               concat ! (
               "Size of: " , stringify ! ( Elf32_gptab__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<Elf32_gptab__bindgen_ty_1>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( Elf32_gptab__bindgen_ty_1 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_gptab__bindgen_ty_1 ) ) .
                gt_current_g_value as * const _ as usize } , 0usize , concat !
                (
                "Alignment of field: " , stringify ! (
                Elf32_gptab__bindgen_ty_1 ) , "::" , stringify ! (
                gt_current_g_value ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_gptab__bindgen_ty_1 ) ) . gt_unused
                as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                Elf32_gptab__bindgen_ty_1 ) , "::" , stringify ! ( gt_unused )
                ));
}
impl Clone for Elf32_gptab__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Elf32_gptab__bindgen_ty_2 {
    pub gt_g_value: Elf32_Word,
    pub gt_bytes: Elf32_Word,
}
#[test]
fn bindgen_test_layout_Elf32_gptab__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<Elf32_gptab__bindgen_ty_2>() , 8usize ,
               concat ! (
               "Size of: " , stringify ! ( Elf32_gptab__bindgen_ty_2 ) ));
    assert_eq! (::std::mem::align_of::<Elf32_gptab__bindgen_ty_2>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( Elf32_gptab__bindgen_ty_2 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_gptab__bindgen_ty_2 ) ) .
                gt_g_value as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                Elf32_gptab__bindgen_ty_2 ) , "::" , stringify ! ( gt_g_value
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_gptab__bindgen_ty_2 ) ) . gt_bytes
                as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                Elf32_gptab__bindgen_ty_2 ) , "::" , stringify ! ( gt_bytes )
                ));
}
impl Clone for Elf32_gptab__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_Elf32_gptab() {
    assert_eq!(::std::mem::size_of::<Elf32_gptab>() , 8usize , concat ! (
               "Size of: " , stringify ! ( Elf32_gptab ) ));
    assert_eq! (::std::mem::align_of::<Elf32_gptab>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( Elf32_gptab ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_gptab ) ) . gt_header as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_gptab ) , "::" ,
                stringify ! ( gt_header ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_gptab ) ) . gt_entry as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_gptab ) , "::" ,
                stringify ! ( gt_entry ) ));
}
impl Clone for Elf32_gptab {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Elf32_RegInfo {
    pub ri_gprmask: Elf32_Word,
    pub ri_cprmask: [Elf32_Word; 4usize],
    pub ri_gp_value: Elf32_Sword,
}
#[test]
fn bindgen_test_layout_Elf32_RegInfo() {
    assert_eq!(::std::mem::size_of::<Elf32_RegInfo>() , 24usize , concat ! (
               "Size of: " , stringify ! ( Elf32_RegInfo ) ));
    assert_eq! (::std::mem::align_of::<Elf32_RegInfo>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( Elf32_RegInfo ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_RegInfo ) ) . ri_gprmask as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_RegInfo ) , "::"
                , stringify ! ( ri_gprmask ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_RegInfo ) ) . ri_cprmask as * const
                _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_RegInfo ) , "::"
                , stringify ! ( ri_cprmask ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_RegInfo ) ) . ri_gp_value as *
                const _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_RegInfo ) , "::"
                , stringify ! ( ri_gp_value ) ));
}
impl Clone for Elf32_RegInfo {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Elf_Options {
    pub kind: ::libc::c_uchar,
    pub size: ::libc::c_uchar,
    pub section: Elf32_Section,
    pub info: Elf32_Word,
}
#[test]
fn bindgen_test_layout_Elf_Options() {
    assert_eq!(::std::mem::size_of::<Elf_Options>() , 8usize , concat ! (
               "Size of: " , stringify ! ( Elf_Options ) ));
    assert_eq! (::std::mem::align_of::<Elf_Options>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( Elf_Options ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf_Options ) ) . kind as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf_Options ) , "::" ,
                stringify ! ( kind ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf_Options ) ) . size as * const _ as
                usize } , 1usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf_Options ) , "::" ,
                stringify ! ( size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf_Options ) ) . section as * const _ as
                usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf_Options ) , "::" ,
                stringify ! ( section ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf_Options ) ) . info as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf_Options ) , "::" ,
                stringify ! ( info ) ));
}
impl Clone for Elf_Options {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Elf_Options_Hw {
    pub hwp_flags1: Elf32_Word,
    pub hwp_flags2: Elf32_Word,
}
#[test]
fn bindgen_test_layout_Elf_Options_Hw() {
    assert_eq!(::std::mem::size_of::<Elf_Options_Hw>() , 8usize , concat ! (
               "Size of: " , stringify ! ( Elf_Options_Hw ) ));
    assert_eq! (::std::mem::align_of::<Elf_Options_Hw>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( Elf_Options_Hw ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf_Options_Hw ) ) . hwp_flags1 as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf_Options_Hw ) , "::"
                , stringify ! ( hwp_flags1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf_Options_Hw ) ) . hwp_flags2 as *
                const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf_Options_Hw ) , "::"
                , stringify ! ( hwp_flags2 ) ));
}
impl Clone for Elf_Options_Hw {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Elf32_Lib {
    pub l_name: Elf32_Word,
    pub l_time_stamp: Elf32_Word,
    pub l_checksum: Elf32_Word,
    pub l_version: Elf32_Word,
    pub l_flags: Elf32_Word,
}
#[test]
fn bindgen_test_layout_Elf32_Lib() {
    assert_eq!(::std::mem::size_of::<Elf32_Lib>() , 20usize , concat ! (
               "Size of: " , stringify ! ( Elf32_Lib ) ));
    assert_eq! (::std::mem::align_of::<Elf32_Lib>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( Elf32_Lib ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Lib ) ) . l_name as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Lib ) , "::" ,
                stringify ! ( l_name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Lib ) ) . l_time_stamp as * const _
                as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Lib ) , "::" ,
                stringify ! ( l_time_stamp ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Lib ) ) . l_checksum as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Lib ) , "::" ,
                stringify ! ( l_checksum ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Lib ) ) . l_version as * const _ as
                usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Lib ) , "::" ,
                stringify ! ( l_version ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf32_Lib ) ) . l_flags as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf32_Lib ) , "::" ,
                stringify ! ( l_flags ) ));
}
impl Clone for Elf32_Lib {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Elf64_Lib {
    pub l_name: Elf64_Word,
    pub l_time_stamp: Elf64_Word,
    pub l_checksum: Elf64_Word,
    pub l_version: Elf64_Word,
    pub l_flags: Elf64_Word,
}
#[test]
fn bindgen_test_layout_Elf64_Lib() {
    assert_eq!(::std::mem::size_of::<Elf64_Lib>() , 20usize , concat ! (
               "Size of: " , stringify ! ( Elf64_Lib ) ));
    assert_eq! (::std::mem::align_of::<Elf64_Lib>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( Elf64_Lib ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Lib ) ) . l_name as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Lib ) , "::" ,
                stringify ! ( l_name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Lib ) ) . l_time_stamp as * const _
                as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Lib ) , "::" ,
                stringify ! ( l_time_stamp ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Lib ) ) . l_checksum as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Lib ) , "::" ,
                stringify ! ( l_checksum ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Lib ) ) . l_version as * const _ as
                usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Lib ) , "::" ,
                stringify ! ( l_version ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Lib ) ) . l_flags as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Lib ) , "::" ,
                stringify ! ( l_flags ) ));
}
impl Clone for Elf64_Lib {
    fn clone(&self) -> Self { *self }
}
pub type Elf32_Conflict = Elf32_Addr;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Elf_MIPS_ABIFlags_v0 {
    pub version: Elf32_Half,
    pub isa_level: ::libc::c_uchar,
    pub isa_rev: ::libc::c_uchar,
    pub gpr_size: ::libc::c_uchar,
    pub cpr1_size: ::libc::c_uchar,
    pub cpr2_size: ::libc::c_uchar,
    pub fp_abi: ::libc::c_uchar,
    pub isa_ext: Elf32_Word,
    pub ases: Elf32_Word,
    pub flags1: Elf32_Word,
    pub flags2: Elf32_Word,
}
#[test]
fn bindgen_test_layout_Elf_MIPS_ABIFlags_v0() {
    assert_eq!(::std::mem::size_of::<Elf_MIPS_ABIFlags_v0>() , 24usize ,
               concat ! ( "Size of: " , stringify ! ( Elf_MIPS_ABIFlags_v0 )
               ));
    assert_eq! (::std::mem::align_of::<Elf_MIPS_ABIFlags_v0>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( Elf_MIPS_ABIFlags_v0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf_MIPS_ABIFlags_v0 ) ) . version as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf_MIPS_ABIFlags_v0 )
                , "::" , stringify ! ( version ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf_MIPS_ABIFlags_v0 ) ) . isa_level as *
                const _ as usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf_MIPS_ABIFlags_v0 )
                , "::" , stringify ! ( isa_level ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf_MIPS_ABIFlags_v0 ) ) . isa_rev as *
                const _ as usize } , 3usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf_MIPS_ABIFlags_v0 )
                , "::" , stringify ! ( isa_rev ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf_MIPS_ABIFlags_v0 ) ) . gpr_size as *
                const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf_MIPS_ABIFlags_v0 )
                , "::" , stringify ! ( gpr_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf_MIPS_ABIFlags_v0 ) ) . cpr1_size as *
                const _ as usize } , 5usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf_MIPS_ABIFlags_v0 )
                , "::" , stringify ! ( cpr1_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf_MIPS_ABIFlags_v0 ) ) . cpr2_size as *
                const _ as usize } , 6usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf_MIPS_ABIFlags_v0 )
                , "::" , stringify ! ( cpr2_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf_MIPS_ABIFlags_v0 ) ) . fp_abi as *
                const _ as usize } , 7usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf_MIPS_ABIFlags_v0 )
                , "::" , stringify ! ( fp_abi ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf_MIPS_ABIFlags_v0 ) ) . isa_ext as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf_MIPS_ABIFlags_v0 )
                , "::" , stringify ! ( isa_ext ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf_MIPS_ABIFlags_v0 ) ) . ases as *
                const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf_MIPS_ABIFlags_v0 )
                , "::" , stringify ! ( ases ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf_MIPS_ABIFlags_v0 ) ) . flags1 as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf_MIPS_ABIFlags_v0 )
                , "::" , stringify ! ( flags1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf_MIPS_ABIFlags_v0 ) ) . flags2 as *
                const _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf_MIPS_ABIFlags_v0 )
                , "::" , stringify ! ( flags2 ) ));
}
impl Clone for Elf_MIPS_ABIFlags_v0 {
    fn clone(&self) -> Self { *self }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum Elf_Type {
    ELF_T_BYTE = 0,
    ELF_T_ADDR = 1,
    ELF_T_DYN = 2,
    ELF_T_EHDR = 3,
    ELF_T_HALF = 4,
    ELF_T_OFF = 5,
    ELF_T_PHDR = 6,
    ELF_T_RELA = 7,
    ELF_T_REL = 8,
    ELF_T_SHDR = 9,
    ELF_T_SWORD = 10,
    ELF_T_SYM = 11,
    ELF_T_WORD = 12,
    ELF_T_XWORD = 13,
    ELF_T_SXWORD = 14,
    ELF_T_VDEF = 15,
    ELF_T_VDAUX = 16,
    ELF_T_VNEED = 17,
    ELF_T_VNAUX = 18,
    ELF_T_NHDR = 19,
    ELF_T_SYMINFO = 20,
    ELF_T_MOVE = 21,
    ELF_T_LIB = 22,
    ELF_T_GNUHASH = 23,
    ELF_T_AUXV = 24,
    ELF_T_CHDR = 25,
    ELF_T_NUM = 26,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Elf_Data {
    pub d_buf: *mut ::libc::c_void,
    pub d_type: Elf_Type,
    pub d_version: ::libc::c_uint,
    pub d_size: usize,
    pub d_off: i64,
    pub d_align: usize,
}
#[test]
fn bindgen_test_layout_Elf_Data() {
    assert_eq!(::std::mem::size_of::<Elf_Data>() , 40usize , concat ! (
               "Size of: " , stringify ! ( Elf_Data ) ));
    assert_eq! (::std::mem::align_of::<Elf_Data>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( Elf_Data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf_Data ) ) . d_buf as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf_Data ) , "::" ,
                stringify ! ( d_buf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf_Data ) ) . d_type as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf_Data ) , "::" ,
                stringify ! ( d_type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf_Data ) ) . d_version as * const _ as
                usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf_Data ) , "::" ,
                stringify ! ( d_version ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf_Data ) ) . d_size as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf_Data ) , "::" ,
                stringify ! ( d_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf_Data ) ) . d_off as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf_Data ) , "::" ,
                stringify ! ( d_off ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf_Data ) ) . d_align as * const _ as
                usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf_Data ) , "::" ,
                stringify ! ( d_align ) ));
}
impl Clone for Elf_Data {
    fn clone(&self) -> Self { *self }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum Elf_Cmd {
    ELF_C_NULL = 0,
    ELF_C_READ = 1,
    ELF_C_RDWR = 2,
    ELF_C_WRITE = 3,
    ELF_C_CLR = 4,
    ELF_C_SET = 5,
    ELF_C_FDDONE = 6,
    ELF_C_FDREAD = 7,
    ELF_C_READ_MMAP = 8,
    ELF_C_RDWR_MMAP = 9,
    ELF_C_WRITE_MMAP = 10,
    ELF_C_READ_MMAP_PRIVATE = 11,
    ELF_C_EMPTY = 12,
    ELF_C_NUM = 13,
}
pub const ELF_F_DIRTY: _bindgen_ty_2 = _bindgen_ty_2::ELF_F_DIRTY;
pub const ELF_F_LAYOUT: _bindgen_ty_2 = _bindgen_ty_2::ELF_F_LAYOUT;
pub const ELF_F_PERMISSIVE: _bindgen_ty_2 = _bindgen_ty_2::ELF_F_PERMISSIVE;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_2 {
    ELF_F_DIRTY = 1,
    ELF_F_LAYOUT = 4,
    ELF_F_PERMISSIVE = 8,
}
pub const ELF_CHF_FORCE: _bindgen_ty_3 = _bindgen_ty_3::ELF_CHF_FORCE;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_3 { ELF_CHF_FORCE = 1, }
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum Elf_Kind {
    ELF_K_NONE = 0,
    ELF_K_AR = 1,
    ELF_K_COFF = 2,
    ELF_K_ELF = 3,
    ELF_K_NUM = 4,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Elf_Arhdr {
    pub ar_name: *mut ::libc::c_char,
    pub ar_date: time_t,
    pub ar_uid: uid_t,
    pub ar_gid: gid_t,
    pub ar_mode: mode_t,
    pub ar_size: i64,
    pub ar_rawname: *mut ::libc::c_char,
}
#[test]
fn bindgen_test_layout_Elf_Arhdr() {
    assert_eq!(::std::mem::size_of::<Elf_Arhdr>() , 48usize , concat ! (
               "Size of: " , stringify ! ( Elf_Arhdr ) ));
    assert_eq! (::std::mem::align_of::<Elf_Arhdr>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( Elf_Arhdr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf_Arhdr ) ) . ar_name as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf_Arhdr ) , "::" ,
                stringify ! ( ar_name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf_Arhdr ) ) . ar_date as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf_Arhdr ) , "::" ,
                stringify ! ( ar_date ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf_Arhdr ) ) . ar_uid as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf_Arhdr ) , "::" ,
                stringify ! ( ar_uid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf_Arhdr ) ) . ar_gid as * const _ as
                usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf_Arhdr ) , "::" ,
                stringify ! ( ar_gid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf_Arhdr ) ) . ar_mode as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf_Arhdr ) , "::" ,
                stringify ! ( ar_mode ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf_Arhdr ) ) . ar_size as * const _ as
                usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf_Arhdr ) , "::" ,
                stringify ! ( ar_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf_Arhdr ) ) . ar_rawname as * const _
                as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf_Arhdr ) , "::" ,
                stringify ! ( ar_rawname ) ));
}
impl Clone for Elf_Arhdr {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Elf_Arsym {
    pub as_name: *mut ::libc::c_char,
    pub as_off: usize,
    pub as_hash: ::libc::c_ulong,
}
#[test]
fn bindgen_test_layout_Elf_Arsym() {
    assert_eq!(::std::mem::size_of::<Elf_Arsym>() , 24usize , concat ! (
               "Size of: " , stringify ! ( Elf_Arsym ) ));
    assert_eq! (::std::mem::align_of::<Elf_Arsym>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( Elf_Arsym ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf_Arsym ) ) . as_name as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf_Arsym ) , "::" ,
                stringify ! ( as_name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf_Arsym ) ) . as_off as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf_Arsym ) , "::" ,
                stringify ! ( as_off ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf_Arsym ) ) . as_hash as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf_Arsym ) , "::" ,
                stringify ! ( as_hash ) ));
}
impl Clone for Elf_Arsym {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf_Scn {
    _unused: [u8; 0],
}
extern "C" {
    pub fn elf_begin(__fildes: ::libc::c_int, __cmd: Elf_Cmd, __ref: *mut Elf)
     -> *mut Elf;
}
extern "C" {
    pub fn elf_clone(__elf: *mut Elf, __cmd: Elf_Cmd) -> *mut Elf;
}
extern "C" {
    pub fn elf_memory(__image: *mut ::libc::c_char, __size: usize)
     -> *mut Elf;
}
extern "C" {
    pub fn elf_next(__elf: *mut Elf) -> Elf_Cmd;
}
extern "C" {
    pub fn elf_end(__elf: *mut Elf) -> ::libc::c_int;
}
extern "C" {
    pub fn elf_update(__elf: *mut Elf, __cmd: Elf_Cmd) -> i64;
}
extern "C" {
    pub fn elf_kind(__elf: *mut Elf) -> Elf_Kind;
}
extern "C" {
    pub fn elf_getbase(__elf: *mut Elf) -> i64;
}
extern "C" {
    pub fn elf_getident(__elf: *mut Elf, __nbytes: *mut usize)
     -> *mut ::libc::c_char;
}
extern "C" {
    pub fn elf32_getehdr(__elf: *mut Elf) -> *mut Elf32_Ehdr;
}
extern "C" {
    pub fn elf64_getehdr(__elf: *mut Elf) -> *mut Elf64_Ehdr;
}
extern "C" {
    pub fn elf32_newehdr(__elf: *mut Elf) -> *mut Elf32_Ehdr;
}
extern "C" {
    pub fn elf64_newehdr(__elf: *mut Elf) -> *mut Elf64_Ehdr;
}
extern "C" {
    pub fn elf_getphdrnum(__elf: *mut Elf, __dst: *mut usize)
     -> ::libc::c_int;
}
extern "C" {
    pub fn elf32_getphdr(__elf: *mut Elf) -> *mut Elf32_Phdr;
}
extern "C" {
    pub fn elf64_getphdr(__elf: *mut Elf) -> *mut Elf64_Phdr;
}
extern "C" {
    pub fn elf32_newphdr(__elf: *mut Elf, __cnt: usize) -> *mut Elf32_Phdr;
}
extern "C" {
    pub fn elf64_newphdr(__elf: *mut Elf, __cnt: usize) -> *mut Elf64_Phdr;
}
extern "C" {
    pub fn elf_getscn(__elf: *mut Elf, __index: usize) -> *mut Elf_Scn;
}
extern "C" {
    pub fn elf32_offscn(__elf: *mut Elf, __offset: Elf32_Off) -> *mut Elf_Scn;
}
extern "C" {
    pub fn elf64_offscn(__elf: *mut Elf, __offset: Elf64_Off) -> *mut Elf_Scn;
}
extern "C" {
    pub fn elf_ndxscn(__scn: *mut Elf_Scn) -> usize;
}
extern "C" {
    pub fn elf_nextscn(__elf: *mut Elf, __scn: *mut Elf_Scn) -> *mut Elf_Scn;
}
extern "C" {
    pub fn elf_newscn(__elf: *mut Elf) -> *mut Elf_Scn;
}
extern "C" {
    pub fn elf_scnshndx(__scn: *mut Elf_Scn) -> ::libc::c_int;
}
extern "C" {
    pub fn elf_getshdrnum(__elf: *mut Elf, __dst: *mut usize)
     -> ::libc::c_int;
}
extern "C" {
    pub fn elf_getshnum(__elf: *mut Elf, __dst: *mut usize) -> ::libc::c_int;
}
extern "C" {
    pub fn elf_getshdrstrndx(__elf: *mut Elf, __dst: *mut usize)
     -> ::libc::c_int;
}
extern "C" {
    pub fn elf_getshstrndx(__elf: *mut Elf, __dst: *mut usize)
     -> ::libc::c_int;
}
extern "C" {
    pub fn elf32_getshdr(__scn: *mut Elf_Scn) -> *mut Elf32_Shdr;
}
extern "C" {
    pub fn elf64_getshdr(__scn: *mut Elf_Scn) -> *mut Elf64_Shdr;
}
extern "C" {
    pub fn elf32_getchdr(__scn: *mut Elf_Scn) -> *mut Elf32_Chdr;
}
extern "C" {
    pub fn elf64_getchdr(__scn: *mut Elf_Scn) -> *mut Elf64_Chdr;
}
extern "C" {
    pub fn elf_compress(scn: *mut Elf_Scn, type_: ::libc::c_int,
                        flags: ::libc::c_uint) -> ::libc::c_int;
}
extern "C" {
    pub fn elf_compress_gnu(scn: *mut Elf_Scn, compress: ::libc::c_int,
                            flags: ::libc::c_uint) -> ::libc::c_int;
}
extern "C" {
    pub fn elf_flagelf(__elf: *mut Elf, __cmd: Elf_Cmd,
                       __flags: ::libc::c_uint) -> ::libc::c_uint;
}
extern "C" {
    pub fn elf_flagehdr(__elf: *mut Elf, __cmd: Elf_Cmd,
                        __flags: ::libc::c_uint) -> ::libc::c_uint;
}
extern "C" {
    pub fn elf_flagphdr(__elf: *mut Elf, __cmd: Elf_Cmd,
                        __flags: ::libc::c_uint) -> ::libc::c_uint;
}
extern "C" {
    pub fn elf_flagscn(__scn: *mut Elf_Scn, __cmd: Elf_Cmd,
                       __flags: ::libc::c_uint) -> ::libc::c_uint;
}
extern "C" {
    pub fn elf_flagdata(__data: *mut Elf_Data, __cmd: Elf_Cmd,
                        __flags: ::libc::c_uint) -> ::libc::c_uint;
}
extern "C" {
    pub fn elf_flagshdr(__scn: *mut Elf_Scn, __cmd: Elf_Cmd,
                        __flags: ::libc::c_uint) -> ::libc::c_uint;
}
extern "C" {
    pub fn elf_getdata(__scn: *mut Elf_Scn, __data: *mut Elf_Data)
     -> *mut Elf_Data;
}
extern "C" {
    pub fn elf_rawdata(__scn: *mut Elf_Scn, __data: *mut Elf_Data)
     -> *mut Elf_Data;
}
extern "C" {
    pub fn elf_newdata(__scn: *mut Elf_Scn) -> *mut Elf_Data;
}
extern "C" {
    pub fn elf_getdata_rawchunk(__elf: *mut Elf, __offset: i64, __size: usize,
                                __type: Elf_Type) -> *mut Elf_Data;
}
extern "C" {
    pub fn elf_strptr(__elf: *mut Elf, __index: usize, __offset: usize)
     -> *mut ::libc::c_char;
}
extern "C" {
    pub fn elf_getarhdr(__elf: *mut Elf) -> *mut Elf_Arhdr;
}
extern "C" {
    pub fn elf_getaroff(__elf: *mut Elf) -> i64;
}
extern "C" {
    pub fn elf_rand(__elf: *mut Elf, __offset: usize) -> usize;
}
extern "C" {
    pub fn elf_getarsym(__elf: *mut Elf, __narsyms: *mut usize)
     -> *mut Elf_Arsym;
}
extern "C" {
    pub fn elf_cntl(__elf: *mut Elf, __cmd: Elf_Cmd) -> ::libc::c_int;
}
extern "C" {
    pub fn elf_rawfile(__elf: *mut Elf, __nbytes: *mut usize)
     -> *mut ::libc::c_char;
}
extern "C" {
    pub fn elf32_fsize(__type: Elf_Type, __count: usize,
                       __version: ::libc::c_uint) -> usize;
}
extern "C" {
    pub fn elf64_fsize(__type: Elf_Type, __count: usize,
                       __version: ::libc::c_uint) -> usize;
}
extern "C" {
    pub fn elf32_xlatetom(__dest: *mut Elf_Data, __src: *const Elf_Data,
                          __encode: ::libc::c_uint) -> *mut Elf_Data;
}
extern "C" {
    pub fn elf64_xlatetom(__dest: *mut Elf_Data, __src: *const Elf_Data,
                          __encode: ::libc::c_uint) -> *mut Elf_Data;
}
extern "C" {
    pub fn elf32_xlatetof(__dest: *mut Elf_Data, __src: *const Elf_Data,
                          __encode: ::libc::c_uint) -> *mut Elf_Data;
}
extern "C" {
    pub fn elf64_xlatetof(__dest: *mut Elf_Data, __src: *const Elf_Data,
                          __encode: ::libc::c_uint) -> *mut Elf_Data;
}
extern "C" {
    pub fn elf_errno() -> ::libc::c_int;
}
extern "C" {
    pub fn elf_errmsg(__error: ::libc::c_int) -> *const ::libc::c_char;
}
extern "C" {
    pub fn elf_version(__version: ::libc::c_uint) -> ::libc::c_uint;
}
extern "C" {
    pub fn elf_fill(__fill: ::libc::c_int);
}
extern "C" {
    pub fn elf_hash(__string: *const ::libc::c_char) -> ::libc::c_ulong;
}
extern "C" {
    pub fn elf_gnu_hash(__string: *const ::libc::c_char) -> ::libc::c_ulong;
}
extern "C" {
    pub fn elf32_checksum(__elf: *mut Elf) -> ::libc::c_long;
}
extern "C" {
    pub fn elf64_checksum(__elf: *mut Elf) -> ::libc::c_long;
}
pub type GElf_Half = Elf64_Half;
pub type GElf_Word = Elf64_Word;
pub type GElf_Sword = Elf64_Sword;
pub type GElf_Xword = Elf64_Xword;
pub type GElf_Sxword = Elf64_Sxword;
pub type GElf_Addr = Elf64_Addr;
pub type GElf_Off = Elf64_Off;
pub type GElf_Ehdr = Elf64_Ehdr;
pub type GElf_Shdr = Elf64_Shdr;
pub type GElf_Section = Elf64_Section;
pub type GElf_Sym = Elf64_Sym;
pub type GElf_Syminfo = Elf64_Syminfo;
pub type GElf_Rel = Elf64_Rel;
pub type GElf_Rela = Elf64_Rela;
pub type GElf_Phdr = Elf64_Phdr;
pub type GElf_Chdr = Elf64_Chdr;
pub type GElf_Dyn = Elf64_Dyn;
pub type GElf_Verdef = Elf64_Verdef;
pub type GElf_Verdaux = Elf64_Verdaux;
pub type GElf_Verneed = Elf64_Verneed;
pub type GElf_Vernaux = Elf64_Vernaux;
pub type GElf_Versym = Elf64_Versym;
pub type GElf_auxv_t = Elf64_auxv_t;
pub type GElf_Nhdr = Elf64_Nhdr;
pub type GElf_Move = Elf64_Move;
pub type GElf_Lib = Elf64_Lib;
extern "C" {
    pub fn gelf_getclass(__elf: *mut Elf) -> ::libc::c_int;
}
extern "C" {
    pub fn gelf_fsize(__elf: *mut Elf, __type: Elf_Type, __count: usize,
                      __version: ::libc::c_uint) -> usize;
}
extern "C" {
    pub fn gelf_getehdr(__elf: *mut Elf, __dest: *mut GElf_Ehdr)
     -> *mut GElf_Ehdr;
}
extern "C" {
    pub fn gelf_update_ehdr(__elf: *mut Elf, __src: *mut GElf_Ehdr)
     -> ::libc::c_int;
}
extern "C" {
    pub fn gelf_newehdr(__elf: *mut Elf, __class: ::libc::c_int)
     -> *mut ::libc::c_void;
}
extern "C" {
    pub fn gelf_offscn(__elf: *mut Elf, __offset: GElf_Off) -> *mut Elf_Scn;
}
extern "C" {
    pub fn gelf_getshdr(__scn: *mut Elf_Scn, __dst: *mut GElf_Shdr)
     -> *mut GElf_Shdr;
}
extern "C" {
    pub fn gelf_update_shdr(__scn: *mut Elf_Scn, __src: *mut GElf_Shdr)
     -> ::libc::c_int;
}
extern "C" {
    pub fn gelf_getphdr(__elf: *mut Elf, __ndx: ::libc::c_int,
                        __dst: *mut GElf_Phdr) -> *mut GElf_Phdr;
}
extern "C" {
    pub fn gelf_update_phdr(__elf: *mut Elf, __ndx: ::libc::c_int,
                            __src: *mut GElf_Phdr) -> ::libc::c_int;
}
extern "C" {
    pub fn gelf_newphdr(__elf: *mut Elf, __phnum: usize)
     -> *mut ::libc::c_void;
}
extern "C" {
    pub fn gelf_getchdr(__scn: *mut Elf_Scn, __dst: *mut GElf_Chdr)
     -> *mut GElf_Chdr;
}
extern "C" {
    pub fn gelf_xlatetom(__elf: *mut Elf, __dest: *mut Elf_Data,
                         __src: *const Elf_Data, __encode: ::libc::c_uint)
     -> *mut Elf_Data;
}
extern "C" {
    pub fn gelf_xlatetof(__elf: *mut Elf, __dest: *mut Elf_Data,
                         __src: *const Elf_Data, __encode: ::libc::c_uint)
     -> *mut Elf_Data;
}
extern "C" {
    pub fn gelf_getrel(__data: *mut Elf_Data, __ndx: ::libc::c_int,
                       __dst: *mut GElf_Rel) -> *mut GElf_Rel;
}
extern "C" {
    pub fn gelf_getrela(__data: *mut Elf_Data, __ndx: ::libc::c_int,
                        __dst: *mut GElf_Rela) -> *mut GElf_Rela;
}
extern "C" {
    pub fn gelf_update_rel(__dst: *mut Elf_Data, __ndx: ::libc::c_int,
                           __src: *mut GElf_Rel) -> ::libc::c_int;
}
extern "C" {
    pub fn gelf_update_rela(__dst: *mut Elf_Data, __ndx: ::libc::c_int,
                            __src: *mut GElf_Rela) -> ::libc::c_int;
}
extern "C" {
    pub fn gelf_getsym(__data: *mut Elf_Data, __ndx: ::libc::c_int,
                       __dst: *mut GElf_Sym) -> *mut GElf_Sym;
}
extern "C" {
    pub fn gelf_update_sym(__data: *mut Elf_Data, __ndx: ::libc::c_int,
                           __src: *mut GElf_Sym) -> ::libc::c_int;
}
extern "C" {
    pub fn gelf_getsymshndx(__symdata: *mut Elf_Data,
                            __shndxdata: *mut Elf_Data, __ndx: ::libc::c_int,
                            __sym: *mut GElf_Sym, __xshndx: *mut Elf32_Word)
     -> *mut GElf_Sym;
}
extern "C" {
    pub fn gelf_update_symshndx(__symdata: *mut Elf_Data,
                                __shndxdata: *mut Elf_Data,
                                __ndx: ::libc::c_int, __sym: *mut GElf_Sym,
                                __xshndx: Elf32_Word) -> ::libc::c_int;
}
extern "C" {
    pub fn gelf_getsyminfo(__data: *mut Elf_Data, __ndx: ::libc::c_int,
                           __dst: *mut GElf_Syminfo) -> *mut GElf_Syminfo;
}
extern "C" {
    pub fn gelf_update_syminfo(__data: *mut Elf_Data, __ndx: ::libc::c_int,
                               __src: *mut GElf_Syminfo) -> ::libc::c_int;
}
extern "C" {
    pub fn gelf_getdyn(__data: *mut Elf_Data, __ndx: ::libc::c_int,
                       __dst: *mut GElf_Dyn) -> *mut GElf_Dyn;
}
extern "C" {
    pub fn gelf_update_dyn(__dst: *mut Elf_Data, __ndx: ::libc::c_int,
                           __src: *mut GElf_Dyn) -> ::libc::c_int;
}
extern "C" {
    pub fn gelf_getmove(__data: *mut Elf_Data, __ndx: ::libc::c_int,
                        __dst: *mut GElf_Move) -> *mut GElf_Move;
}
extern "C" {
    pub fn gelf_update_move(__data: *mut Elf_Data, __ndx: ::libc::c_int,
                            __src: *mut GElf_Move) -> ::libc::c_int;
}
extern "C" {
    pub fn gelf_getlib(__data: *mut Elf_Data, __ndx: ::libc::c_int,
                       __dst: *mut GElf_Lib) -> *mut GElf_Lib;
}
extern "C" {
    pub fn gelf_update_lib(__data: *mut Elf_Data, __ndx: ::libc::c_int,
                           __src: *mut GElf_Lib) -> ::libc::c_int;
}
extern "C" {
    pub fn gelf_getversym(__data: *mut Elf_Data, __ndx: ::libc::c_int,
                          __dst: *mut GElf_Versym) -> *mut GElf_Versym;
}
extern "C" {
    pub fn gelf_update_versym(__data: *mut Elf_Data, __ndx: ::libc::c_int,
                              __src: *mut GElf_Versym) -> ::libc::c_int;
}
extern "C" {
    pub fn gelf_getverneed(__data: *mut Elf_Data, __offset: ::libc::c_int,
                           __dst: *mut GElf_Verneed) -> *mut GElf_Verneed;
}
extern "C" {
    pub fn gelf_update_verneed(__data: *mut Elf_Data, __offset: ::libc::c_int,
                               __src: *mut GElf_Verneed) -> ::libc::c_int;
}
extern "C" {
    pub fn gelf_getvernaux(__data: *mut Elf_Data, __offset: ::libc::c_int,
                           __dst: *mut GElf_Vernaux) -> *mut GElf_Vernaux;
}
extern "C" {
    pub fn gelf_update_vernaux(__data: *mut Elf_Data, __offset: ::libc::c_int,
                               __src: *mut GElf_Vernaux) -> ::libc::c_int;
}
extern "C" {
    pub fn gelf_getverdef(__data: *mut Elf_Data, __offset: ::libc::c_int,
                          __dst: *mut GElf_Verdef) -> *mut GElf_Verdef;
}
extern "C" {
    pub fn gelf_update_verdef(__data: *mut Elf_Data, __offset: ::libc::c_int,
                              __src: *mut GElf_Verdef) -> ::libc::c_int;
}
extern "C" {
    pub fn gelf_getverdaux(__data: *mut Elf_Data, __offset: ::libc::c_int,
                           __dst: *mut GElf_Verdaux) -> *mut GElf_Verdaux;
}
extern "C" {
    pub fn gelf_update_verdaux(__data: *mut Elf_Data, __offset: ::libc::c_int,
                               __src: *mut GElf_Verdaux) -> ::libc::c_int;
}
extern "C" {
    pub fn gelf_getauxv(__data: *mut Elf_Data, __ndx: ::libc::c_int,
                        __dst: *mut GElf_auxv_t) -> *mut GElf_auxv_t;
}
extern "C" {
    pub fn gelf_update_auxv(__data: *mut Elf_Data, __ndx: ::libc::c_int,
                            __src: *mut GElf_auxv_t) -> ::libc::c_int;
}
extern "C" {
    pub fn gelf_getnote(__data: *mut Elf_Data, __offset: usize,
                        __result: *mut GElf_Nhdr, __name_offset: *mut usize,
                        __desc_offset: *mut usize) -> usize;
}
extern "C" {
    pub fn gelf_checksum(__elf: *mut Elf) -> ::libc::c_long;
}
