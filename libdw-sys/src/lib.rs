/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
pub const _LIBDWFL_H: ::libc::c_uint = 1;
pub const _LIBDW_H: ::libc::c_uint = 1;
pub type Dwarf_Cmd = u32;
pub const DWARF_C_READ: Dwarf_Cmd = 0;
pub const DWARF_C_RDWR: Dwarf_Cmd = 1;
pub const DWARF_C_WRITE: Dwarf_Cmd = 2;
pub type Enum_Unnamed1 = u32;
pub const DWARF_CB_OK: ::libc::c_int = 0;
pub const DWARF_CB_ABORT: ::libc::c_int = 1;
pub type Enum_Unnamed2 = u32;
pub const DW_TAG_invalid: Enum_Unnamed2 = 0;
pub type Dwarf_Off = GElf_Off;
pub type Dwarf_Addr = GElf_Addr;
pub type Dwarf_Word = GElf_Xword;
pub type Dwarf_Sword = GElf_Sxword;
pub type Dwarf_Half = GElf_Half;
pub enum Dwarf_Abbrev { }
pub enum Dwarf_Lines_s { }
pub type Dwarf_Lines = Dwarf_Lines_s;
pub enum Dwarf_Line_s { }
pub type Dwarf_Line = Dwarf_Line_s;
pub enum Dwarf_Files_s { }
pub type Dwarf_Files = Dwarf_Files_s;
pub enum Dwarf_Arange_s { }
pub type Dwarf_Arange = Dwarf_Arange_s;
pub enum Dwarf_Aranges_s { }
pub type Dwarf_Aranges = Dwarf_Aranges_s;
pub enum Dwarf_CU { }
pub enum Dwarf_Macro_s { }
pub type Dwarf_Macro = Dwarf_Macro_s;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Dwarf_Attribute {
    pub code: ::libc::c_uint,
    pub form: ::libc::c_uint,
    pub valp: *mut ::libc::c_uchar,
    pub cu: *mut Dwarf_CU,
}
impl ::std::default::Default for Dwarf_Attribute {
#[inline]
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Dwarf_Block {
    pub length: Dwarf_Word,
    pub data: *mut ::libc::c_uchar,
}
impl ::std::default::Default for Dwarf_Block {
#[inline]
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Dwarf_Die {
    pub addr: *mut ::libc::c_void,
    pub cu: *mut Dwarf_CU,
    pub abbrev: *mut Dwarf_Abbrev,
    pub padding__: ::libc::c_long,
}
impl ::std::default::Default for Dwarf_Die {
#[inline]
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Dwarf_Global {
    pub cu_offset: Dwarf_Off,
    pub die_offset: Dwarf_Off,
    pub name: *const ::libc::c_char,
}
impl ::std::default::Default for Dwarf_Global {
#[inline]
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Dwarf_Op {
    pub atom: uint8_t,
    pub number: Dwarf_Word,
    pub number2: Dwarf_Word,
    pub offset: Dwarf_Word,
}
impl ::std::default::Default for Dwarf_Op {
#[inline]
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Dwarf_CIE {
    pub CIE_id: Dwarf_Off,
    pub initial_instructions: *const uint8_t,
    pub initial_instructions_end: *const uint8_t,
    pub code_alignment_factor: Dwarf_Word,
    pub data_alignment_factor: Dwarf_Sword,
    pub return_address_register: Dwarf_Word,
    pub augmentation: *const ::libc::c_char,
    pub augmentation_data: *const uint8_t,
    pub augmentation_data_size: size_t,
    pub fde_augmentation_data_size: size_t,
}
impl ::std::default::Default for Dwarf_CIE {
#[inline]
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Dwarf_FDE {
    pub CIE_pointer: Dwarf_Off,
    pub start: *const uint8_t,
    pub end: *const uint8_t,
}
impl ::std::default::Default for Dwarf_FDE {
#[inline]
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Dwarf_CFI_Entry {
    pub _bindgen_data_: [u64; 10usize],
}
impl Dwarf_CFI_Entry {
#[inline]
    pub unsafe fn CIE_id(&mut self) -> *mut Dwarf_Off {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
#[inline]
    pub unsafe fn cie(&mut self) -> *mut Dwarf_CIE {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
#[inline]
    pub unsafe fn fde(&mut self) -> *mut Dwarf_FDE {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Dwarf_CFI_Entry {
#[inline]
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Dwarf_Frame_s { }
pub type Dwarf_Frame = Dwarf_Frame_s;
pub enum Dwarf_CFI_s { }
pub type Dwarf_CFI = Dwarf_CFI_s;
pub enum Dwarf { }
pub type Dwarf_OOM = ::std::option::Option<extern "C" fn()>;
pub enum Dwfl { }
pub enum Dwfl_Module { }
pub enum Dwfl_Line { }
pub enum Dwfl_Thread { }
pub enum Dwfl_Frame { }
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Dwfl_Callbacks {
    pub find_elf: ::std::option::Option<unsafe extern "C" fn(mod_:
                                                                 *mut Dwfl_Module,
                                                             userdata:
                                                                 *mut *mut ::libc::c_void,
                                                             modname:
                                                                 *const ::libc::c_char,
                                                             base: Dwarf_Addr,
                                                             file_name:
                                                                 *mut *mut ::libc::c_char,
                                                             elfp:
                                                                 *mut *mut Elf)
                                            -> ::libc::c_int>,
    pub find_debuginfo: ::std::option::Option<unsafe extern "C" fn(mod_:
                                                                       *mut Dwfl_Module,
                                                                   userdata:
                                                                       *mut *mut ::libc::c_void,
                                                                   modname:
                                                                       *const ::libc::c_char,
                                                                   base:
                                                                       Dwarf_Addr,
                                                                   file_name:
                                                                       *const ::libc::c_char,
                                                                   debuglink_file:
                                                                       *const ::libc::c_char,
                                                                   debuglink_crc:
                                                                       GElf_Word,
                                                                   debuginfo_file_name:
                                                                       *mut *mut ::libc::c_char)
                                                  -> ::libc::c_int>,
    pub section_address: ::std::option::Option<unsafe extern "C" fn(mod_:
                                                                        *mut Dwfl_Module,
                                                                    userdata:
                                                                        *mut *mut ::libc::c_void,
                                                                    modname:
                                                                        *const ::libc::c_char,
                                                                    base:
                                                                        Dwarf_Addr,
                                                                    secname:
                                                                        *const ::libc::c_char,
                                                                    shndx:
                                                                        GElf_Word,
                                                                    shdr:
                                                                        *const GElf_Shdr,
                                                                    addr:
                                                                        *mut Dwarf_Addr)
                                                   -> ::libc::c_int>,
    pub debuginfo_path: *mut *mut ::libc::c_char,
}
impl ::std::default::Default for Dwfl_Callbacks {
#[inline]
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum argp { }
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Dwfl_Thread_Callbacks {
    pub next_thread: ::std::option::Option<unsafe extern "C" fn(dwfl:
                                                                    *mut Dwfl,
                                                                dwfl_arg:
                                                                    *mut ::libc::c_void,
                                                                thread_argp:
                                                                    *mut *mut ::libc::c_void)
                                               -> pid_t>,
    pub get_thread: ::std::option::Option<unsafe extern "C" fn(dwfl:
                                                                   *mut Dwfl,
                                                               tid: pid_t,
                                                               dwfl_arg:
                                                                   *mut ::libc::c_void,
                                                               thread_argp:
                                                                   *mut *mut ::libc::c_void)
                                              -> u8>,
    pub memory_read: ::std::option::Option<unsafe extern "C" fn(dwfl:
                                                                    *mut Dwfl,
                                                                addr:
                                                                    Dwarf_Addr,
                                                                result:
                                                                    *mut Dwarf_Word,
                                                                dwfl_arg:
                                                                    *mut ::libc::c_void)
                                               -> u8>,
    pub set_initial_registers: ::std::option::Option<unsafe extern "C" fn(thread:
                                                                              *mut Dwfl_Thread,
                                                                          thread_arg:
                                                                              *mut ::libc::c_void)
                                                         -> u8>,
    pub detach: ::std::option::Option<unsafe extern "C" fn(dwfl: *mut Dwfl,
                                                           dwfl_arg:
                                                               *mut ::libc::c_void)>,
    pub thread_detach: ::std::option::Option<unsafe extern "C" fn(thread:
                                                                      *mut Dwfl_Thread,
                                                                  thread_arg:
                                                                      *mut ::libc::c_void)>,
}
impl ::std::default::Default for Dwfl_Thread_Callbacks {
#[inline]
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
extern "C" {
    pub fn dwarf_begin(fildes: ::libc::c_int, cmd: Dwarf_Cmd) -> *mut Dwarf;
    pub fn dwarf_begin_elf(elf: *mut Elf, cmd: Dwarf_Cmd,
                           scngrp: *mut Elf_Scn) -> *mut Dwarf;
    pub fn dwarf_getelf(dwarf: *mut Dwarf) -> *mut Elf;
    pub fn dwarf_cu_getdwarf(cu: *mut Dwarf_CU) -> *mut Dwarf;
    pub fn dwarf_getalt(main: *mut Dwarf) -> *mut Dwarf;
    pub fn dwarf_setalt(main: *mut Dwarf, alt: *mut Dwarf);
    pub fn dwarf_end(dwarf: *mut Dwarf) -> ::libc::c_int;
    pub fn dwarf_getscn_info(dwarf: *mut Dwarf) -> *mut Elf_Data;
    pub fn dwarf_nextcu(dwarf: *mut Dwarf, off: Dwarf_Off,
                        next_off: *mut Dwarf_Off, header_sizep: *mut size_t,
                        abbrev_offsetp: *mut Dwarf_Off,
                        address_sizep: *mut uint8_t,
                        offset_sizep: *mut uint8_t) -> ::libc::c_int;
    pub fn dwarf_next_unit(dwarf: *mut Dwarf, off: Dwarf_Off,
                           next_off: *mut Dwarf_Off,
                           header_sizep: *mut size_t,
                           versionp: *mut Dwarf_Half,
                           abbrev_offsetp: *mut Dwarf_Off,
                           address_sizep: *mut uint8_t,
                           offset_sizep: *mut uint8_t,
                           type_signaturep: *mut uint64_t,
                           type_offsetp: *mut Dwarf_Off) -> ::libc::c_int;
    pub fn dwarf_next_cfi(e_ident: *mut ::libc::c_uchar, data: *mut Elf_Data,
                          eh_frame_p: u8, offset: Dwarf_Off,
                          next_offset: *mut Dwarf_Off,
                          entry: *mut Dwarf_CFI_Entry) -> ::libc::c_int;
    pub fn dwarf_getcfi(dwarf: *mut Dwarf) -> *mut Dwarf_CFI;
    pub fn dwarf_getcfi_elf(elf: *mut Elf) -> *mut Dwarf_CFI;
    pub fn dwarf_cfi_end(cache: *mut Dwarf_CFI) -> ::libc::c_int;
    pub fn dwarf_offdie(dbg: *mut Dwarf, offset: Dwarf_Off,
                        result: *mut Dwarf_Die) -> *mut Dwarf_Die;
    pub fn dwarf_offdie_types(dbg: *mut Dwarf, offset: Dwarf_Off,
                              result: *mut Dwarf_Die) -> *mut Dwarf_Die;
    pub fn dwarf_dieoffset(die: *mut Dwarf_Die) -> Dwarf_Off;
    pub fn dwarf_cuoffset(die: *mut Dwarf_Die) -> Dwarf_Off;
    pub fn dwarf_diecu(die: *mut Dwarf_Die, result: *mut Dwarf_Die,
                       address_sizep: *mut uint8_t,
                       offset_sizep: *mut uint8_t) -> *mut Dwarf_Die;
    pub fn dwarf_cu_die(cu: *mut Dwarf_CU, result: *mut Dwarf_Die,
                        versionp: *mut Dwarf_Half,
                        abbrev_offsetp: *mut Dwarf_Off,
                        address_sizep: *mut uint8_t,
                        offset_sizep: *mut uint8_t,
                        type_signaturep: *mut uint64_t,
                        type_offsetp: *mut Dwarf_Off) -> *mut Dwarf_Die;
    pub fn dwarf_addrdie(dbg: *mut Dwarf, addr: Dwarf_Addr,
                         result: *mut Dwarf_Die) -> *mut Dwarf_Die;
    pub fn dwarf_child(die: *mut Dwarf_Die, result: *mut Dwarf_Die)
     -> ::libc::c_int;
    pub fn dwarf_siblingof(die: *mut Dwarf_Die, result: *mut Dwarf_Die)
     -> ::libc::c_int;
    pub fn dwarf_peel_type(die: *mut Dwarf_Die, result: *mut Dwarf_Die)
     -> ::libc::c_int;
    pub fn dwarf_haschildren(die: *mut Dwarf_Die) -> ::libc::c_int;
    pub fn dwarf_getattrs(die: *mut Dwarf_Die,
                          callback:
                              ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut Dwarf_Attribute,
                                                                         arg2:
                                                                             *mut ::libc::c_void)
                                                        -> ::libc::c_int>,
                          arg: *mut ::libc::c_void, offset: ptrdiff_t)
     -> ptrdiff_t;
    pub fn dwarf_tag(die: *mut Dwarf_Die) -> ::libc::c_int;
    pub fn dwarf_attr(die: *mut Dwarf_Die, search_name: ::libc::c_uint,
                      result: *mut Dwarf_Attribute) -> *mut Dwarf_Attribute;
    pub fn dwarf_hasattr(die: *mut Dwarf_Die, search_name: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn dwarf_attr_integrate(die: *mut Dwarf_Die,
                                search_name: ::libc::c_uint,
                                result: *mut Dwarf_Attribute)
     -> *mut Dwarf_Attribute;
    pub fn dwarf_hasattr_integrate(die: *mut Dwarf_Die,
                                   search_name: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn dwarf_hasform(attr: *mut Dwarf_Attribute,
                         search_form: ::libc::c_uint) -> ::libc::c_int;
    pub fn dwarf_whatattr(attr: *mut Dwarf_Attribute) -> ::libc::c_uint;
    pub fn dwarf_whatform(attr: *mut Dwarf_Attribute) -> ::libc::c_uint;
    pub fn dwarf_formstring(attrp: *mut Dwarf_Attribute)
     -> *const ::libc::c_char;
    pub fn dwarf_formudata(attr: *mut Dwarf_Attribute,
                           return_uval: *mut Dwarf_Word) -> ::libc::c_int;
    pub fn dwarf_formsdata(attr: *mut Dwarf_Attribute,
                           return_uval: *mut Dwarf_Sword) -> ::libc::c_int;
    pub fn dwarf_formaddr(attr: *mut Dwarf_Attribute,
                          return_addr: *mut Dwarf_Addr) -> ::libc::c_int;
    pub fn dwarf_formref(attr: *mut Dwarf_Attribute,
                         return_offset: *mut Dwarf_Off) -> ::libc::c_int;
    pub fn dwarf_formref_die(attr: *mut Dwarf_Attribute,
                             die_mem: *mut Dwarf_Die) -> *mut Dwarf_Die;
    pub fn dwarf_formblock(attr: *mut Dwarf_Attribute,
                           return_block: *mut Dwarf_Block) -> ::libc::c_int;
    pub fn dwarf_formflag(attr: *mut Dwarf_Attribute, return_bool: *mut u8)
     -> ::libc::c_int;
    pub fn dwarf_diename(die: *mut Dwarf_Die) -> *const ::libc::c_char;
    pub fn dwarf_highpc(die: *mut Dwarf_Die, return_addr: *mut Dwarf_Addr)
     -> ::libc::c_int;
    pub fn dwarf_lowpc(die: *mut Dwarf_Die, return_addr: *mut Dwarf_Addr)
     -> ::libc::c_int;
    pub fn dwarf_entrypc(die: *mut Dwarf_Die, return_addr: *mut Dwarf_Addr)
     -> ::libc::c_int;
    pub fn dwarf_haspc(die: *mut Dwarf_Die, pc: Dwarf_Addr) -> ::libc::c_int;
    pub fn dwarf_ranges(die: *mut Dwarf_Die, offset: ptrdiff_t,
                        basep: *mut Dwarf_Addr, startp: *mut Dwarf_Addr,
                        endp: *mut Dwarf_Addr) -> ptrdiff_t;
    pub fn dwarf_bytesize(die: *mut Dwarf_Die) -> ::libc::c_int;
    pub fn dwarf_bitsize(die: *mut Dwarf_Die) -> ::libc::c_int;
    pub fn dwarf_bitoffset(die: *mut Dwarf_Die) -> ::libc::c_int;
    pub fn dwarf_arrayorder(die: *mut Dwarf_Die) -> ::libc::c_int;
    pub fn dwarf_srclang(die: *mut Dwarf_Die) -> ::libc::c_int;
    pub fn dwarf_getabbrev(die: *mut Dwarf_Die, offset: Dwarf_Off,
                           lengthp: *mut size_t) -> *mut Dwarf_Abbrev;
    pub fn dwarf_offabbrev(dbg: *mut Dwarf, offset: Dwarf_Off,
                           lengthp: *mut size_t, abbrevp: *mut Dwarf_Abbrev)
     -> ::libc::c_int;
    pub fn dwarf_getabbrevcode(abbrev: *mut Dwarf_Abbrev) -> ::libc::c_uint;
    pub fn dwarf_getabbrevtag(abbrev: *mut Dwarf_Abbrev) -> ::libc::c_uint;
    pub fn dwarf_abbrevhaschildren(abbrev: *mut Dwarf_Abbrev)
     -> ::libc::c_int;
    pub fn dwarf_getattrcnt(abbrev: *mut Dwarf_Abbrev, attrcntp: *mut size_t)
     -> ::libc::c_int;
    pub fn dwarf_getabbrevattr(abbrev: *mut Dwarf_Abbrev, idx: size_t,
                               namep: *mut ::libc::c_uint,
                               formp: *mut ::libc::c_uint,
                               offset: *mut Dwarf_Off) -> ::libc::c_int;
    pub fn dwarf_getstring(dbg: *mut Dwarf, offset: Dwarf_Off,
                           lenp: *mut size_t) -> *const ::libc::c_char;
    pub fn dwarf_getpubnames(dbg: *mut Dwarf,
                             callback:
                                 ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                *mut Dwarf,
                                                                            arg2:
                                                                                *mut Dwarf_Global,
                                                                            arg3:
                                                                                *mut ::libc::c_void)
                                                           -> ::libc::c_int>,
                             arg: *mut ::libc::c_void, offset: ptrdiff_t)
     -> ptrdiff_t;
    pub fn dwarf_getsrclines(cudie: *mut Dwarf_Die,
                             lines: *mut *mut Dwarf_Lines,
                             nlines: *mut size_t) -> ::libc::c_int;
    pub fn dwarf_onesrcline(lines: *mut Dwarf_Lines, idx: size_t)
     -> *mut Dwarf_Line;
    pub fn dwarf_getsrcfiles(cudie: *mut Dwarf_Die,
                             files: *mut *mut Dwarf_Files,
                             nfiles: *mut size_t) -> ::libc::c_int;
    pub fn dwarf_getsrc_die(cudie: *mut Dwarf_Die, addr: Dwarf_Addr)
     -> *mut Dwarf_Line;
    pub fn dwarf_getsrc_file(dbg: *mut Dwarf, fname: *const ::libc::c_char,
                             line: ::libc::c_int, col: ::libc::c_int,
                             srcsp: *mut *mut *mut Dwarf_Line,
                             nsrcs: *mut size_t) -> ::libc::c_int;
    pub fn dwarf_lineaddr(line: *mut Dwarf_Line, addrp: *mut Dwarf_Addr)
     -> ::libc::c_int;
    pub fn dwarf_lineop_index(line: *mut Dwarf_Line,
                              op_indexp: *mut ::libc::c_uint)
     -> ::libc::c_int;
    pub fn dwarf_lineno(line: *mut Dwarf_Line, linep: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn dwarf_linecol(line: *mut Dwarf_Line, colp: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn dwarf_linebeginstatement(line: *mut Dwarf_Line, flagp: *mut u8)
     -> ::libc::c_int;
    pub fn dwarf_lineendsequence(line: *mut Dwarf_Line, flagp: *mut u8)
     -> ::libc::c_int;
    pub fn dwarf_lineblock(line: *mut Dwarf_Line, flagp: *mut u8)
     -> ::libc::c_int;
    pub fn dwarf_lineprologueend(line: *mut Dwarf_Line, flagp: *mut u8)
     -> ::libc::c_int;
    pub fn dwarf_lineepiloguebegin(line: *mut Dwarf_Line, flagp: *mut u8)
     -> ::libc::c_int;
    pub fn dwarf_lineisa(line: *mut Dwarf_Line, isap: *mut ::libc::c_uint)
     -> ::libc::c_int;
    pub fn dwarf_linediscriminator(line: *mut Dwarf_Line,
                                   discp: *mut ::libc::c_uint)
     -> ::libc::c_int;
    pub fn dwarf_linesrc(line: *mut Dwarf_Line, mtime: *mut Dwarf_Word,
                         length: *mut Dwarf_Word) -> *const ::libc::c_char;
    pub fn dwarf_filesrc(file: *mut Dwarf_Files, idx: size_t,
                         mtime: *mut Dwarf_Word, length: *mut Dwarf_Word)
     -> *const ::libc::c_char;
    pub fn dwarf_getsrcdirs(files: *mut Dwarf_Files,
                            result: *mut *const *const ::libc::c_char,
                            ndirs: *mut size_t) -> ::libc::c_int;
    pub fn dwarf_getlocation(attr: *mut Dwarf_Attribute,
                             expr: *mut *mut Dwarf_Op, exprlen: *mut size_t)
     -> ::libc::c_int;
    pub fn dwarf_getlocation_addr(attr: *mut Dwarf_Attribute,
                                  address: Dwarf_Addr,
                                  exprs: *mut *mut Dwarf_Op,
                                  exprlens: *mut size_t, nlocs: size_t)
     -> ::libc::c_int;
    pub fn dwarf_getlocations(attr: *mut Dwarf_Attribute, offset: ptrdiff_t,
                              basep: *mut Dwarf_Addr, startp: *mut Dwarf_Addr,
                              endp: *mut Dwarf_Addr, expr: *mut *mut Dwarf_Op,
                              exprlen: *mut size_t) -> ptrdiff_t;
    pub fn dwarf_getlocation_implicit_value(attr: *mut Dwarf_Attribute,
                                            op: *const Dwarf_Op,
                                            return_block: *mut Dwarf_Block)
     -> ::libc::c_int;
    pub fn dwarf_getlocation_implicit_pointer(attr: *mut Dwarf_Attribute,
                                              op: *const Dwarf_Op,
                                              result: *mut Dwarf_Attribute)
     -> ::libc::c_int;
    pub fn dwarf_getlocation_die(attr: *mut Dwarf_Attribute,
                                 op: *const Dwarf_Op, result: *mut Dwarf_Die)
     -> ::libc::c_int;
    pub fn dwarf_getlocation_attr(attr: *mut Dwarf_Attribute,
                                  op: *const Dwarf_Op,
                                  result: *mut Dwarf_Attribute)
     -> ::libc::c_int;
    pub fn dwarf_aggregate_size(die: *mut Dwarf_Die, size: *mut Dwarf_Word)
     -> ::libc::c_int;
    pub fn dwarf_getscopes(cudie: *mut Dwarf_Die, pc: Dwarf_Addr,
                           scopes: *mut *mut Dwarf_Die) -> ::libc::c_int;
    pub fn dwarf_getscopes_die(die: *mut Dwarf_Die,
                               scopes: *mut *mut Dwarf_Die) -> ::libc::c_int;
    pub fn dwarf_getscopevar(scopes: *mut Dwarf_Die, nscopes: ::libc::c_int,
                             name: *const ::libc::c_char,
                             skip_shadows: ::libc::c_int,
                             match_file: *const ::libc::c_char,
                             match_lineno: ::libc::c_int,
                             match_linecol: ::libc::c_int,
                             result: *mut Dwarf_Die) -> ::libc::c_int;
    pub fn dwarf_getaranges(dbg: *mut Dwarf, aranges: *mut *mut Dwarf_Aranges,
                            naranges: *mut size_t) -> ::libc::c_int;
    pub fn dwarf_onearange(aranges: *mut Dwarf_Aranges, idx: size_t)
     -> *mut Dwarf_Arange;
    pub fn dwarf_getarangeinfo(arange: *mut Dwarf_Arange,
                               addrp: *mut Dwarf_Addr,
                               lengthp: *mut Dwarf_Word,
                               offsetp: *mut Dwarf_Off) -> ::libc::c_int;
    pub fn dwarf_getarange_addr(aranges: *mut Dwarf_Aranges, addr: Dwarf_Addr)
     -> *mut Dwarf_Arange;
    pub fn dwarf_getfuncs(cudie: *mut Dwarf_Die,
                          callback:
                              ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut Dwarf_Die,
                                                                         arg2:
                                                                             *mut ::libc::c_void)
                                                        -> ::libc::c_int>,
                          arg: *mut ::libc::c_void, offset: ptrdiff_t)
     -> ptrdiff_t;
    pub fn dwarf_decl_file(decl: *mut Dwarf_Die) -> *const ::libc::c_char;
    pub fn dwarf_decl_line(decl: *mut Dwarf_Die, linep: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn dwarf_decl_column(decl: *mut Dwarf_Die, colp: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn dwarf_func_inline(func: *mut Dwarf_Die) -> ::libc::c_int;
    pub fn dwarf_func_inline_instances(func: *mut Dwarf_Die,
                                       callback:
                                           ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                          *mut Dwarf_Die,
                                                                                      arg2:
                                                                                          *mut ::libc::c_void)
                                                                     ->
                                                                         ::libc::c_int>,
                                       arg: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn dwarf_entry_breakpoints(die: *mut Dwarf_Die,
                                   bkpts: *mut *mut Dwarf_Addr)
     -> ::libc::c_int;
    pub fn dwarf_getmacros(cudie: *mut Dwarf_Die,
                           callback:
                               ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut Dwarf_Macro,
                                                                          arg2:
                                                                              *mut ::libc::c_void)
                                                         -> ::libc::c_int>,
                           arg: *mut ::libc::c_void, token: ptrdiff_t)
     -> ptrdiff_t;
    pub fn dwarf_getmacros_off(dbg: *mut Dwarf, macoff: Dwarf_Off,
                               callback:
                                   ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut Dwarf_Macro,
                                                                              arg2:
                                                                                  *mut ::libc::c_void)
                                                             ->
                                                                 ::libc::c_int>,
                               arg: *mut ::libc::c_void, token: ptrdiff_t)
     -> ptrdiff_t;
    pub fn dwarf_macro_getsrcfiles(dbg: *mut Dwarf, macro_: *mut Dwarf_Macro,
                                   files: *mut *mut Dwarf_Files,
                                   nfiles: *mut size_t) -> ::libc::c_int;
    pub fn dwarf_macro_opcode(macro_: *mut Dwarf_Macro,
                              opcodep: *mut ::libc::c_uint) -> ::libc::c_int;
    pub fn dwarf_macro_getparamcnt(macro_: *mut Dwarf_Macro,
                                   paramcntp: *mut size_t) -> ::libc::c_int;
    pub fn dwarf_macro_param(macro_: *mut Dwarf_Macro, idx: size_t,
                             attribute: *mut Dwarf_Attribute)
     -> ::libc::c_int;
    pub fn dwarf_macro_param1(macro_: *mut Dwarf_Macro,
                              paramp: *mut Dwarf_Word) -> ::libc::c_int;
    pub fn dwarf_macro_param2(macro_: *mut Dwarf_Macro,
                              paramp: *mut Dwarf_Word,
                              strp: *mut *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn dwarf_cfi_addrframe(cache: *mut Dwarf_CFI, address: Dwarf_Addr,
                               frame: *mut *mut Dwarf_Frame) -> ::libc::c_int;
    pub fn dwarf_frame_info(frame: *mut Dwarf_Frame, start: *mut Dwarf_Addr,
                            end: *mut Dwarf_Addr, signalp: *mut u8)
     -> ::libc::c_int;
    pub fn dwarf_frame_cfa(frame: *mut Dwarf_Frame, ops: *mut *mut Dwarf_Op,
                           nops: *mut size_t) -> ::libc::c_int;
    pub fn dwarf_frame_register(frame: *mut Dwarf_Frame, regno: ::libc::c_int,
                                ops_mem: *mut Dwarf_Op,
                                ops: *mut *mut Dwarf_Op, nops: *mut size_t)
     -> ::libc::c_int;
    pub fn dwarf_errno() -> ::libc::c_int;
    pub fn dwarf_errmsg(err: ::libc::c_int) -> *const ::libc::c_char;
    pub fn dwarf_new_oom_handler(dbg: *mut Dwarf, handler: Dwarf_OOM)
     -> Dwarf_OOM;
    pub fn dwfl_begin(callbacks: *const Dwfl_Callbacks) -> *mut Dwfl;
    pub fn dwfl_end(arg1: *mut Dwfl);
    pub fn dwfl_version(arg1: *mut Dwfl) -> *const ::libc::c_char;
    pub fn dwfl_errno() -> ::libc::c_int;
    pub fn dwfl_errmsg(err: ::libc::c_int) -> *const ::libc::c_char;
    pub fn dwfl_report_begin(dwfl: *mut Dwfl);
    pub fn dwfl_report_segment(dwfl: *mut Dwfl, ndx: ::libc::c_int,
                               phdr: *const GElf_Phdr, bias: GElf_Addr,
                               ident: *const ::libc::c_void) -> ::libc::c_int;
    pub fn dwfl_report_module(dwfl: *mut Dwfl, name: *const ::libc::c_char,
                              start: Dwarf_Addr, end: Dwarf_Addr)
     -> *mut Dwfl_Module;
    pub fn dwfl_report_elf(dwfl: *mut Dwfl, name: *const ::libc::c_char,
                           file_name: *const ::libc::c_char,
                           fd: ::libc::c_int, base: GElf_Addr,
                           add_p_vaddr: u8) -> *mut Dwfl_Module;
    pub fn dwfl_report_offline(dwfl: *mut Dwfl, name: *const ::libc::c_char,
                               file_name: *const ::libc::c_char,
                               fd: ::libc::c_int) -> *mut Dwfl_Module;
    pub fn dwfl_report_end(dwfl: *mut Dwfl,
                           removed:
                               ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut Dwfl_Module,
                                                                          arg2:
                                                                              *mut ::libc::c_void,
                                                                          arg3:
                                                                              *const ::libc::c_char,
                                                                          arg4:
                                                                              Dwarf_Addr,
                                                                          arg:
                                                                              *mut ::libc::c_void)
                                                         -> ::libc::c_int>,
                           arg: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn dwfl_report_begin_add(dwfl: *mut Dwfl);
    pub fn dwfl_module_info(mod_: *mut Dwfl_Module,
                            userdata: *mut *mut *mut ::libc::c_void,
                            start: *mut Dwarf_Addr, end: *mut Dwarf_Addr,
                            dwbias: *mut Dwarf_Addr, symbias: *mut Dwarf_Addr,
                            mainfile: *mut *const ::libc::c_char,
                            debugfile: *mut *const ::libc::c_char)
     -> *const ::libc::c_char;
    pub fn dwfl_getmodules(dwfl: *mut Dwfl,
                           callback:
                               ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut Dwfl_Module,
                                                                          arg2:
                                                                              *mut *mut ::libc::c_void,
                                                                          arg3:
                                                                              *const ::libc::c_char,
                                                                          arg4:
                                                                              Dwarf_Addr,
                                                                          arg:
                                                                              *mut ::libc::c_void)
                                                         -> ::libc::c_int>,
                           arg: *mut ::libc::c_void, offset: ptrdiff_t)
     -> ptrdiff_t;
    pub fn dwfl_addrmodule(dwfl: *mut Dwfl, address: Dwarf_Addr)
     -> *mut Dwfl_Module;
    pub fn dwfl_addrsegment(dwfl: *mut Dwfl, address: Dwarf_Addr,
                            mod_: *mut *mut Dwfl_Module) -> ::libc::c_int;
    pub fn dwfl_module_report_build_id(mod_: *mut Dwfl_Module,
                                       bits: *const ::libc::c_uchar,
                                       len: size_t, vaddr: GElf_Addr)
     -> ::libc::c_int;
    pub fn dwfl_module_build_id(mod_: *mut Dwfl_Module,
                                bits: *mut *const ::libc::c_uchar,
                                vaddr: *mut GElf_Addr) -> ::libc::c_int;
    pub fn dwfl_build_id_find_elf(arg1: *mut Dwfl_Module,
                                  arg2: *mut *mut ::libc::c_void,
                                  arg3: *const ::libc::c_char,
                                  arg4: Dwarf_Addr,
                                  arg5: *mut *mut ::libc::c_char,
                                  arg6: *mut *mut Elf) -> ::libc::c_int;
    pub fn dwfl_build_id_find_debuginfo(arg1: *mut Dwfl_Module,
                                        arg2: *mut *mut ::libc::c_void,
                                        arg3: *const ::libc::c_char,
                                        arg4: Dwarf_Addr,
                                        arg5: *const ::libc::c_char,
                                        arg6: *const ::libc::c_char,
                                        arg7: GElf_Word,
                                        arg8: *mut *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn dwfl_standard_find_debuginfo(arg1: *mut Dwfl_Module,
                                        arg2: *mut *mut ::libc::c_void,
                                        arg3: *const ::libc::c_char,
                                        arg4: Dwarf_Addr,
                                        arg5: *const ::libc::c_char,
                                        arg6: *const ::libc::c_char,
                                        arg7: GElf_Word,
                                        arg8: *mut *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn dwfl_offline_section_address(arg1: *mut Dwfl_Module,
                                        arg2: *mut *mut ::libc::c_void,
                                        arg3: *const ::libc::c_char,
                                        arg4: Dwarf_Addr,
                                        arg5: *const ::libc::c_char,
                                        arg6: GElf_Word,
                                        arg7: *const GElf_Shdr,
                                        addr: *mut Dwarf_Addr)
     -> ::libc::c_int;
    pub fn dwfl_linux_kernel_find_elf(arg1: *mut Dwfl_Module,
                                      arg2: *mut *mut ::libc::c_void,
                                      arg3: *const ::libc::c_char,
                                      arg4: Dwarf_Addr,
                                      arg5: *mut *mut ::libc::c_char,
                                      arg6: *mut *mut Elf) -> ::libc::c_int;
    pub fn dwfl_linux_kernel_module_section_address(arg1: *mut Dwfl_Module,
                                                    arg2:
                                                        *mut *mut ::libc::c_void,
                                                    arg3:
                                                        *const ::libc::c_char,
                                                    arg4: Dwarf_Addr,
                                                    arg5:
                                                        *const ::libc::c_char,
                                                    arg6: GElf_Word,
                                                    arg7: *const GElf_Shdr,
                                                    addr: *mut Dwarf_Addr)
     -> ::libc::c_int;
    pub fn dwfl_linux_kernel_report_kernel(dwfl: *mut Dwfl) -> ::libc::c_int;
    pub fn dwfl_linux_kernel_report_modules(dwfl: *mut Dwfl) -> ::libc::c_int;
    pub fn dwfl_linux_kernel_report_offline(dwfl: *mut Dwfl,
                                            release: *const ::libc::c_char,
                                            predicate:
                                                ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                               *const ::libc::c_char,
                                                                                           arg2:
                                                                                               *const ::libc::c_char)
                                                                          ->
                                                                              ::libc::c_int>)
     -> ::libc::c_int;
    pub fn dwfl_core_file_report(dwfl: *mut Dwfl, elf: *mut Elf,
                                 executable: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn dwfl_linux_proc_report(dwfl: *mut Dwfl, pid: pid_t)
     -> ::libc::c_int;
    pub fn dwfl_linux_proc_maps_report(dwfl: *mut Dwfl, arg1: *mut FILE)
     -> ::libc::c_int;
    pub fn dwfl_linux_proc_find_elf(mod_: *mut Dwfl_Module,
                                    userdata: *mut *mut ::libc::c_void,
                                    module_name: *const ::libc::c_char,
                                    base: Dwarf_Addr,
                                    file_name: *mut *mut ::libc::c_char,
                                    arg1: *mut *mut Elf) -> ::libc::c_int;
    pub fn dwfl_standard_argp() -> *const argp;
    pub fn dwfl_module_relocations(mod_: *mut Dwfl_Module) -> ::libc::c_int;
    pub fn dwfl_module_relocate_address(mod_: *mut Dwfl_Module,
                                        address: *mut Dwarf_Addr)
     -> ::libc::c_int;
    pub fn dwfl_module_relocation_info(mod_: *mut Dwfl_Module,
                                       idx: ::libc::c_uint,
                                       shndxp: *mut GElf_Word)
     -> *const ::libc::c_char;
    pub fn dwfl_validate_address(dwfl: *mut Dwfl, address: Dwarf_Addr,
                                 offset: Dwarf_Sword) -> ::libc::c_int;
    pub fn dwfl_module_getelf(arg1: *mut Dwfl_Module, bias: *mut GElf_Addr)
     -> *mut Elf;
    pub fn dwfl_module_getsymtab(mod_: *mut Dwfl_Module) -> ::libc::c_int;
    pub fn dwfl_module_getsymtab_first_global(mod_: *mut Dwfl_Module)
     -> ::libc::c_int;
    pub fn dwfl_module_getsym(mod_: *mut Dwfl_Module, ndx: ::libc::c_int,
                              sym: *mut GElf_Sym, shndxp: *mut GElf_Word)
     -> *const ::libc::c_char;
    pub fn dwfl_module_getsym_info(mod_: *mut Dwfl_Module, ndx: ::libc::c_int,
                                   sym: *mut GElf_Sym, addr: *mut GElf_Addr,
                                   shndxp: *mut GElf_Word,
                                   elfp: *mut *mut Elf, bias: *mut Dwarf_Addr)
     -> *const ::libc::c_char;
    pub fn dwfl_module_addrname(mod_: *mut Dwfl_Module, address: GElf_Addr)
     -> *const ::libc::c_char;
    pub fn dwfl_module_addrinfo(mod_: *mut Dwfl_Module, address: GElf_Addr,
                                offset: *mut GElf_Off, sym: *mut GElf_Sym,
                                shndxp: *mut GElf_Word, elfp: *mut *mut Elf,
                                bias: *mut Dwarf_Addr)
     -> *const ::libc::c_char;
    pub fn dwfl_module_addrsym(mod_: *mut Dwfl_Module, address: GElf_Addr,
                               sym: *mut GElf_Sym, shndxp: *mut GElf_Word)
     -> *const ::libc::c_char;
    pub fn dwfl_module_address_section(mod_: *mut Dwfl_Module,
                                       address: *mut Dwarf_Addr,
                                       bias: *mut Dwarf_Addr) -> *mut Elf_Scn;
    pub fn dwfl_module_getdwarf(arg1: *mut Dwfl_Module, bias: *mut Dwarf_Addr)
     -> *mut Dwarf;
    pub fn dwfl_getdwarf(arg1: *mut Dwfl,
                         callback:
                             ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut Dwfl_Module,
                                                                        arg2:
                                                                            *mut *mut ::libc::c_void,
                                                                        arg3:
                                                                            *const ::libc::c_char,
                                                                        arg4:
                                                                            Dwarf_Addr,
                                                                        arg5:
                                                                            *mut Dwarf,
                                                                        arg6:
                                                                            Dwarf_Addr,
                                                                        arg7:
                                                                            *mut ::libc::c_void)
                                                       -> ::libc::c_int>,
                         arg: *mut ::libc::c_void, offset: ptrdiff_t)
     -> ptrdiff_t;
    pub fn dwfl_addrdwarf(dwfl: *mut Dwfl, addr: Dwarf_Addr,
                          bias: *mut Dwarf_Addr) -> *mut Dwarf;
    pub fn dwfl_addrdie(dwfl: *mut Dwfl, addr: Dwarf_Addr,
                        bias: *mut Dwarf_Addr) -> *mut Dwarf_Die;
    pub fn dwfl_module_addrdie(mod_: *mut Dwfl_Module, addr: Dwarf_Addr,
                               bias: *mut Dwarf_Addr) -> *mut Dwarf_Die;
    pub fn dwfl_nextcu(dwfl: *mut Dwfl, lastcu: *mut Dwarf_Die,
                       bias: *mut Dwarf_Addr) -> *mut Dwarf_Die;
    pub fn dwfl_module_nextcu(mod_: *mut Dwfl_Module, lastcu: *mut Dwarf_Die,
                              bias: *mut Dwarf_Addr) -> *mut Dwarf_Die;
    pub fn dwfl_cumodule(cudie: *mut Dwarf_Die) -> *mut Dwfl_Module;
    pub fn dwfl_getsrclines(cudie: *mut Dwarf_Die, nlines: *mut size_t)
     -> ::libc::c_int;
    pub fn dwfl_onesrcline(cudie: *mut Dwarf_Die, idx: size_t)
     -> *mut Dwfl_Line;
    pub fn dwfl_module_getsrc(mod_: *mut Dwfl_Module, addr: Dwarf_Addr)
     -> *mut Dwfl_Line;
    pub fn dwfl_getsrc(dwfl: *mut Dwfl, addr: Dwarf_Addr) -> *mut Dwfl_Line;
    pub fn dwfl_module_getsrc_file(mod_: *mut Dwfl_Module,
                                   fname: *const ::libc::c_char,
                                   lineno: ::libc::c_int,
                                   column: ::libc::c_int,
                                   srcsp: *mut *mut *mut Dwfl_Line,
                                   nsrcs: *mut size_t) -> ::libc::c_int;
    pub fn dwfl_linemodule(line: *mut Dwfl_Line) -> *mut Dwfl_Module;
    pub fn dwfl_linecu(line: *mut Dwfl_Line) -> *mut Dwarf_Die;
    pub fn dwfl_lineinfo(line: *mut Dwfl_Line, addr: *mut Dwarf_Addr,
                         linep: *mut ::libc::c_int, colp: *mut ::libc::c_int,
                         mtime: *mut Dwarf_Word, length: *mut Dwarf_Word)
     -> *const ::libc::c_char;
    pub fn dwfl_dwarf_line(line: *mut Dwfl_Line, bias: *mut Dwarf_Addr)
     -> *mut Dwarf_Line;
    pub fn dwfl_line_comp_dir(line: *mut Dwfl_Line) -> *const ::libc::c_char;
    pub fn dwfl_module_return_value_location(mod_: *mut Dwfl_Module,
                                             functypedie: *mut Dwarf_Die,
                                             locops: *mut *const Dwarf_Op)
     -> ::libc::c_int;
    pub fn dwfl_module_register_names(mod_: *mut Dwfl_Module,
                                      callback:
                                          ::std::option::Option<unsafe extern "C" fn(arg:
                                                                                         *mut ::libc::c_void,
                                                                                     regno:
                                                                                         ::libc::c_int,
                                                                                     setname:
                                                                                         *const ::libc::c_char,
                                                                                     prefix:
                                                                                         *const ::libc::c_char,
                                                                                     regname:
                                                                                         *const ::libc::c_char,
                                                                                     bits:
                                                                                         ::libc::c_int,
                                                                                     type_:
                                                                                         ::libc::c_int)
                                                                    ->
                                                                        ::libc::c_int>,
                                      arg: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn dwfl_module_dwarf_cfi(mod_: *mut Dwfl_Module,
                                 bias: *mut Dwarf_Addr) -> *mut Dwarf_CFI;
    pub fn dwfl_module_eh_cfi(mod_: *mut Dwfl_Module, bias: *mut Dwarf_Addr)
     -> *mut Dwarf_CFI;
    pub fn dwfl_attach_state(dwfl: *mut Dwfl, elf: *mut Elf, pid: pid_t,
                             thread_callbacks: *const Dwfl_Thread_Callbacks,
                             dwfl_arg: *mut ::libc::c_void) -> u8;
    pub fn dwfl_core_file_attach(dwfl: *mut Dwfl, elf: *mut Elf)
     -> ::libc::c_int;
    pub fn dwfl_linux_proc_attach(dwfl: *mut Dwfl, pid: pid_t,
                                  assume_ptrace_stopped: u8) -> ::libc::c_int;
    pub fn dwfl_pid(dwfl: *mut Dwfl) -> pid_t;
    pub fn dwfl_thread_dwfl(thread: *mut Dwfl_Thread) -> *mut Dwfl;
    pub fn dwfl_thread_tid(thread: *mut Dwfl_Thread) -> pid_t;
    pub fn dwfl_frame_thread(state: *mut Dwfl_Frame) -> *mut Dwfl_Thread;
    pub fn dwfl_thread_state_registers(thread: *mut Dwfl_Thread,
                                       firstreg: ::libc::c_int,
                                       nregs: ::libc::c_uint,
                                       regs: *const Dwarf_Word) -> u8;
    pub fn dwfl_thread_state_register_pc(thread: *mut Dwfl_Thread,
                                         pc: Dwarf_Word);
    pub fn dwfl_getthreads(dwfl: *mut Dwfl,
                           callback:
                               ::std::option::Option<unsafe extern "C" fn(thread:
                                                                              *mut Dwfl_Thread,
                                                                          arg:
                                                                              *mut ::libc::c_void)
                                                         -> ::libc::c_int>,
                           arg: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn dwfl_thread_getframes(thread: *mut Dwfl_Thread,
                                 callback:
                                     ::std::option::Option<unsafe extern "C" fn(state:
                                                                                    *mut Dwfl_Frame,
                                                                                arg:
                                                                                    *mut ::libc::c_void)
                                                               ->
                                                                   ::libc::c_int>,
                                 arg: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn dwfl_getthread_frames(dwfl: *mut Dwfl, tid: pid_t,
                                 callback:
                                     ::std::option::Option<unsafe extern "C" fn(thread:
                                                                                    *mut Dwfl_Frame,
                                                                                arg:
                                                                                    *mut ::libc::c_void)
                                                               ->
                                                                   ::libc::c_int>,
                                 arg: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn dwfl_frame_pc(state: *mut Dwfl_Frame, pc: *mut Dwarf_Addr,
                         isactivation: *mut u8) -> u8;
}
include!{"imports.rs"}
