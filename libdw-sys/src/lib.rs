/* automatically generated by rust-bindgen */

#![allow(improper_ctypes)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]

pub const DWARF_GETMACROS_START: ::std::os::raw::c_longlong =
    -9223372036854775808;
pub const DW_ADDR_none: ::std::os::raw::c_uint = 0;
pub type __pid_t = ::std::os::raw::c_int;
pub type __ssize_t = ::std::os::raw::c_long;
pub type pid_t = __pid_t;
pub type Elf64_Half = u16;
pub type Elf64_Word = u32;
pub type Elf64_Xword = u64;
pub type Elf64_Sxword = i64;
pub type Elf64_Addr = u64;
pub type Elf64_Off = u64;
pub type Elf64_Section = u16;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Elf64_Shdr {
    pub sh_name: Elf64_Word,
    pub sh_type: Elf64_Word,
    pub sh_flags: Elf64_Xword,
    pub sh_addr: Elf64_Addr,
    pub sh_offset: Elf64_Off,
    pub sh_size: Elf64_Xword,
    pub sh_link: Elf64_Word,
    pub sh_info: Elf64_Word,
    pub sh_addralign: Elf64_Xword,
    pub sh_entsize: Elf64_Xword,
}
#[test]
fn bindgen_test_layout_Elf64_Shdr() {
    assert_eq!(::std::mem::size_of::<Elf64_Shdr>() , 64usize , concat ! (
               "Size of: " , stringify ! ( Elf64_Shdr ) ));
    assert_eq! (::std::mem::align_of::<Elf64_Shdr>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( Elf64_Shdr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Shdr ) ) . sh_name as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Shdr ) , "::" ,
                stringify ! ( sh_name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Shdr ) ) . sh_type as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Shdr ) , "::" ,
                stringify ! ( sh_type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Shdr ) ) . sh_flags as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Shdr ) , "::" ,
                stringify ! ( sh_flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Shdr ) ) . sh_addr as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Shdr ) , "::" ,
                stringify ! ( sh_addr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Shdr ) ) . sh_offset as * const _
                as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Shdr ) , "::" ,
                stringify ! ( sh_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Shdr ) ) . sh_size as * const _ as
                usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Shdr ) , "::" ,
                stringify ! ( sh_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Shdr ) ) . sh_link as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Shdr ) , "::" ,
                stringify ! ( sh_link ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Shdr ) ) . sh_info as * const _ as
                usize } , 44usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Shdr ) , "::" ,
                stringify ! ( sh_info ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Shdr ) ) . sh_addralign as * const
                _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Shdr ) , "::" ,
                stringify ! ( sh_addralign ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Shdr ) ) . sh_entsize as * const _
                as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Shdr ) , "::" ,
                stringify ! ( sh_entsize ) ));
}
impl Clone for Elf64_Shdr {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Elf64_Sym {
    pub st_name: Elf64_Word,
    pub st_info: ::std::os::raw::c_uchar,
    pub st_other: ::std::os::raw::c_uchar,
    pub st_shndx: Elf64_Section,
    pub st_value: Elf64_Addr,
    pub st_size: Elf64_Xword,
}
#[test]
fn bindgen_test_layout_Elf64_Sym() {
    assert_eq!(::std::mem::size_of::<Elf64_Sym>() , 24usize , concat ! (
               "Size of: " , stringify ! ( Elf64_Sym ) ));
    assert_eq! (::std::mem::align_of::<Elf64_Sym>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( Elf64_Sym ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Sym ) ) . st_name as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Sym ) , "::" ,
                stringify ! ( st_name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Sym ) ) . st_info as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Sym ) , "::" ,
                stringify ! ( st_info ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Sym ) ) . st_other as * const _ as
                usize } , 5usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Sym ) , "::" ,
                stringify ! ( st_other ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Sym ) ) . st_shndx as * const _ as
                usize } , 6usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Sym ) , "::" ,
                stringify ! ( st_shndx ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Sym ) ) . st_value as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Sym ) , "::" ,
                stringify ! ( st_value ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Sym ) ) . st_size as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Sym ) , "::" ,
                stringify ! ( st_size ) ));
}
impl Clone for Elf64_Sym {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Elf64_Phdr {
    pub p_type: Elf64_Word,
    pub p_flags: Elf64_Word,
    pub p_offset: Elf64_Off,
    pub p_vaddr: Elf64_Addr,
    pub p_paddr: Elf64_Addr,
    pub p_filesz: Elf64_Xword,
    pub p_memsz: Elf64_Xword,
    pub p_align: Elf64_Xword,
}
#[test]
fn bindgen_test_layout_Elf64_Phdr() {
    assert_eq!(::std::mem::size_of::<Elf64_Phdr>() , 56usize , concat ! (
               "Size of: " , stringify ! ( Elf64_Phdr ) ));
    assert_eq! (::std::mem::align_of::<Elf64_Phdr>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( Elf64_Phdr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Phdr ) ) . p_type as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Phdr ) , "::" ,
                stringify ! ( p_type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Phdr ) ) . p_flags as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Phdr ) , "::" ,
                stringify ! ( p_flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Phdr ) ) . p_offset as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Phdr ) , "::" ,
                stringify ! ( p_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Phdr ) ) . p_vaddr as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Phdr ) , "::" ,
                stringify ! ( p_vaddr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Phdr ) ) . p_paddr as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Phdr ) , "::" ,
                stringify ! ( p_paddr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Phdr ) ) . p_filesz as * const _ as
                usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Phdr ) , "::" ,
                stringify ! ( p_filesz ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Phdr ) ) . p_memsz as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Phdr ) , "::" ,
                stringify ! ( p_memsz ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf64_Phdr ) ) . p_align as * const _ as
                usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf64_Phdr ) , "::" ,
                stringify ! ( p_align ) ));
}
impl Clone for Elf64_Phdr {
    fn clone(&self) -> Self { *self }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum Elf_Type {
    ELF_T_BYTE = 0,
    ELF_T_ADDR = 1,
    ELF_T_DYN = 2,
    ELF_T_EHDR = 3,
    ELF_T_HALF = 4,
    ELF_T_OFF = 5,
    ELF_T_PHDR = 6,
    ELF_T_RELA = 7,
    ELF_T_REL = 8,
    ELF_T_SHDR = 9,
    ELF_T_SWORD = 10,
    ELF_T_SYM = 11,
    ELF_T_WORD = 12,
    ELF_T_XWORD = 13,
    ELF_T_SXWORD = 14,
    ELF_T_VDEF = 15,
    ELF_T_VDAUX = 16,
    ELF_T_VNEED = 17,
    ELF_T_VNAUX = 18,
    ELF_T_NHDR = 19,
    ELF_T_SYMINFO = 20,
    ELF_T_MOVE = 21,
    ELF_T_LIB = 22,
    ELF_T_GNUHASH = 23,
    ELF_T_AUXV = 24,
    ELF_T_CHDR = 25,
    ELF_T_NUM = 26,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Elf_Data {
    pub d_buf: *mut ::std::os::raw::c_void,
    pub d_type: Elf_Type,
    pub d_version: ::std::os::raw::c_uint,
    pub d_size: usize,
    pub d_off: i64,
    pub d_align: usize,
}
#[test]
fn bindgen_test_layout_Elf_Data() {
    assert_eq!(::std::mem::size_of::<Elf_Data>() , 40usize , concat ! (
               "Size of: " , stringify ! ( Elf_Data ) ));
    assert_eq! (::std::mem::align_of::<Elf_Data>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( Elf_Data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf_Data ) ) . d_buf as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf_Data ) , "::" ,
                stringify ! ( d_buf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf_Data ) ) . d_type as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf_Data ) , "::" ,
                stringify ! ( d_type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf_Data ) ) . d_version as * const _ as
                usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf_Data ) , "::" ,
                stringify ! ( d_version ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf_Data ) ) . d_size as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf_Data ) , "::" ,
                stringify ! ( d_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf_Data ) ) . d_off as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf_Data ) , "::" ,
                stringify ! ( d_off ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Elf_Data ) ) . d_align as * const _ as
                usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( Elf_Data ) , "::" ,
                stringify ! ( d_align ) ));
}
impl Clone for Elf_Data {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf_Scn {
    _unused: [u8; 0],
}
pub type GElf_Half = Elf64_Half;
pub type GElf_Word = Elf64_Word;
pub type GElf_Xword = Elf64_Xword;
pub type GElf_Sxword = Elf64_Sxword;
pub type GElf_Addr = Elf64_Addr;
pub type GElf_Off = Elf64_Off;
pub type GElf_Shdr = Elf64_Shdr;
pub type GElf_Sym = Elf64_Sym;
pub type GElf_Phdr = Elf64_Phdr;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum Dwarf_Cmd { DWARF_C_READ = 0, DWARF_C_RDWR = 1, DWARF_C_WRITE = 2, }
pub const DWARF_CB_OK: _bindgen_ty_4 = 0;
pub const DWARF_CB_ABORT: _bindgen_ty_4 = 1;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
pub const DW_TAG_invalid: _bindgen_ty_5 = 0;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
pub type Dwarf_Off = GElf_Off;
pub type Dwarf_Addr = GElf_Addr;
pub type Dwarf_Word = GElf_Xword;
pub type Dwarf_Sword = GElf_Sxword;
pub type Dwarf_Half = GElf_Half;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Dwarf_Abbrev {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Dwarf_Lines_s {
    _unused: [u8; 0],
}
pub type Dwarf_Lines = Dwarf_Lines_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Dwarf_Line_s {
    _unused: [u8; 0],
}
pub type Dwarf_Line = Dwarf_Line_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Dwarf_Files_s {
    _unused: [u8; 0],
}
pub type Dwarf_Files = Dwarf_Files_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Dwarf_Arange_s {
    _unused: [u8; 0],
}
pub type Dwarf_Arange = Dwarf_Arange_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Dwarf_Aranges_s {
    _unused: [u8; 0],
}
pub type Dwarf_Aranges = Dwarf_Aranges_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Dwarf_CU {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Dwarf_Macro_s {
    _unused: [u8; 0],
}
pub type Dwarf_Macro = Dwarf_Macro_s;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Dwarf_Attribute {
    pub code: ::std::os::raw::c_uint,
    pub form: ::std::os::raw::c_uint,
    pub valp: *mut ::std::os::raw::c_uchar,
    pub cu: *mut Dwarf_CU,
}
#[test]
fn bindgen_test_layout_Dwarf_Attribute() {
    assert_eq!(::std::mem::size_of::<Dwarf_Attribute>() , 24usize , concat ! (
               "Size of: " , stringify ! ( Dwarf_Attribute ) ));
    assert_eq! (::std::mem::align_of::<Dwarf_Attribute>() , 8usize , concat !
                ( "Alignment of " , stringify ! ( Dwarf_Attribute ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Dwarf_Attribute ) ) . code as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Dwarf_Attribute ) ,
                "::" , stringify ! ( code ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Dwarf_Attribute ) ) . form as * const _
                as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( Dwarf_Attribute ) ,
                "::" , stringify ! ( form ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Dwarf_Attribute ) ) . valp as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( Dwarf_Attribute ) ,
                "::" , stringify ! ( valp ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Dwarf_Attribute ) ) . cu as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( Dwarf_Attribute ) ,
                "::" , stringify ! ( cu ) ));
}
impl Clone for Dwarf_Attribute {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Dwarf_Block {
    pub length: Dwarf_Word,
    pub data: *mut ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_Dwarf_Block() {
    assert_eq!(::std::mem::size_of::<Dwarf_Block>() , 16usize , concat ! (
               "Size of: " , stringify ! ( Dwarf_Block ) ));
    assert_eq! (::std::mem::align_of::<Dwarf_Block>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( Dwarf_Block ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Dwarf_Block ) ) . length as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Dwarf_Block ) , "::" ,
                stringify ! ( length ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Dwarf_Block ) ) . data as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( Dwarf_Block ) , "::" ,
                stringify ! ( data ) ));
}
impl Clone for Dwarf_Block {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Dwarf_Die {
    pub addr: *mut ::std::os::raw::c_void,
    pub cu: *mut Dwarf_CU,
    pub abbrev: *mut Dwarf_Abbrev,
    pub padding__: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_Dwarf_Die() {
    assert_eq!(::std::mem::size_of::<Dwarf_Die>() , 32usize , concat ! (
               "Size of: " , stringify ! ( Dwarf_Die ) ));
    assert_eq! (::std::mem::align_of::<Dwarf_Die>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( Dwarf_Die ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Dwarf_Die ) ) . addr as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Dwarf_Die ) , "::" ,
                stringify ! ( addr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Dwarf_Die ) ) . cu as * const _ as usize
                } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( Dwarf_Die ) , "::" ,
                stringify ! ( cu ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Dwarf_Die ) ) . abbrev as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( Dwarf_Die ) , "::" ,
                stringify ! ( abbrev ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Dwarf_Die ) ) . padding__ as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( Dwarf_Die ) , "::" ,
                stringify ! ( padding__ ) ));
}
impl Clone for Dwarf_Die {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Dwarf_Global {
    pub cu_offset: Dwarf_Off,
    pub die_offset: Dwarf_Off,
    pub name: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_Dwarf_Global() {
    assert_eq!(::std::mem::size_of::<Dwarf_Global>() , 24usize , concat ! (
               "Size of: " , stringify ! ( Dwarf_Global ) ));
    assert_eq! (::std::mem::align_of::<Dwarf_Global>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( Dwarf_Global ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Dwarf_Global ) ) . cu_offset as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Dwarf_Global ) , "::" ,
                stringify ! ( cu_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Dwarf_Global ) ) . die_offset as * const
                _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( Dwarf_Global ) , "::" ,
                stringify ! ( die_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Dwarf_Global ) ) . name as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( Dwarf_Global ) , "::" ,
                stringify ! ( name ) ));
}
impl Clone for Dwarf_Global {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Dwarf_Op {
    pub atom: u8,
    pub number: Dwarf_Word,
    pub number2: Dwarf_Word,
    pub offset: Dwarf_Word,
}
#[test]
fn bindgen_test_layout_Dwarf_Op() {
    assert_eq!(::std::mem::size_of::<Dwarf_Op>() , 32usize , concat ! (
               "Size of: " , stringify ! ( Dwarf_Op ) ));
    assert_eq! (::std::mem::align_of::<Dwarf_Op>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( Dwarf_Op ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Dwarf_Op ) ) . atom as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Dwarf_Op ) , "::" ,
                stringify ! ( atom ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Dwarf_Op ) ) . number as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( Dwarf_Op ) , "::" ,
                stringify ! ( number ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Dwarf_Op ) ) . number2 as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( Dwarf_Op ) , "::" ,
                stringify ! ( number2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Dwarf_Op ) ) . offset as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( Dwarf_Op ) , "::" ,
                stringify ! ( offset ) ));
}
impl Clone for Dwarf_Op {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Dwarf_CIE {
    pub CIE_id: Dwarf_Off,
    pub initial_instructions: *const u8,
    pub initial_instructions_end: *const u8,
    pub code_alignment_factor: Dwarf_Word,
    pub data_alignment_factor: Dwarf_Sword,
    pub return_address_register: Dwarf_Word,
    pub augmentation: *const ::std::os::raw::c_char,
    pub augmentation_data: *const u8,
    pub augmentation_data_size: usize,
    pub fde_augmentation_data_size: usize,
}
#[test]
fn bindgen_test_layout_Dwarf_CIE() {
    assert_eq!(::std::mem::size_of::<Dwarf_CIE>() , 80usize , concat ! (
               "Size of: " , stringify ! ( Dwarf_CIE ) ));
    assert_eq! (::std::mem::align_of::<Dwarf_CIE>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( Dwarf_CIE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Dwarf_CIE ) ) . CIE_id as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Dwarf_CIE ) , "::" ,
                stringify ! ( CIE_id ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Dwarf_CIE ) ) . initial_instructions as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( Dwarf_CIE ) , "::" ,
                stringify ! ( initial_instructions ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Dwarf_CIE ) ) . initial_instructions_end
                as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( Dwarf_CIE ) , "::" ,
                stringify ! ( initial_instructions_end ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Dwarf_CIE ) ) . code_alignment_factor as
                * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( Dwarf_CIE ) , "::" ,
                stringify ! ( code_alignment_factor ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Dwarf_CIE ) ) . data_alignment_factor as
                * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( Dwarf_CIE ) , "::" ,
                stringify ! ( data_alignment_factor ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Dwarf_CIE ) ) . return_address_register
                as * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( Dwarf_CIE ) , "::" ,
                stringify ! ( return_address_register ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Dwarf_CIE ) ) . augmentation as * const _
                as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( Dwarf_CIE ) , "::" ,
                stringify ! ( augmentation ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Dwarf_CIE ) ) . augmentation_data as *
                const _ as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( Dwarf_CIE ) , "::" ,
                stringify ! ( augmentation_data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Dwarf_CIE ) ) . augmentation_data_size as
                * const _ as usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( Dwarf_CIE ) , "::" ,
                stringify ! ( augmentation_data_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Dwarf_CIE ) ) .
                fde_augmentation_data_size as * const _ as usize } , 72usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( Dwarf_CIE ) , "::" ,
                stringify ! ( fde_augmentation_data_size ) ));
}
impl Clone for Dwarf_CIE {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Dwarf_FDE {
    pub CIE_pointer: Dwarf_Off,
    pub start: *const u8,
    pub end: *const u8,
}
#[test]
fn bindgen_test_layout_Dwarf_FDE() {
    assert_eq!(::std::mem::size_of::<Dwarf_FDE>() , 24usize , concat ! (
               "Size of: " , stringify ! ( Dwarf_FDE ) ));
    assert_eq! (::std::mem::align_of::<Dwarf_FDE>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( Dwarf_FDE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Dwarf_FDE ) ) . CIE_pointer as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Dwarf_FDE ) , "::" ,
                stringify ! ( CIE_pointer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Dwarf_FDE ) ) . start as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( Dwarf_FDE ) , "::" ,
                stringify ! ( start ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Dwarf_FDE ) ) . end as * const _ as usize
                } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( Dwarf_FDE ) , "::" ,
                stringify ! ( end ) ));
}
impl Clone for Dwarf_FDE {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub union Dwarf_CFI_Entry {
    pub CIE_id: Dwarf_Off,
    pub cie: Dwarf_CIE,
    pub fde: Dwarf_FDE,
    _bindgen_union_align: [u64; 10usize],
}
#[test]
fn bindgen_test_layout_Dwarf_CFI_Entry() {
    assert_eq!(::std::mem::size_of::<Dwarf_CFI_Entry>() , 80usize , concat ! (
               "Size of: " , stringify ! ( Dwarf_CFI_Entry ) ));
    assert_eq! (::std::mem::align_of::<Dwarf_CFI_Entry>() , 8usize , concat !
                ( "Alignment of " , stringify ! ( Dwarf_CFI_Entry ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Dwarf_CFI_Entry ) ) . CIE_id as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Dwarf_CFI_Entry ) ,
                "::" , stringify ! ( CIE_id ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Dwarf_CFI_Entry ) ) . cie as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Dwarf_CFI_Entry ) ,
                "::" , stringify ! ( cie ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Dwarf_CFI_Entry ) ) . fde as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Dwarf_CFI_Entry ) ,
                "::" , stringify ! ( fde ) ));
}
impl Clone for Dwarf_CFI_Entry {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Dwarf_Frame_s {
    _unused: [u8; 0],
}
pub type Dwarf_Frame = Dwarf_Frame_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Dwarf_CFI_s {
    _unused: [u8; 0],
}
pub type Dwarf_CFI = Dwarf_CFI_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Dwarf {
    _unused: [u8; 0],
}
pub type Dwarf_OOM = ::std::option::Option<unsafe extern "C" fn()>;
extern "C" {
    pub fn dwarf_begin(fildes: ::std::os::raw::c_int, cmd: Dwarf_Cmd)
     -> *mut Dwarf;
}
extern "C" {
    pub fn dwarf_begin_elf(elf: *mut Elf, cmd: Dwarf_Cmd,
                           scngrp: *mut Elf_Scn) -> *mut Dwarf;
}
extern "C" {
    pub fn dwarf_getelf(dwarf: *mut Dwarf) -> *mut Elf;
}
extern "C" {
    pub fn dwarf_cu_getdwarf(cu: *mut Dwarf_CU) -> *mut Dwarf;
}
extern "C" {
    pub fn dwarf_getalt(main: *mut Dwarf) -> *mut Dwarf;
}
extern "C" {
    pub fn dwarf_setalt(main: *mut Dwarf, alt: *mut Dwarf);
}
extern "C" {
    pub fn dwarf_end(dwarf: *mut Dwarf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_getscn_info(dwarf: *mut Dwarf) -> *mut Elf_Data;
}
extern "C" {
    pub fn dwarf_nextcu(dwarf: *mut Dwarf, off: Dwarf_Off,
                        next_off: *mut Dwarf_Off, header_sizep: *mut usize,
                        abbrev_offsetp: *mut Dwarf_Off,
                        address_sizep: *mut u8, offset_sizep: *mut u8)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_next_unit(dwarf: *mut Dwarf, off: Dwarf_Off,
                           next_off: *mut Dwarf_Off, header_sizep: *mut usize,
                           versionp: *mut Dwarf_Half,
                           abbrev_offsetp: *mut Dwarf_Off,
                           address_sizep: *mut u8, offset_sizep: *mut u8,
                           type_signaturep: *mut u64,
                           type_offsetp: *mut Dwarf_Off)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_next_cfi(e_ident: *const ::std::os::raw::c_uchar,
                          data: *mut Elf_Data, eh_frame_p: bool,
                          offset: Dwarf_Off, next_offset: *mut Dwarf_Off,
                          entry: *mut Dwarf_CFI_Entry)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_getcfi(dwarf: *mut Dwarf) -> *mut Dwarf_CFI;
}
extern "C" {
    pub fn dwarf_getcfi_elf(elf: *mut Elf) -> *mut Dwarf_CFI;
}
extern "C" {
    pub fn dwarf_cfi_end(cache: *mut Dwarf_CFI) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_offdie(dbg: *mut Dwarf, offset: Dwarf_Off,
                        result: *mut Dwarf_Die) -> *mut Dwarf_Die;
}
extern "C" {
    pub fn dwarf_offdie_types(dbg: *mut Dwarf, offset: Dwarf_Off,
                              result: *mut Dwarf_Die) -> *mut Dwarf_Die;
}
extern "C" {
    pub fn dwarf_dieoffset(die: *mut Dwarf_Die) -> Dwarf_Off;
}
extern "C" {
    pub fn dwarf_cuoffset(die: *mut Dwarf_Die) -> Dwarf_Off;
}
extern "C" {
    pub fn dwarf_diecu(die: *mut Dwarf_Die, result: *mut Dwarf_Die,
                       address_sizep: *mut u8, offset_sizep: *mut u8)
     -> *mut Dwarf_Die;
}
extern "C" {
    pub fn dwarf_cu_die(cu: *mut Dwarf_CU, result: *mut Dwarf_Die,
                        versionp: *mut Dwarf_Half,
                        abbrev_offsetp: *mut Dwarf_Off,
                        address_sizep: *mut u8, offset_sizep: *mut u8,
                        type_signaturep: *mut u64,
                        type_offsetp: *mut Dwarf_Off) -> *mut Dwarf_Die;
}
extern "C" {
    pub fn dwarf_addrdie(dbg: *mut Dwarf, addr: Dwarf_Addr,
                         result: *mut Dwarf_Die) -> *mut Dwarf_Die;
}
extern "C" {
    pub fn dwarf_child(die: *mut Dwarf_Die, result: *mut Dwarf_Die)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_siblingof(die: *mut Dwarf_Die, result: *mut Dwarf_Die)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_peel_type(die: *mut Dwarf_Die, result: *mut Dwarf_Die)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_haschildren(die: *mut Dwarf_Die) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_getattrs(die: *mut Dwarf_Die,
                          callback:
                              ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut Dwarf_Attribute,
                                                                         arg2:
                                                                             *mut ::std::os::raw::c_void)
                                                        ->
                                                            ::std::os::raw::c_int>,
                          arg: *mut ::std::os::raw::c_void, offset: isize)
     -> isize;
}
extern "C" {
    pub fn dwarf_tag(die: *mut Dwarf_Die) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_attr(die: *mut Dwarf_Die,
                      search_name: ::std::os::raw::c_uint,
                      result: *mut Dwarf_Attribute) -> *mut Dwarf_Attribute;
}
extern "C" {
    pub fn dwarf_hasattr(die: *mut Dwarf_Die,
                         search_name: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_attr_integrate(die: *mut Dwarf_Die,
                                search_name: ::std::os::raw::c_uint,
                                result: *mut Dwarf_Attribute)
     -> *mut Dwarf_Attribute;
}
extern "C" {
    pub fn dwarf_hasattr_integrate(die: *mut Dwarf_Die,
                                   search_name: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_hasform(attr: *mut Dwarf_Attribute,
                         search_form: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_whatattr(attr: *mut Dwarf_Attribute)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn dwarf_whatform(attr: *mut Dwarf_Attribute)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn dwarf_formstring(attrp: *mut Dwarf_Attribute)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn dwarf_formudata(attr: *mut Dwarf_Attribute,
                           return_uval: *mut Dwarf_Word)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_formsdata(attr: *mut Dwarf_Attribute,
                           return_uval: *mut Dwarf_Sword)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_formaddr(attr: *mut Dwarf_Attribute,
                          return_addr: *mut Dwarf_Addr)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_formref(attr: *mut Dwarf_Attribute,
                         return_offset: *mut Dwarf_Off)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_formref_die(attr: *mut Dwarf_Attribute,
                             die_mem: *mut Dwarf_Die) -> *mut Dwarf_Die;
}
extern "C" {
    pub fn dwarf_formblock(attr: *mut Dwarf_Attribute,
                           return_block: *mut Dwarf_Block)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_formflag(attr: *mut Dwarf_Attribute, return_bool: *mut bool)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_diename(die: *mut Dwarf_Die)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn dwarf_highpc(die: *mut Dwarf_Die, return_addr: *mut Dwarf_Addr)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_lowpc(die: *mut Dwarf_Die, return_addr: *mut Dwarf_Addr)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_entrypc(die: *mut Dwarf_Die, return_addr: *mut Dwarf_Addr)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_haspc(die: *mut Dwarf_Die, pc: Dwarf_Addr)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_ranges(die: *mut Dwarf_Die, offset: isize,
                        basep: *mut Dwarf_Addr, startp: *mut Dwarf_Addr,
                        endp: *mut Dwarf_Addr) -> isize;
}
extern "C" {
    pub fn dwarf_bytesize(die: *mut Dwarf_Die) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_bitsize(die: *mut Dwarf_Die) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_bitoffset(die: *mut Dwarf_Die) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_arrayorder(die: *mut Dwarf_Die) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_srclang(die: *mut Dwarf_Die) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_getabbrev(die: *mut Dwarf_Die, offset: Dwarf_Off,
                           lengthp: *mut usize) -> *mut Dwarf_Abbrev;
}
extern "C" {
    pub fn dwarf_offabbrev(dbg: *mut Dwarf, offset: Dwarf_Off,
                           lengthp: *mut usize, abbrevp: *mut Dwarf_Abbrev)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_getabbrevcode(abbrev: *mut Dwarf_Abbrev)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn dwarf_getabbrevtag(abbrev: *mut Dwarf_Abbrev)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn dwarf_abbrevhaschildren(abbrev: *mut Dwarf_Abbrev)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_getattrcnt(abbrev: *mut Dwarf_Abbrev, attrcntp: *mut usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_getabbrevattr(abbrev: *mut Dwarf_Abbrev, idx: usize,
                               namep: *mut ::std::os::raw::c_uint,
                               formp: *mut ::std::os::raw::c_uint,
                               offset: *mut Dwarf_Off)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_getstring(dbg: *mut Dwarf, offset: Dwarf_Off,
                           lenp: *mut usize) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn dwarf_getpubnames(dbg: *mut Dwarf,
                             callback:
                                 ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                *mut Dwarf,
                                                                            arg2:
                                                                                *mut Dwarf_Global,
                                                                            arg3:
                                                                                *mut ::std::os::raw::c_void)
                                                           ->
                                                               ::std::os::raw::c_int>,
                             arg: *mut ::std::os::raw::c_void, offset: isize)
     -> isize;
}
extern "C" {
    pub fn dwarf_getsrclines(cudie: *mut Dwarf_Die,
                             lines: *mut *mut Dwarf_Lines, nlines: *mut usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_onesrcline(lines: *mut Dwarf_Lines, idx: usize)
     -> *mut Dwarf_Line;
}
extern "C" {
    pub fn dwarf_getsrcfiles(cudie: *mut Dwarf_Die,
                             files: *mut *mut Dwarf_Files, nfiles: *mut usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_getsrc_die(cudie: *mut Dwarf_Die, addr: Dwarf_Addr)
     -> *mut Dwarf_Line;
}
extern "C" {
    pub fn dwarf_getsrc_file(dbg: *mut Dwarf,
                             fname: *const ::std::os::raw::c_char,
                             line: ::std::os::raw::c_int,
                             col: ::std::os::raw::c_int,
                             srcsp: *mut *mut *mut Dwarf_Line,
                             nsrcs: *mut usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_lineaddr(line: *mut Dwarf_Line, addrp: *mut Dwarf_Addr)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_lineop_index(line: *mut Dwarf_Line,
                              op_indexp: *mut ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_lineno(line: *mut Dwarf_Line,
                        linep: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_linecol(line: *mut Dwarf_Line,
                         colp: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_linebeginstatement(line: *mut Dwarf_Line, flagp: *mut bool)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_lineendsequence(line: *mut Dwarf_Line, flagp: *mut bool)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_lineblock(line: *mut Dwarf_Line, flagp: *mut bool)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_lineprologueend(line: *mut Dwarf_Line, flagp: *mut bool)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_lineepiloguebegin(line: *mut Dwarf_Line, flagp: *mut bool)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_lineisa(line: *mut Dwarf_Line,
                         isap: *mut ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_linediscriminator(line: *mut Dwarf_Line,
                                   discp: *mut ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_linesrc(line: *mut Dwarf_Line, mtime: *mut Dwarf_Word,
                         length: *mut Dwarf_Word)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn dwarf_filesrc(file: *mut Dwarf_Files, idx: usize,
                         mtime: *mut Dwarf_Word, length: *mut Dwarf_Word)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn dwarf_getsrcdirs(files: *mut Dwarf_Files,
                            result: *mut *const *const ::std::os::raw::c_char,
                            ndirs: *mut usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_getlocation(attr: *mut Dwarf_Attribute,
                             expr: *mut *mut Dwarf_Op, exprlen: *mut usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_getlocation_addr(attr: *mut Dwarf_Attribute,
                                  address: Dwarf_Addr,
                                  exprs: *mut *mut Dwarf_Op,
                                  exprlens: *mut usize, nlocs: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_getlocations(attr: *mut Dwarf_Attribute, offset: isize,
                              basep: *mut Dwarf_Addr, startp: *mut Dwarf_Addr,
                              endp: *mut Dwarf_Addr, expr: *mut *mut Dwarf_Op,
                              exprlen: *mut usize) -> isize;
}
extern "C" {
    pub fn dwarf_getlocation_implicit_value(attr: *mut Dwarf_Attribute,
                                            op: *const Dwarf_Op,
                                            return_block: *mut Dwarf_Block)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_getlocation_implicit_pointer(attr: *mut Dwarf_Attribute,
                                              op: *const Dwarf_Op,
                                              result: *mut Dwarf_Attribute)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_getlocation_die(attr: *mut Dwarf_Attribute,
                                 op: *const Dwarf_Op, result: *mut Dwarf_Die)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_getlocation_attr(attr: *mut Dwarf_Attribute,
                                  op: *const Dwarf_Op,
                                  result: *mut Dwarf_Attribute)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_aggregate_size(die: *mut Dwarf_Die, size: *mut Dwarf_Word)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_getscopes(cudie: *mut Dwarf_Die, pc: Dwarf_Addr,
                           scopes: *mut *mut Dwarf_Die)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_getscopes_die(die: *mut Dwarf_Die,
                               scopes: *mut *mut Dwarf_Die)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_getscopevar(scopes: *mut Dwarf_Die,
                             nscopes: ::std::os::raw::c_int,
                             name: *const ::std::os::raw::c_char,
                             skip_shadows: ::std::os::raw::c_int,
                             match_file: *const ::std::os::raw::c_char,
                             match_lineno: ::std::os::raw::c_int,
                             match_linecol: ::std::os::raw::c_int,
                             result: *mut Dwarf_Die) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_getaranges(dbg: *mut Dwarf, aranges: *mut *mut Dwarf_Aranges,
                            naranges: *mut usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_onearange(aranges: *mut Dwarf_Aranges, idx: usize)
     -> *mut Dwarf_Arange;
}
extern "C" {
    pub fn dwarf_getarangeinfo(arange: *mut Dwarf_Arange,
                               addrp: *mut Dwarf_Addr,
                               lengthp: *mut Dwarf_Word,
                               offsetp: *mut Dwarf_Off)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_getarange_addr(aranges: *mut Dwarf_Aranges, addr: Dwarf_Addr)
     -> *mut Dwarf_Arange;
}
extern "C" {
    pub fn dwarf_getfuncs(cudie: *mut Dwarf_Die,
                          callback:
                              ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut Dwarf_Die,
                                                                         arg2:
                                                                             *mut ::std::os::raw::c_void)
                                                        ->
                                                            ::std::os::raw::c_int>,
                          arg: *mut ::std::os::raw::c_void, offset: isize)
     -> isize;
}
extern "C" {
    pub fn dwarf_decl_file(decl: *mut Dwarf_Die)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn dwarf_decl_line(decl: *mut Dwarf_Die,
                           linep: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_decl_column(decl: *mut Dwarf_Die,
                             colp: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_func_inline(func: *mut Dwarf_Die) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_func_inline_instances(func: *mut Dwarf_Die,
                                       callback:
                                           ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                          *mut Dwarf_Die,
                                                                                      arg2:
                                                                                          *mut ::std::os::raw::c_void)
                                                                     ->
                                                                         ::std::os::raw::c_int>,
                                       arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_entry_breakpoints(die: *mut Dwarf_Die,
                                   bkpts: *mut *mut Dwarf_Addr)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_getmacros(cudie: *mut Dwarf_Die,
                           callback:
                               ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut Dwarf_Macro,
                                                                          arg2:
                                                                              *mut ::std::os::raw::c_void)
                                                         ->
                                                             ::std::os::raw::c_int>,
                           arg: *mut ::std::os::raw::c_void, token: isize)
     -> isize;
}
extern "C" {
    pub fn dwarf_getmacros_off(dbg: *mut Dwarf, macoff: Dwarf_Off,
                               callback:
                                   ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut Dwarf_Macro,
                                                                              arg2:
                                                                                  *mut ::std::os::raw::c_void)
                                                             ->
                                                                 ::std::os::raw::c_int>,
                               arg: *mut ::std::os::raw::c_void, token: isize)
     -> isize;
}
extern "C" {
    pub fn dwarf_macro_getsrcfiles(dbg: *mut Dwarf, macro_: *mut Dwarf_Macro,
                                   files: *mut *mut Dwarf_Files,
                                   nfiles: *mut usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_macro_opcode(macro_: *mut Dwarf_Macro,
                              opcodep: *mut ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_macro_getparamcnt(macro_: *mut Dwarf_Macro,
                                   paramcntp: *mut usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_macro_param(macro_: *mut Dwarf_Macro, idx: usize,
                             attribute: *mut Dwarf_Attribute)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_macro_param1(macro_: *mut Dwarf_Macro,
                              paramp: *mut Dwarf_Word)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_macro_param2(macro_: *mut Dwarf_Macro,
                              paramp: *mut Dwarf_Word,
                              strp: *mut *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_cfi_addrframe(cache: *mut Dwarf_CFI, address: Dwarf_Addr,
                               frame: *mut *mut Dwarf_Frame)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_frame_info(frame: *mut Dwarf_Frame, start: *mut Dwarf_Addr,
                            end: *mut Dwarf_Addr, signalp: *mut bool)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_frame_cfa(frame: *mut Dwarf_Frame, ops: *mut *mut Dwarf_Op,
                           nops: *mut usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_frame_register(frame: *mut Dwarf_Frame,
                                regno: ::std::os::raw::c_int,
                                ops_mem: *mut Dwarf_Op,
                                ops: *mut *mut Dwarf_Op, nops: *mut usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_errno() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwarf_errmsg(err: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn dwarf_new_oom_handler(dbg: *mut Dwarf, handler: Dwarf_OOM)
     -> Dwarf_OOM;
}
pub type FILE = [u64; 27usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Dwfl {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Dwfl_Module {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Dwfl_Line {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Dwfl_Thread {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Dwfl_Frame {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Dwfl_Callbacks {
    pub find_elf: ::std::option::Option<unsafe extern "C" fn(mod_:
                                                                 *mut Dwfl_Module,
                                                             userdata:
                                                                 *mut *mut ::std::os::raw::c_void,
                                                             modname:
                                                                 *const ::std::os::raw::c_char,
                                                             base: Dwarf_Addr,
                                                             file_name:
                                                                 *mut *mut ::std::os::raw::c_char,
                                                             elfp:
                                                                 *mut *mut Elf)
                                            -> ::std::os::raw::c_int>,
    pub find_debuginfo: ::std::option::Option<unsafe extern "C" fn(mod_:
                                                                       *mut Dwfl_Module,
                                                                   userdata:
                                                                       *mut *mut ::std::os::raw::c_void,
                                                                   modname:
                                                                       *const ::std::os::raw::c_char,
                                                                   base:
                                                                       Dwarf_Addr,
                                                                   file_name:
                                                                       *const ::std::os::raw::c_char,
                                                                   debuglink_file:
                                                                       *const ::std::os::raw::c_char,
                                                                   debuglink_crc:
                                                                       GElf_Word,
                                                                   debuginfo_file_name:
                                                                       *mut *mut ::std::os::raw::c_char)
                                                  -> ::std::os::raw::c_int>,
    pub section_address: ::std::option::Option<unsafe extern "C" fn(mod_:
                                                                        *mut Dwfl_Module,
                                                                    userdata:
                                                                        *mut *mut ::std::os::raw::c_void,
                                                                    modname:
                                                                        *const ::std::os::raw::c_char,
                                                                    base:
                                                                        Dwarf_Addr,
                                                                    secname:
                                                                        *const ::std::os::raw::c_char,
                                                                    shndx:
                                                                        GElf_Word,
                                                                    shdr:
                                                                        *const GElf_Shdr,
                                                                    addr:
                                                                        *mut Dwarf_Addr)
                                                   -> ::std::os::raw::c_int>,
    pub debuginfo_path: *mut *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_Dwfl_Callbacks() {
    assert_eq!(::std::mem::size_of::<Dwfl_Callbacks>() , 32usize , concat ! (
               "Size of: " , stringify ! ( Dwfl_Callbacks ) ));
    assert_eq! (::std::mem::align_of::<Dwfl_Callbacks>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( Dwfl_Callbacks ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Dwfl_Callbacks ) ) . find_elf as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Dwfl_Callbacks ) , "::"
                , stringify ! ( find_elf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Dwfl_Callbacks ) ) . find_debuginfo as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( Dwfl_Callbacks ) , "::"
                , stringify ! ( find_debuginfo ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Dwfl_Callbacks ) ) . section_address as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( Dwfl_Callbacks ) , "::"
                , stringify ! ( section_address ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Dwfl_Callbacks ) ) . debuginfo_path as *
                const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( Dwfl_Callbacks ) , "::"
                , stringify ! ( debuginfo_path ) ));
}
impl Clone for Dwfl_Callbacks {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn dwfl_begin(callbacks: *const Dwfl_Callbacks) -> *mut Dwfl;
}
extern "C" {
    pub fn dwfl_end(arg1: *mut Dwfl);
}
extern "C" {
    pub fn dwfl_version(arg1: *mut Dwfl) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn dwfl_errno() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwfl_errmsg(err: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn dwfl_report_begin(dwfl: *mut Dwfl);
}
extern "C" {
    pub fn dwfl_report_segment(dwfl: *mut Dwfl, ndx: ::std::os::raw::c_int,
                               phdr: *const GElf_Phdr, bias: GElf_Addr,
                               ident: *const ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwfl_report_module(dwfl: *mut Dwfl,
                              name: *const ::std::os::raw::c_char,
                              start: Dwarf_Addr, end: Dwarf_Addr)
     -> *mut Dwfl_Module;
}
extern "C" {
    pub fn dwfl_report_elf(dwfl: *mut Dwfl,
                           name: *const ::std::os::raw::c_char,
                           file_name: *const ::std::os::raw::c_char,
                           fd: ::std::os::raw::c_int, base: GElf_Addr,
                           add_p_vaddr: bool) -> *mut Dwfl_Module;
}
extern "C" {
    pub fn dwfl_report_offline(dwfl: *mut Dwfl,
                               name: *const ::std::os::raw::c_char,
                               file_name: *const ::std::os::raw::c_char,
                               fd: ::std::os::raw::c_int) -> *mut Dwfl_Module;
}
extern "C" {
    pub fn dwfl_report_end(dwfl: *mut Dwfl,
                           removed:
                               ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut Dwfl_Module,
                                                                          arg2:
                                                                              *mut ::std::os::raw::c_void,
                                                                          arg3:
                                                                              *const ::std::os::raw::c_char,
                                                                          arg4:
                                                                              Dwarf_Addr,
                                                                          arg:
                                                                              *mut ::std::os::raw::c_void)
                                                         ->
                                                             ::std::os::raw::c_int>,
                           arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwfl_report_begin_add(dwfl: *mut Dwfl);
}
extern "C" {
    pub fn dwfl_module_info(mod_: *mut Dwfl_Module,
                            userdata: *mut *mut *mut ::std::os::raw::c_void,
                            start: *mut Dwarf_Addr, end: *mut Dwarf_Addr,
                            dwbias: *mut Dwarf_Addr, symbias: *mut Dwarf_Addr,
                            mainfile: *mut *const ::std::os::raw::c_char,
                            debugfile: *mut *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn dwfl_getmodules(dwfl: *mut Dwfl,
                           callback:
                               ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut Dwfl_Module,
                                                                          arg2:
                                                                              *mut *mut ::std::os::raw::c_void,
                                                                          arg3:
                                                                              *const ::std::os::raw::c_char,
                                                                          arg4:
                                                                              Dwarf_Addr,
                                                                          arg:
                                                                              *mut ::std::os::raw::c_void)
                                                         ->
                                                             ::std::os::raw::c_int>,
                           arg: *mut ::std::os::raw::c_void, offset: isize)
     -> isize;
}
extern "C" {
    pub fn dwfl_addrmodule(dwfl: *mut Dwfl, address: Dwarf_Addr)
     -> *mut Dwfl_Module;
}
extern "C" {
    pub fn dwfl_addrsegment(dwfl: *mut Dwfl, address: Dwarf_Addr,
                            mod_: *mut *mut Dwfl_Module)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwfl_module_report_build_id(mod_: *mut Dwfl_Module,
                                       bits: *const ::std::os::raw::c_uchar,
                                       len: usize, vaddr: GElf_Addr)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwfl_module_build_id(mod_: *mut Dwfl_Module,
                                bits: *mut *const ::std::os::raw::c_uchar,
                                vaddr: *mut GElf_Addr)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwfl_build_id_find_elf(arg1: *mut Dwfl_Module,
                                  arg2: *mut *mut ::std::os::raw::c_void,
                                  arg3: *const ::std::os::raw::c_char,
                                  arg4: Dwarf_Addr,
                                  arg5: *mut *mut ::std::os::raw::c_char,
                                  arg6: *mut *mut Elf)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwfl_build_id_find_debuginfo(arg1: *mut Dwfl_Module,
                                        arg2:
                                            *mut *mut ::std::os::raw::c_void,
                                        arg3: *const ::std::os::raw::c_char,
                                        arg4: Dwarf_Addr,
                                        arg5: *const ::std::os::raw::c_char,
                                        arg6: *const ::std::os::raw::c_char,
                                        arg7: GElf_Word,
                                        arg8:
                                            *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwfl_standard_find_debuginfo(arg1: *mut Dwfl_Module,
                                        arg2:
                                            *mut *mut ::std::os::raw::c_void,
                                        arg3: *const ::std::os::raw::c_char,
                                        arg4: Dwarf_Addr,
                                        arg5: *const ::std::os::raw::c_char,
                                        arg6: *const ::std::os::raw::c_char,
                                        arg7: GElf_Word,
                                        arg8:
                                            *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwfl_offline_section_address(arg1: *mut Dwfl_Module,
                                        arg2:
                                            *mut *mut ::std::os::raw::c_void,
                                        arg3: *const ::std::os::raw::c_char,
                                        arg4: Dwarf_Addr,
                                        arg5: *const ::std::os::raw::c_char,
                                        arg6: GElf_Word,
                                        arg7: *const GElf_Shdr,
                                        addr: *mut Dwarf_Addr)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwfl_linux_kernel_find_elf(arg1: *mut Dwfl_Module,
                                      arg2: *mut *mut ::std::os::raw::c_void,
                                      arg3: *const ::std::os::raw::c_char,
                                      arg4: Dwarf_Addr,
                                      arg5: *mut *mut ::std::os::raw::c_char,
                                      arg6: *mut *mut Elf)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwfl_linux_kernel_module_section_address(arg1: *mut Dwfl_Module,
                                                    arg2:
                                                        *mut *mut ::std::os::raw::c_void,
                                                    arg3:
                                                        *const ::std::os::raw::c_char,
                                                    arg4: Dwarf_Addr,
                                                    arg5:
                                                        *const ::std::os::raw::c_char,
                                                    arg6: GElf_Word,
                                                    arg7: *const GElf_Shdr,
                                                    addr: *mut Dwarf_Addr)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwfl_linux_kernel_report_kernel(dwfl: *mut Dwfl)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwfl_linux_kernel_report_modules(dwfl: *mut Dwfl)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwfl_linux_kernel_report_offline(dwfl: *mut Dwfl,
                                            release:
                                                *const ::std::os::raw::c_char,
                                            predicate:
                                                ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                               *const ::std::os::raw::c_char,
                                                                                           arg2:
                                                                                               *const ::std::os::raw::c_char)
                                                                          ->
                                                                              ::std::os::raw::c_int>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwfl_core_file_report(dwfl: *mut Dwfl, elf: *mut Elf,
                                 executable: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwfl_linux_proc_report(dwfl: *mut Dwfl, pid: pid_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwfl_linux_proc_maps_report(dwfl: *mut Dwfl, arg1: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwfl_linux_proc_find_elf(mod_: *mut Dwfl_Module,
                                    userdata:
                                        *mut *mut ::std::os::raw::c_void,
                                    module_name:
                                        *const ::std::os::raw::c_char,
                                    base: Dwarf_Addr,
                                    file_name:
                                        *mut *mut ::std::os::raw::c_char,
                                    arg1: *mut *mut Elf)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct argp {
    _unused: [u8; 0],
}
extern "C" {
    pub fn dwfl_standard_argp() -> *const argp;
}
extern "C" {
    /// Relocation of addresses from Dwfl
    pub fn dwfl_module_relocations(mod_: *mut Dwfl_Module)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwfl_module_relocate_address(mod_: *mut Dwfl_Module,
                                        address: *mut Dwarf_Addr)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwfl_module_relocation_info(mod_: *mut Dwfl_Module,
                                       idx: ::std::os::raw::c_uint,
                                       shndxp: *mut GElf_Word)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn dwfl_validate_address(dwfl: *mut Dwfl, address: Dwarf_Addr,
                                 offset: Dwarf_Sword)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /// ELF access functions
    pub fn dwfl_module_getelf(arg1: *mut Dwfl_Module, bias: *mut GElf_Addr)
     -> *mut Elf;
}
extern "C" {
    pub fn dwfl_module_getsymtab(mod_: *mut Dwfl_Module)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwfl_module_getsymtab_first_global(mod_: *mut Dwfl_Module)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwfl_module_getsym(mod_: *mut Dwfl_Module,
                              ndx: ::std::os::raw::c_int, sym: *mut GElf_Sym,
                              shndxp: *mut GElf_Word)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn dwfl_module_getsym_info(mod_: *mut Dwfl_Module,
                                   ndx: ::std::os::raw::c_int,
                                   sym: *mut GElf_Sym, addr: *mut GElf_Addr,
                                   shndxp: *mut GElf_Word,
                                   elfp: *mut *mut Elf, bias: *mut Dwarf_Addr)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn dwfl_module_addrname(mod_: *mut Dwfl_Module, address: GElf_Addr)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn dwfl_module_addrinfo(mod_: *mut Dwfl_Module, address: GElf_Addr,
                                offset: *mut GElf_Off, sym: *mut GElf_Sym,
                                shndxp: *mut GElf_Word, elfp: *mut *mut Elf,
                                bias: *mut Dwarf_Addr)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn dwfl_module_addrsym(mod_: *mut Dwfl_Module, address: GElf_Addr,
                               sym: *mut GElf_Sym, shndxp: *mut GElf_Word)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn dwfl_module_address_section(mod_: *mut Dwfl_Module,
                                       address: *mut Dwarf_Addr,
                                       bias: *mut Dwarf_Addr) -> *mut Elf_Scn;
}
extern "C" {
    /// Dwarf access functions
    pub fn dwfl_module_getdwarf(arg1: *mut Dwfl_Module, bias: *mut Dwarf_Addr)
     -> *mut Dwarf;
}
extern "C" {
    pub fn dwfl_getdwarf(arg1: *mut Dwfl,
                         callback:
                             ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut Dwfl_Module,
                                                                        arg2:
                                                                            *mut *mut ::std::os::raw::c_void,
                                                                        arg3:
                                                                            *const ::std::os::raw::c_char,
                                                                        arg4:
                                                                            Dwarf_Addr,
                                                                        arg5:
                                                                            *mut Dwarf,
                                                                        arg6:
                                                                            Dwarf_Addr,
                                                                        arg7:
                                                                            *mut ::std::os::raw::c_void)
                                                       ->
                                                           ::std::os::raw::c_int>,
                         arg: *mut ::std::os::raw::c_void, offset: isize)
     -> isize;
}
extern "C" {
    pub fn dwfl_addrdwarf(dwfl: *mut Dwfl, addr: Dwarf_Addr,
                          bias: *mut Dwarf_Addr) -> *mut Dwarf;
}
extern "C" {
    pub fn dwfl_addrdie(dwfl: *mut Dwfl, addr: Dwarf_Addr,
                        bias: *mut Dwarf_Addr) -> *mut Dwarf_Die;
}
extern "C" {
    pub fn dwfl_module_addrdie(mod_: *mut Dwfl_Module, addr: Dwarf_Addr,
                               bias: *mut Dwarf_Addr) -> *mut Dwarf_Die;
}
extern "C" {
    pub fn dwfl_nextcu(dwfl: *mut Dwfl, lastcu: *mut Dwarf_Die,
                       bias: *mut Dwarf_Addr) -> *mut Dwarf_Die;
}
extern "C" {
    pub fn dwfl_module_nextcu(mod_: *mut Dwfl_Module, lastcu: *mut Dwarf_Die,
                              bias: *mut Dwarf_Addr) -> *mut Dwarf_Die;
}
extern "C" {
    pub fn dwfl_cumodule(cudie: *mut Dwarf_Die) -> *mut Dwfl_Module;
}
extern "C" {
    pub fn dwfl_getsrclines(cudie: *mut Dwarf_Die, nlines: *mut usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwfl_onesrcline(cudie: *mut Dwarf_Die, idx: usize)
     -> *mut Dwfl_Line;
}
extern "C" {
    pub fn dwfl_module_getsrc(mod_: *mut Dwfl_Module, addr: Dwarf_Addr)
     -> *mut Dwfl_Line;
}
extern "C" {
    pub fn dwfl_getsrc(dwfl: *mut Dwfl, addr: Dwarf_Addr) -> *mut Dwfl_Line;
}
extern "C" {
    pub fn dwfl_module_getsrc_file(mod_: *mut Dwfl_Module,
                                   fname: *const ::std::os::raw::c_char,
                                   lineno: ::std::os::raw::c_int,
                                   column: ::std::os::raw::c_int,
                                   srcsp: *mut *mut *mut Dwfl_Line,
                                   nsrcs: *mut usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwfl_linemodule(line: *mut Dwfl_Line) -> *mut Dwfl_Module;
}
extern "C" {
    pub fn dwfl_linecu(line: *mut Dwfl_Line) -> *mut Dwarf_Die;
}
extern "C" {
    pub fn dwfl_lineinfo(line: *mut Dwfl_Line, addr: *mut Dwarf_Addr,
                         linep: *mut ::std::os::raw::c_int,
                         colp: *mut ::std::os::raw::c_int,
                         mtime: *mut Dwarf_Word, length: *mut Dwarf_Word)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn dwfl_dwarf_line(line: *mut Dwfl_Line, bias: *mut Dwarf_Addr)
     -> *mut Dwarf_Line;
}
extern "C" {
    pub fn dwfl_line_comp_dir(line: *mut Dwfl_Line)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    /// Machine backend access functions
    pub fn dwfl_module_return_value_location(mod_: *mut Dwfl_Module,
                                             functypedie: *mut Dwarf_Die,
                                             locops: *mut *const Dwarf_Op)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwfl_module_register_names(mod_: *mut Dwfl_Module,
                                      callback:
                                          ::std::option::Option<unsafe extern "C" fn(arg:
                                                                                         *mut ::std::os::raw::c_void,
                                                                                     regno:
                                                                                         ::std::os::raw::c_int,
                                                                                     setname:
                                                                                         *const ::std::os::raw::c_char,
                                                                                     prefix:
                                                                                         *const ::std::os::raw::c_char,
                                                                                     regname:
                                                                                         *const ::std::os::raw::c_char,
                                                                                     bits:
                                                                                         ::std::os::raw::c_int,
                                                                                     type_:
                                                                                         ::std::os::raw::c_int)
                                                                    ->
                                                                        ::std::os::raw::c_int>,
                                      arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwfl_module_dwarf_cfi(mod_: *mut Dwfl_Module,
                                 bias: *mut Dwarf_Addr) -> *mut Dwarf_CFI;
}
extern "C" {
    pub fn dwfl_module_eh_cfi(mod_: *mut Dwfl_Module, bias: *mut Dwarf_Addr)
     -> *mut Dwarf_CFI;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Dwfl_Thread_Callbacks {
    pub next_thread: ::std::option::Option<unsafe extern "C" fn(dwfl:
                                                                    *mut Dwfl,
                                                                dwfl_arg:
                                                                    *mut ::std::os::raw::c_void,
                                                                thread_argp:
                                                                    *mut *mut ::std::os::raw::c_void)
                                               -> pid_t>,
    pub get_thread: ::std::option::Option<unsafe extern "C" fn(dwfl:
                                                                   *mut Dwfl,
                                                               tid: pid_t,
                                                               dwfl_arg:
                                                                   *mut ::std::os::raw::c_void,
                                                               thread_argp:
                                                                   *mut *mut ::std::os::raw::c_void)
                                              -> bool>,
    pub memory_read: ::std::option::Option<unsafe extern "C" fn(dwfl:
                                                                    *mut Dwfl,
                                                                addr:
                                                                    Dwarf_Addr,
                                                                result:
                                                                    *mut Dwarf_Word,
                                                                dwfl_arg:
                                                                    *mut ::std::os::raw::c_void)
                                               -> bool>,
    pub set_initial_registers: ::std::option::Option<unsafe extern "C" fn(thread:
                                                                              *mut Dwfl_Thread,
                                                                          thread_arg:
                                                                              *mut ::std::os::raw::c_void)
                                                         -> bool>,
    pub detach: ::std::option::Option<unsafe extern "C" fn(dwfl: *mut Dwfl,
                                                           dwfl_arg:
                                                               *mut ::std::os::raw::c_void)>,
    pub thread_detach: ::std::option::Option<unsafe extern "C" fn(thread:
                                                                      *mut Dwfl_Thread,
                                                                  thread_arg:
                                                                      *mut ::std::os::raw::c_void)>,
}
#[test]
fn bindgen_test_layout_Dwfl_Thread_Callbacks() {
    assert_eq!(::std::mem::size_of::<Dwfl_Thread_Callbacks>() , 48usize ,
               concat ! ( "Size of: " , stringify ! ( Dwfl_Thread_Callbacks )
               ));
    assert_eq! (::std::mem::align_of::<Dwfl_Thread_Callbacks>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( Dwfl_Thread_Callbacks ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Dwfl_Thread_Callbacks ) ) . next_thread
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Dwfl_Thread_Callbacks )
                , "::" , stringify ! ( next_thread ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Dwfl_Thread_Callbacks ) ) . get_thread as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( Dwfl_Thread_Callbacks )
                , "::" , stringify ! ( get_thread ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Dwfl_Thread_Callbacks ) ) . memory_read
                as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( Dwfl_Thread_Callbacks )
                , "::" , stringify ! ( memory_read ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Dwfl_Thread_Callbacks ) ) .
                set_initial_registers as * const _ as usize } , 24usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( Dwfl_Thread_Callbacks )
                , "::" , stringify ! ( set_initial_registers ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Dwfl_Thread_Callbacks ) ) . detach as *
                const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( Dwfl_Thread_Callbacks )
                , "::" , stringify ! ( detach ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Dwfl_Thread_Callbacks ) ) . thread_detach
                as * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( Dwfl_Thread_Callbacks )
                , "::" , stringify ! ( thread_detach ) ));
}
impl Clone for Dwfl_Thread_Callbacks {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn dwfl_attach_state(dwfl: *mut Dwfl, elf: *mut Elf, pid: pid_t,
                             thread_callbacks: *const Dwfl_Thread_Callbacks,
                             dwfl_arg: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn dwfl_core_file_attach(dwfl: *mut Dwfl, elf: *mut Elf)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwfl_linux_proc_attach(dwfl: *mut Dwfl, pid: pid_t,
                                  assume_ptrace_stopped: bool)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwfl_pid(dwfl: *mut Dwfl) -> pid_t;
}
extern "C" {
    pub fn dwfl_thread_dwfl(thread: *mut Dwfl_Thread) -> *mut Dwfl;
}
extern "C" {
    pub fn dwfl_thread_tid(thread: *mut Dwfl_Thread) -> pid_t;
}
extern "C" {
    pub fn dwfl_frame_thread(state: *mut Dwfl_Frame) -> *mut Dwfl_Thread;
}
extern "C" {
    pub fn dwfl_thread_state_registers(thread: *mut Dwfl_Thread,
                                       firstreg: ::std::os::raw::c_int,
                                       nregs: ::std::os::raw::c_uint,
                                       regs: *const Dwarf_Word) -> bool;
}
extern "C" {
    pub fn dwfl_thread_state_register_pc(thread: *mut Dwfl_Thread,
                                         pc: Dwarf_Word);
}
extern "C" {
    pub fn dwfl_getthreads(dwfl: *mut Dwfl,
                           callback:
                               ::std::option::Option<unsafe extern "C" fn(thread:
                                                                              *mut Dwfl_Thread,
                                                                          arg:
                                                                              *mut ::std::os::raw::c_void)
                                                         ->
                                                             ::std::os::raw::c_int>,
                           arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwfl_thread_getframes(thread: *mut Dwfl_Thread,
                                 callback:
                                     ::std::option::Option<unsafe extern "C" fn(state:
                                                                                    *mut Dwfl_Frame,
                                                                                arg:
                                                                                    *mut ::std::os::raw::c_void)
                                                               ->
                                                                   ::std::os::raw::c_int>,
                                 arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwfl_getthread_frames(dwfl: *mut Dwfl, tid: pid_t,
                                 callback:
                                     ::std::option::Option<unsafe extern "C" fn(thread:
                                                                                    *mut Dwfl_Frame,
                                                                                arg:
                                                                                    *mut ::std::os::raw::c_void)
                                                               ->
                                                                   ::std::os::raw::c_int>,
                                 arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwfl_frame_pc(state: *mut Dwfl_Frame, pc: *mut Dwarf_Addr,
                         isactivation: *mut bool) -> bool;
}
extern "C" {
    pub fn dwelf_elf_gnu_debuglink(elf: *mut Elf, crc: *mut GElf_Word)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn dwelf_dwarf_gnu_debugaltlink(dwarf: *mut Dwarf,
                                        namep:
                                            *mut *const ::std::os::raw::c_char,
                                        build_idp:
                                            *mut *const ::std::os::raw::c_void)
     -> isize;
}
extern "C" {
    pub fn dwelf_elf_gnu_build_id(elf: *mut Elf,
                                  build_idp:
                                      *mut *const ::std::os::raw::c_void)
     -> isize;
}
extern "C" {
    pub fn dwelf_scn_gnu_compressed_size(scn: *mut Elf_Scn) -> isize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Dwelf_Strtab {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Dwelf_Strent {
    _unused: [u8; 0],
}
extern "C" {
    pub fn dwelf_strtab_init(nullstr: bool) -> *mut Dwelf_Strtab;
}
extern "C" {
    pub fn dwelf_strtab_add(st: *mut Dwelf_Strtab,
                            str: *const ::std::os::raw::c_char)
     -> *mut Dwelf_Strent;
}
extern "C" {
    pub fn dwelf_strtab_add_len(st: *mut Dwelf_Strtab,
                                str: *const ::std::os::raw::c_char,
                                len: usize) -> *mut Dwelf_Strent;
}
extern "C" {
    pub fn dwelf_strtab_finalize(st: *mut Dwelf_Strtab, data: *mut Elf_Data)
     -> *mut Elf_Data;
}
extern "C" {
    pub fn dwelf_strent_off(se: *mut Dwelf_Strent) -> usize;
}
extern "C" {
    pub fn dwelf_strent_str(se: *mut Dwelf_Strent)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn dwelf_strtab_free(st: *mut Dwelf_Strtab);
}
pub const DW_TAG_array_type: _bindgen_ty_6 = 1;
pub const DW_TAG_class_type: _bindgen_ty_6 = 2;
pub const DW_TAG_entry_point: _bindgen_ty_6 = 3;
pub const DW_TAG_enumeration_type: _bindgen_ty_6 = 4;
pub const DW_TAG_formal_parameter: _bindgen_ty_6 = 5;
pub const DW_TAG_imported_declaration: _bindgen_ty_6 = 8;
pub const DW_TAG_label: _bindgen_ty_6 = 10;
pub const DW_TAG_lexical_block: _bindgen_ty_6 = 11;
pub const DW_TAG_member: _bindgen_ty_6 = 13;
pub const DW_TAG_pointer_type: _bindgen_ty_6 = 15;
pub const DW_TAG_reference_type: _bindgen_ty_6 = 16;
pub const DW_TAG_compile_unit: _bindgen_ty_6 = 17;
pub const DW_TAG_string_type: _bindgen_ty_6 = 18;
pub const DW_TAG_structure_type: _bindgen_ty_6 = 19;
pub const DW_TAG_subroutine_type: _bindgen_ty_6 = 21;
pub const DW_TAG_typedef: _bindgen_ty_6 = 22;
pub const DW_TAG_union_type: _bindgen_ty_6 = 23;
pub const DW_TAG_unspecified_parameters: _bindgen_ty_6 = 24;
pub const DW_TAG_variant: _bindgen_ty_6 = 25;
pub const DW_TAG_common_block: _bindgen_ty_6 = 26;
pub const DW_TAG_common_inclusion: _bindgen_ty_6 = 27;
pub const DW_TAG_inheritance: _bindgen_ty_6 = 28;
pub const DW_TAG_inlined_subroutine: _bindgen_ty_6 = 29;
pub const DW_TAG_module: _bindgen_ty_6 = 30;
pub const DW_TAG_ptr_to_member_type: _bindgen_ty_6 = 31;
pub const DW_TAG_set_type: _bindgen_ty_6 = 32;
pub const DW_TAG_subrange_type: _bindgen_ty_6 = 33;
pub const DW_TAG_with_stmt: _bindgen_ty_6 = 34;
pub const DW_TAG_access_declaration: _bindgen_ty_6 = 35;
pub const DW_TAG_base_type: _bindgen_ty_6 = 36;
pub const DW_TAG_catch_block: _bindgen_ty_6 = 37;
pub const DW_TAG_const_type: _bindgen_ty_6 = 38;
pub const DW_TAG_constant: _bindgen_ty_6 = 39;
pub const DW_TAG_enumerator: _bindgen_ty_6 = 40;
pub const DW_TAG_file_type: _bindgen_ty_6 = 41;
pub const DW_TAG_friend: _bindgen_ty_6 = 42;
pub const DW_TAG_namelist: _bindgen_ty_6 = 43;
pub const DW_TAG_namelist_item: _bindgen_ty_6 = 44;
pub const DW_TAG_packed_type: _bindgen_ty_6 = 45;
pub const DW_TAG_subprogram: _bindgen_ty_6 = 46;
pub const DW_TAG_template_type_parameter: _bindgen_ty_6 = 47;
pub const DW_TAG_template_value_parameter: _bindgen_ty_6 = 48;
pub const DW_TAG_thrown_type: _bindgen_ty_6 = 49;
pub const DW_TAG_try_block: _bindgen_ty_6 = 50;
pub const DW_TAG_variant_part: _bindgen_ty_6 = 51;
pub const DW_TAG_variable: _bindgen_ty_6 = 52;
pub const DW_TAG_volatile_type: _bindgen_ty_6 = 53;
pub const DW_TAG_dwarf_procedure: _bindgen_ty_6 = 54;
pub const DW_TAG_restrict_type: _bindgen_ty_6 = 55;
pub const DW_TAG_interface_type: _bindgen_ty_6 = 56;
pub const DW_TAG_namespace: _bindgen_ty_6 = 57;
pub const DW_TAG_imported_module: _bindgen_ty_6 = 58;
pub const DW_TAG_unspecified_type: _bindgen_ty_6 = 59;
pub const DW_TAG_partial_unit: _bindgen_ty_6 = 60;
pub const DW_TAG_imported_unit: _bindgen_ty_6 = 61;
pub const DW_TAG_condition: _bindgen_ty_6 = 63;
pub const DW_TAG_shared_type: _bindgen_ty_6 = 64;
pub const DW_TAG_type_unit: _bindgen_ty_6 = 65;
pub const DW_TAG_rvalue_reference_type: _bindgen_ty_6 = 66;
pub const DW_TAG_template_alias: _bindgen_ty_6 = 67;
pub const DW_TAG_atomic_type: _bindgen_ty_6 = 71;
pub const DW_TAG_lo_user: _bindgen_ty_6 = 16512;
pub const DW_TAG_MIPS_loop: _bindgen_ty_6 = 16513;
pub const DW_TAG_format_label: _bindgen_ty_6 = 16641;
pub const DW_TAG_function_template: _bindgen_ty_6 = 16642;
pub const DW_TAG_class_template: _bindgen_ty_6 = 16643;
pub const DW_TAG_GNU_BINCL: _bindgen_ty_6 = 16644;
pub const DW_TAG_GNU_EINCL: _bindgen_ty_6 = 16645;
pub const DW_TAG_GNU_template_template_param: _bindgen_ty_6 = 16646;
pub const DW_TAG_GNU_template_parameter_pack: _bindgen_ty_6 = 16647;
pub const DW_TAG_GNU_formal_parameter_pack: _bindgen_ty_6 = 16648;
pub const DW_TAG_GNU_call_site: _bindgen_ty_6 = 16649;
pub const DW_TAG_GNU_call_site_parameter: _bindgen_ty_6 = 16650;
pub const DW_TAG_hi_user: _bindgen_ty_6 = 65535;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
pub const DW_CHILDREN_no: _bindgen_ty_7 = 0;
pub const DW_CHILDREN_yes: _bindgen_ty_7 = 1;
pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
pub const DW_AT_sibling: _bindgen_ty_8 = 1;
pub const DW_AT_location: _bindgen_ty_8 = 2;
pub const DW_AT_name: _bindgen_ty_8 = 3;
pub const DW_AT_ordering: _bindgen_ty_8 = 9;
pub const DW_AT_subscr_data: _bindgen_ty_8 = 10;
pub const DW_AT_byte_size: _bindgen_ty_8 = 11;
pub const DW_AT_bit_offset: _bindgen_ty_8 = 12;
pub const DW_AT_bit_size: _bindgen_ty_8 = 13;
pub const DW_AT_element_list: _bindgen_ty_8 = 15;
pub const DW_AT_stmt_list: _bindgen_ty_8 = 16;
pub const DW_AT_low_pc: _bindgen_ty_8 = 17;
pub const DW_AT_high_pc: _bindgen_ty_8 = 18;
pub const DW_AT_language: _bindgen_ty_8 = 19;
pub const DW_AT_member: _bindgen_ty_8 = 20;
pub const DW_AT_discr: _bindgen_ty_8 = 21;
pub const DW_AT_discr_value: _bindgen_ty_8 = 22;
pub const DW_AT_visibility: _bindgen_ty_8 = 23;
pub const DW_AT_import: _bindgen_ty_8 = 24;
pub const DW_AT_string_length: _bindgen_ty_8 = 25;
pub const DW_AT_common_reference: _bindgen_ty_8 = 26;
pub const DW_AT_comp_dir: _bindgen_ty_8 = 27;
pub const DW_AT_const_value: _bindgen_ty_8 = 28;
pub const DW_AT_containing_type: _bindgen_ty_8 = 29;
pub const DW_AT_default_value: _bindgen_ty_8 = 30;
pub const DW_AT_inline: _bindgen_ty_8 = 32;
pub const DW_AT_is_optional: _bindgen_ty_8 = 33;
pub const DW_AT_lower_bound: _bindgen_ty_8 = 34;
pub const DW_AT_producer: _bindgen_ty_8 = 37;
pub const DW_AT_prototyped: _bindgen_ty_8 = 39;
pub const DW_AT_return_addr: _bindgen_ty_8 = 42;
pub const DW_AT_start_scope: _bindgen_ty_8 = 44;
pub const DW_AT_bit_stride: _bindgen_ty_8 = 46;
pub const DW_AT_upper_bound: _bindgen_ty_8 = 47;
pub const DW_AT_abstract_origin: _bindgen_ty_8 = 49;
pub const DW_AT_accessibility: _bindgen_ty_8 = 50;
pub const DW_AT_address_class: _bindgen_ty_8 = 51;
pub const DW_AT_artificial: _bindgen_ty_8 = 52;
pub const DW_AT_base_types: _bindgen_ty_8 = 53;
pub const DW_AT_calling_convention: _bindgen_ty_8 = 54;
pub const DW_AT_count: _bindgen_ty_8 = 55;
pub const DW_AT_data_member_location: _bindgen_ty_8 = 56;
pub const DW_AT_decl_column: _bindgen_ty_8 = 57;
pub const DW_AT_decl_file: _bindgen_ty_8 = 58;
pub const DW_AT_decl_line: _bindgen_ty_8 = 59;
pub const DW_AT_declaration: _bindgen_ty_8 = 60;
pub const DW_AT_discr_list: _bindgen_ty_8 = 61;
pub const DW_AT_encoding: _bindgen_ty_8 = 62;
pub const DW_AT_external: _bindgen_ty_8 = 63;
pub const DW_AT_frame_base: _bindgen_ty_8 = 64;
pub const DW_AT_friend: _bindgen_ty_8 = 65;
pub const DW_AT_identifier_case: _bindgen_ty_8 = 66;
pub const DW_AT_macro_info: _bindgen_ty_8 = 67;
pub const DW_AT_namelist_item: _bindgen_ty_8 = 68;
pub const DW_AT_priority: _bindgen_ty_8 = 69;
pub const DW_AT_segment: _bindgen_ty_8 = 70;
pub const DW_AT_specification: _bindgen_ty_8 = 71;
pub const DW_AT_static_link: _bindgen_ty_8 = 72;
pub const DW_AT_type: _bindgen_ty_8 = 73;
pub const DW_AT_use_location: _bindgen_ty_8 = 74;
pub const DW_AT_variable_parameter: _bindgen_ty_8 = 75;
pub const DW_AT_virtuality: _bindgen_ty_8 = 76;
pub const DW_AT_vtable_elem_location: _bindgen_ty_8 = 77;
pub const DW_AT_allocated: _bindgen_ty_8 = 78;
pub const DW_AT_associated: _bindgen_ty_8 = 79;
pub const DW_AT_data_location: _bindgen_ty_8 = 80;
pub const DW_AT_byte_stride: _bindgen_ty_8 = 81;
pub const DW_AT_entry_pc: _bindgen_ty_8 = 82;
pub const DW_AT_use_UTF8: _bindgen_ty_8 = 83;
pub const DW_AT_extension: _bindgen_ty_8 = 84;
pub const DW_AT_ranges: _bindgen_ty_8 = 85;
pub const DW_AT_trampoline: _bindgen_ty_8 = 86;
pub const DW_AT_call_column: _bindgen_ty_8 = 87;
pub const DW_AT_call_file: _bindgen_ty_8 = 88;
pub const DW_AT_call_line: _bindgen_ty_8 = 89;
pub const DW_AT_description: _bindgen_ty_8 = 90;
pub const DW_AT_binary_scale: _bindgen_ty_8 = 91;
pub const DW_AT_decimal_scale: _bindgen_ty_8 = 92;
pub const DW_AT_small: _bindgen_ty_8 = 93;
pub const DW_AT_decimal_sign: _bindgen_ty_8 = 94;
pub const DW_AT_digit_count: _bindgen_ty_8 = 95;
pub const DW_AT_picture_string: _bindgen_ty_8 = 96;
pub const DW_AT_mutable: _bindgen_ty_8 = 97;
pub const DW_AT_threads_scaled: _bindgen_ty_8 = 98;
pub const DW_AT_explicit: _bindgen_ty_8 = 99;
pub const DW_AT_object_pointer: _bindgen_ty_8 = 100;
pub const DW_AT_endianity: _bindgen_ty_8 = 101;
pub const DW_AT_elemental: _bindgen_ty_8 = 102;
pub const DW_AT_pure: _bindgen_ty_8 = 103;
pub const DW_AT_recursive: _bindgen_ty_8 = 104;
pub const DW_AT_signature: _bindgen_ty_8 = 105;
pub const DW_AT_main_subprogram: _bindgen_ty_8 = 106;
pub const DW_AT_data_bit_offset: _bindgen_ty_8 = 107;
pub const DW_AT_const_expr: _bindgen_ty_8 = 108;
pub const DW_AT_enum_class: _bindgen_ty_8 = 109;
pub const DW_AT_linkage_name: _bindgen_ty_8 = 110;
pub const DW_AT_noreturn: _bindgen_ty_8 = 135;
pub const DW_AT_lo_user: _bindgen_ty_8 = 8192;
pub const DW_AT_MIPS_fde: _bindgen_ty_8 = 8193;
pub const DW_AT_MIPS_loop_begin: _bindgen_ty_8 = 8194;
pub const DW_AT_MIPS_tail_loop_begin: _bindgen_ty_8 = 8195;
pub const DW_AT_MIPS_epilog_begin: _bindgen_ty_8 = 8196;
pub const DW_AT_MIPS_loop_unroll_factor: _bindgen_ty_8 = 8197;
pub const DW_AT_MIPS_software_pipeline_depth: _bindgen_ty_8 = 8198;
pub const DW_AT_MIPS_linkage_name: _bindgen_ty_8 = 8199;
pub const DW_AT_MIPS_stride: _bindgen_ty_8 = 8200;
pub const DW_AT_MIPS_abstract_name: _bindgen_ty_8 = 8201;
pub const DW_AT_MIPS_clone_origin: _bindgen_ty_8 = 8202;
pub const DW_AT_MIPS_has_inlines: _bindgen_ty_8 = 8203;
pub const DW_AT_MIPS_stride_byte: _bindgen_ty_8 = 8204;
pub const DW_AT_MIPS_stride_elem: _bindgen_ty_8 = 8205;
pub const DW_AT_MIPS_ptr_dopetype: _bindgen_ty_8 = 8206;
pub const DW_AT_MIPS_allocatable_dopetype: _bindgen_ty_8 = 8207;
pub const DW_AT_MIPS_assumed_shape_dopetype: _bindgen_ty_8 = 8208;
pub const DW_AT_MIPS_assumed_size: _bindgen_ty_8 = 8209;
pub const DW_AT_sf_names: _bindgen_ty_8 = 8449;
pub const DW_AT_src_info: _bindgen_ty_8 = 8450;
pub const DW_AT_mac_info: _bindgen_ty_8 = 8451;
pub const DW_AT_src_coords: _bindgen_ty_8 = 8452;
pub const DW_AT_body_begin: _bindgen_ty_8 = 8453;
pub const DW_AT_body_end: _bindgen_ty_8 = 8454;
pub const DW_AT_GNU_vector: _bindgen_ty_8 = 8455;
pub const DW_AT_GNU_guarded_by: _bindgen_ty_8 = 8456;
pub const DW_AT_GNU_pt_guarded_by: _bindgen_ty_8 = 8457;
pub const DW_AT_GNU_guarded: _bindgen_ty_8 = 8458;
pub const DW_AT_GNU_pt_guarded: _bindgen_ty_8 = 8459;
pub const DW_AT_GNU_locks_excluded: _bindgen_ty_8 = 8460;
pub const DW_AT_GNU_exclusive_locks_required: _bindgen_ty_8 = 8461;
pub const DW_AT_GNU_shared_locks_required: _bindgen_ty_8 = 8462;
pub const DW_AT_GNU_odr_signature: _bindgen_ty_8 = 8463;
pub const DW_AT_GNU_template_name: _bindgen_ty_8 = 8464;
pub const DW_AT_GNU_call_site_value: _bindgen_ty_8 = 8465;
pub const DW_AT_GNU_call_site_data_value: _bindgen_ty_8 = 8466;
pub const DW_AT_GNU_call_site_target: _bindgen_ty_8 = 8467;
pub const DW_AT_GNU_call_site_target_clobbered: _bindgen_ty_8 = 8468;
pub const DW_AT_GNU_tail_call: _bindgen_ty_8 = 8469;
pub const DW_AT_GNU_all_tail_call_sites: _bindgen_ty_8 = 8470;
pub const DW_AT_GNU_all_call_sites: _bindgen_ty_8 = 8471;
pub const DW_AT_GNU_all_source_call_sites: _bindgen_ty_8 = 8472;
pub const DW_AT_GNU_macros: _bindgen_ty_8 = 8473;
pub const DW_AT_GNU_deleted: _bindgen_ty_8 = 8474;
pub const DW_AT_hi_user: _bindgen_ty_8 = 16383;
pub type _bindgen_ty_8 = ::std::os::raw::c_uint;
pub const DW_FORM_addr: _bindgen_ty_9 = 1;
pub const DW_FORM_block2: _bindgen_ty_9 = 3;
pub const DW_FORM_block4: _bindgen_ty_9 = 4;
pub const DW_FORM_data2: _bindgen_ty_9 = 5;
pub const DW_FORM_data4: _bindgen_ty_9 = 6;
pub const DW_FORM_data8: _bindgen_ty_9 = 7;
pub const DW_FORM_string: _bindgen_ty_9 = 8;
pub const DW_FORM_block: _bindgen_ty_9 = 9;
pub const DW_FORM_block1: _bindgen_ty_9 = 10;
pub const DW_FORM_data1: _bindgen_ty_9 = 11;
pub const DW_FORM_flag: _bindgen_ty_9 = 12;
pub const DW_FORM_sdata: _bindgen_ty_9 = 13;
pub const DW_FORM_strp: _bindgen_ty_9 = 14;
pub const DW_FORM_udata: _bindgen_ty_9 = 15;
pub const DW_FORM_ref_addr: _bindgen_ty_9 = 16;
pub const DW_FORM_ref1: _bindgen_ty_9 = 17;
pub const DW_FORM_ref2: _bindgen_ty_9 = 18;
pub const DW_FORM_ref4: _bindgen_ty_9 = 19;
pub const DW_FORM_ref8: _bindgen_ty_9 = 20;
pub const DW_FORM_ref_udata: _bindgen_ty_9 = 21;
pub const DW_FORM_indirect: _bindgen_ty_9 = 22;
pub const DW_FORM_sec_offset: _bindgen_ty_9 = 23;
pub const DW_FORM_exprloc: _bindgen_ty_9 = 24;
pub const DW_FORM_flag_present: _bindgen_ty_9 = 25;
pub const DW_FORM_ref_sig8: _bindgen_ty_9 = 32;
pub const DW_FORM_GNU_ref_alt: _bindgen_ty_9 = 7968;
pub const DW_FORM_GNU_strp_alt: _bindgen_ty_9 = 7969;
pub type _bindgen_ty_9 = ::std::os::raw::c_uint;
pub const DW_OP_addr: _bindgen_ty_10 = 3;
pub const DW_OP_deref: _bindgen_ty_10 = 6;
pub const DW_OP_const1u: _bindgen_ty_10 = 8;
pub const DW_OP_const1s: _bindgen_ty_10 = 9;
pub const DW_OP_const2u: _bindgen_ty_10 = 10;
pub const DW_OP_const2s: _bindgen_ty_10 = 11;
pub const DW_OP_const4u: _bindgen_ty_10 = 12;
pub const DW_OP_const4s: _bindgen_ty_10 = 13;
pub const DW_OP_const8u: _bindgen_ty_10 = 14;
pub const DW_OP_const8s: _bindgen_ty_10 = 15;
pub const DW_OP_constu: _bindgen_ty_10 = 16;
pub const DW_OP_consts: _bindgen_ty_10 = 17;
pub const DW_OP_dup: _bindgen_ty_10 = 18;
pub const DW_OP_drop: _bindgen_ty_10 = 19;
pub const DW_OP_over: _bindgen_ty_10 = 20;
pub const DW_OP_pick: _bindgen_ty_10 = 21;
pub const DW_OP_swap: _bindgen_ty_10 = 22;
pub const DW_OP_rot: _bindgen_ty_10 = 23;
pub const DW_OP_xderef: _bindgen_ty_10 = 24;
pub const DW_OP_abs: _bindgen_ty_10 = 25;
pub const DW_OP_and: _bindgen_ty_10 = 26;
pub const DW_OP_div: _bindgen_ty_10 = 27;
pub const DW_OP_minus: _bindgen_ty_10 = 28;
pub const DW_OP_mod: _bindgen_ty_10 = 29;
pub const DW_OP_mul: _bindgen_ty_10 = 30;
pub const DW_OP_neg: _bindgen_ty_10 = 31;
pub const DW_OP_not: _bindgen_ty_10 = 32;
pub const DW_OP_or: _bindgen_ty_10 = 33;
pub const DW_OP_plus: _bindgen_ty_10 = 34;
pub const DW_OP_plus_uconst: _bindgen_ty_10 = 35;
pub const DW_OP_shl: _bindgen_ty_10 = 36;
pub const DW_OP_shr: _bindgen_ty_10 = 37;
pub const DW_OP_shra: _bindgen_ty_10 = 38;
pub const DW_OP_xor: _bindgen_ty_10 = 39;
pub const DW_OP_bra: _bindgen_ty_10 = 40;
pub const DW_OP_eq: _bindgen_ty_10 = 41;
pub const DW_OP_ge: _bindgen_ty_10 = 42;
pub const DW_OP_gt: _bindgen_ty_10 = 43;
pub const DW_OP_le: _bindgen_ty_10 = 44;
pub const DW_OP_lt: _bindgen_ty_10 = 45;
pub const DW_OP_ne: _bindgen_ty_10 = 46;
pub const DW_OP_skip: _bindgen_ty_10 = 47;
pub const DW_OP_lit0: _bindgen_ty_10 = 48;
pub const DW_OP_lit1: _bindgen_ty_10 = 49;
pub const DW_OP_lit2: _bindgen_ty_10 = 50;
pub const DW_OP_lit3: _bindgen_ty_10 = 51;
pub const DW_OP_lit4: _bindgen_ty_10 = 52;
pub const DW_OP_lit5: _bindgen_ty_10 = 53;
pub const DW_OP_lit6: _bindgen_ty_10 = 54;
pub const DW_OP_lit7: _bindgen_ty_10 = 55;
pub const DW_OP_lit8: _bindgen_ty_10 = 56;
pub const DW_OP_lit9: _bindgen_ty_10 = 57;
pub const DW_OP_lit10: _bindgen_ty_10 = 58;
pub const DW_OP_lit11: _bindgen_ty_10 = 59;
pub const DW_OP_lit12: _bindgen_ty_10 = 60;
pub const DW_OP_lit13: _bindgen_ty_10 = 61;
pub const DW_OP_lit14: _bindgen_ty_10 = 62;
pub const DW_OP_lit15: _bindgen_ty_10 = 63;
pub const DW_OP_lit16: _bindgen_ty_10 = 64;
pub const DW_OP_lit17: _bindgen_ty_10 = 65;
pub const DW_OP_lit18: _bindgen_ty_10 = 66;
pub const DW_OP_lit19: _bindgen_ty_10 = 67;
pub const DW_OP_lit20: _bindgen_ty_10 = 68;
pub const DW_OP_lit21: _bindgen_ty_10 = 69;
pub const DW_OP_lit22: _bindgen_ty_10 = 70;
pub const DW_OP_lit23: _bindgen_ty_10 = 71;
pub const DW_OP_lit24: _bindgen_ty_10 = 72;
pub const DW_OP_lit25: _bindgen_ty_10 = 73;
pub const DW_OP_lit26: _bindgen_ty_10 = 74;
pub const DW_OP_lit27: _bindgen_ty_10 = 75;
pub const DW_OP_lit28: _bindgen_ty_10 = 76;
pub const DW_OP_lit29: _bindgen_ty_10 = 77;
pub const DW_OP_lit30: _bindgen_ty_10 = 78;
pub const DW_OP_lit31: _bindgen_ty_10 = 79;
pub const DW_OP_reg0: _bindgen_ty_10 = 80;
pub const DW_OP_reg1: _bindgen_ty_10 = 81;
pub const DW_OP_reg2: _bindgen_ty_10 = 82;
pub const DW_OP_reg3: _bindgen_ty_10 = 83;
pub const DW_OP_reg4: _bindgen_ty_10 = 84;
pub const DW_OP_reg5: _bindgen_ty_10 = 85;
pub const DW_OP_reg6: _bindgen_ty_10 = 86;
pub const DW_OP_reg7: _bindgen_ty_10 = 87;
pub const DW_OP_reg8: _bindgen_ty_10 = 88;
pub const DW_OP_reg9: _bindgen_ty_10 = 89;
pub const DW_OP_reg10: _bindgen_ty_10 = 90;
pub const DW_OP_reg11: _bindgen_ty_10 = 91;
pub const DW_OP_reg12: _bindgen_ty_10 = 92;
pub const DW_OP_reg13: _bindgen_ty_10 = 93;
pub const DW_OP_reg14: _bindgen_ty_10 = 94;
pub const DW_OP_reg15: _bindgen_ty_10 = 95;
pub const DW_OP_reg16: _bindgen_ty_10 = 96;
pub const DW_OP_reg17: _bindgen_ty_10 = 97;
pub const DW_OP_reg18: _bindgen_ty_10 = 98;
pub const DW_OP_reg19: _bindgen_ty_10 = 99;
pub const DW_OP_reg20: _bindgen_ty_10 = 100;
pub const DW_OP_reg21: _bindgen_ty_10 = 101;
pub const DW_OP_reg22: _bindgen_ty_10 = 102;
pub const DW_OP_reg23: _bindgen_ty_10 = 103;
pub const DW_OP_reg24: _bindgen_ty_10 = 104;
pub const DW_OP_reg25: _bindgen_ty_10 = 105;
pub const DW_OP_reg26: _bindgen_ty_10 = 106;
pub const DW_OP_reg27: _bindgen_ty_10 = 107;
pub const DW_OP_reg28: _bindgen_ty_10 = 108;
pub const DW_OP_reg29: _bindgen_ty_10 = 109;
pub const DW_OP_reg30: _bindgen_ty_10 = 110;
pub const DW_OP_reg31: _bindgen_ty_10 = 111;
pub const DW_OP_breg0: _bindgen_ty_10 = 112;
pub const DW_OP_breg1: _bindgen_ty_10 = 113;
pub const DW_OP_breg2: _bindgen_ty_10 = 114;
pub const DW_OP_breg3: _bindgen_ty_10 = 115;
pub const DW_OP_breg4: _bindgen_ty_10 = 116;
pub const DW_OP_breg5: _bindgen_ty_10 = 117;
pub const DW_OP_breg6: _bindgen_ty_10 = 118;
pub const DW_OP_breg7: _bindgen_ty_10 = 119;
pub const DW_OP_breg8: _bindgen_ty_10 = 120;
pub const DW_OP_breg9: _bindgen_ty_10 = 121;
pub const DW_OP_breg10: _bindgen_ty_10 = 122;
pub const DW_OP_breg11: _bindgen_ty_10 = 123;
pub const DW_OP_breg12: _bindgen_ty_10 = 124;
pub const DW_OP_breg13: _bindgen_ty_10 = 125;
pub const DW_OP_breg14: _bindgen_ty_10 = 126;
pub const DW_OP_breg15: _bindgen_ty_10 = 127;
pub const DW_OP_breg16: _bindgen_ty_10 = 128;
pub const DW_OP_breg17: _bindgen_ty_10 = 129;
pub const DW_OP_breg18: _bindgen_ty_10 = 130;
pub const DW_OP_breg19: _bindgen_ty_10 = 131;
pub const DW_OP_breg20: _bindgen_ty_10 = 132;
pub const DW_OP_breg21: _bindgen_ty_10 = 133;
pub const DW_OP_breg22: _bindgen_ty_10 = 134;
pub const DW_OP_breg23: _bindgen_ty_10 = 135;
pub const DW_OP_breg24: _bindgen_ty_10 = 136;
pub const DW_OP_breg25: _bindgen_ty_10 = 137;
pub const DW_OP_breg26: _bindgen_ty_10 = 138;
pub const DW_OP_breg27: _bindgen_ty_10 = 139;
pub const DW_OP_breg28: _bindgen_ty_10 = 140;
pub const DW_OP_breg29: _bindgen_ty_10 = 141;
pub const DW_OP_breg30: _bindgen_ty_10 = 142;
pub const DW_OP_breg31: _bindgen_ty_10 = 143;
pub const DW_OP_regx: _bindgen_ty_10 = 144;
pub const DW_OP_fbreg: _bindgen_ty_10 = 145;
pub const DW_OP_bregx: _bindgen_ty_10 = 146;
pub const DW_OP_piece: _bindgen_ty_10 = 147;
pub const DW_OP_deref_size: _bindgen_ty_10 = 148;
pub const DW_OP_xderef_size: _bindgen_ty_10 = 149;
pub const DW_OP_nop: _bindgen_ty_10 = 150;
pub const DW_OP_push_object_address: _bindgen_ty_10 = 151;
pub const DW_OP_call2: _bindgen_ty_10 = 152;
pub const DW_OP_call4: _bindgen_ty_10 = 153;
pub const DW_OP_call_ref: _bindgen_ty_10 = 154;
pub const DW_OP_form_tls_address: _bindgen_ty_10 = 155;
pub const DW_OP_call_frame_cfa: _bindgen_ty_10 = 156;
pub const DW_OP_bit_piece: _bindgen_ty_10 = 157;
pub const DW_OP_implicit_value: _bindgen_ty_10 = 158;
pub const DW_OP_stack_value: _bindgen_ty_10 = 159;
pub const DW_OP_GNU_push_tls_address: _bindgen_ty_10 = 224;
pub const DW_OP_GNU_uninit: _bindgen_ty_10 = 240;
pub const DW_OP_GNU_encoded_addr: _bindgen_ty_10 = 241;
pub const DW_OP_GNU_implicit_pointer: _bindgen_ty_10 = 242;
pub const DW_OP_GNU_entry_value: _bindgen_ty_10 = 243;
pub const DW_OP_GNU_const_type: _bindgen_ty_10 = 244;
pub const DW_OP_GNU_regval_type: _bindgen_ty_10 = 245;
pub const DW_OP_GNU_deref_type: _bindgen_ty_10 = 246;
pub const DW_OP_GNU_convert: _bindgen_ty_10 = 247;
pub const DW_OP_GNU_reinterpret: _bindgen_ty_10 = 249;
pub const DW_OP_GNU_parameter_ref: _bindgen_ty_10 = 250;
pub const DW_OP_lo_user: _bindgen_ty_10 = 224;
pub const DW_OP_hi_user: _bindgen_ty_10 = 255;
pub type _bindgen_ty_10 = ::std::os::raw::c_uint;
pub const DW_ATE_void: _bindgen_ty_11 = 0;
pub const DW_ATE_address: _bindgen_ty_11 = 1;
pub const DW_ATE_boolean: _bindgen_ty_11 = 2;
pub const DW_ATE_complex_float: _bindgen_ty_11 = 3;
pub const DW_ATE_float: _bindgen_ty_11 = 4;
pub const DW_ATE_signed: _bindgen_ty_11 = 5;
pub const DW_ATE_signed_char: _bindgen_ty_11 = 6;
pub const DW_ATE_unsigned: _bindgen_ty_11 = 7;
pub const DW_ATE_unsigned_char: _bindgen_ty_11 = 8;
pub const DW_ATE_imaginary_float: _bindgen_ty_11 = 9;
pub const DW_ATE_packed_decimal: _bindgen_ty_11 = 10;
pub const DW_ATE_numeric_string: _bindgen_ty_11 = 11;
pub const DW_ATE_edited: _bindgen_ty_11 = 12;
pub const DW_ATE_signed_fixed: _bindgen_ty_11 = 13;
pub const DW_ATE_unsigned_fixed: _bindgen_ty_11 = 14;
pub const DW_ATE_decimal_float: _bindgen_ty_11 = 15;
pub const DW_ATE_UTF: _bindgen_ty_11 = 16;
pub const DW_ATE_lo_user: _bindgen_ty_11 = 128;
pub const DW_ATE_hi_user: _bindgen_ty_11 = 255;
pub type _bindgen_ty_11 = ::std::os::raw::c_uint;
pub const DW_DS_unsigned: _bindgen_ty_12 = 1;
pub const DW_DS_leading_overpunch: _bindgen_ty_12 = 2;
pub const DW_DS_trailing_overpunch: _bindgen_ty_12 = 3;
pub const DW_DS_leading_separate: _bindgen_ty_12 = 4;
pub const DW_DS_trailing_separate: _bindgen_ty_12 = 5;
pub type _bindgen_ty_12 = ::std::os::raw::c_uint;
pub const DW_END_default: _bindgen_ty_13 = 0;
pub const DW_END_big: _bindgen_ty_13 = 1;
pub const DW_END_little: _bindgen_ty_13 = 2;
pub const DW_END_lo_user: _bindgen_ty_13 = 64;
pub const DW_END_hi_user: _bindgen_ty_13 = 255;
pub type _bindgen_ty_13 = ::std::os::raw::c_uint;
pub const DW_ACCESS_public: _bindgen_ty_14 = 1;
pub const DW_ACCESS_protected: _bindgen_ty_14 = 2;
pub const DW_ACCESS_private: _bindgen_ty_14 = 3;
pub type _bindgen_ty_14 = ::std::os::raw::c_uint;
pub const DW_VIS_local: _bindgen_ty_15 = 1;
pub const DW_VIS_exported: _bindgen_ty_15 = 2;
pub const DW_VIS_qualified: _bindgen_ty_15 = 3;
pub type _bindgen_ty_15 = ::std::os::raw::c_uint;
pub const DW_VIRTUALITY_none: _bindgen_ty_16 = 0;
pub const DW_VIRTUALITY_virtual: _bindgen_ty_16 = 1;
pub const DW_VIRTUALITY_pure_virtual: _bindgen_ty_16 = 2;
pub type _bindgen_ty_16 = ::std::os::raw::c_uint;
pub const DW_LANG_C89: _bindgen_ty_17 = 1;
pub const DW_LANG_C: _bindgen_ty_17 = 2;
pub const DW_LANG_Ada83: _bindgen_ty_17 = 3;
pub const DW_LANG_C_plus_plus: _bindgen_ty_17 = 4;
pub const DW_LANG_Cobol74: _bindgen_ty_17 = 5;
pub const DW_LANG_Cobol85: _bindgen_ty_17 = 6;
pub const DW_LANG_Fortran77: _bindgen_ty_17 = 7;
pub const DW_LANG_Fortran90: _bindgen_ty_17 = 8;
pub const DW_LANG_Pascal83: _bindgen_ty_17 = 9;
pub const DW_LANG_Modula2: _bindgen_ty_17 = 10;
pub const DW_LANG_Java: _bindgen_ty_17 = 11;
pub const DW_LANG_C99: _bindgen_ty_17 = 12;
pub const DW_LANG_Ada95: _bindgen_ty_17 = 13;
pub const DW_LANG_Fortran95: _bindgen_ty_17 = 14;
pub const DW_LANG_PLI: _bindgen_ty_17 = 15;
pub const DW_LANG_ObjC: _bindgen_ty_17 = 16;
pub const DW_LANG_ObjC_plus_plus: _bindgen_ty_17 = 17;
pub const DW_LANG_UPC: _bindgen_ty_17 = 18;
pub const DW_LANG_D: _bindgen_ty_17 = 19;
pub const DW_LANG_Python: _bindgen_ty_17 = 20;
pub const DW_LANG_Go: _bindgen_ty_17 = 22;
pub const DW_LANG_Haskell: _bindgen_ty_17 = 24;
pub const DW_LANG_C_plus_plus_11: _bindgen_ty_17 = 26;
pub const DW_LANG_C11: _bindgen_ty_17 = 29;
pub const DW_LANG_C_plus_plus_14: _bindgen_ty_17 = 33;
pub const DW_LANG_Fortran03: _bindgen_ty_17 = 34;
pub const DW_LANG_Fortran08: _bindgen_ty_17 = 35;
pub const DW_LANG_lo_user: _bindgen_ty_17 = 32768;
pub const DW_LANG_Mips_Assembler: _bindgen_ty_17 = 32769;
pub const DW_LANG_hi_user: _bindgen_ty_17 = 65535;
pub type _bindgen_ty_17 = ::std::os::raw::c_uint;
pub const DW_ID_case_sensitive: _bindgen_ty_18 = 0;
pub const DW_ID_up_case: _bindgen_ty_18 = 1;
pub const DW_ID_down_case: _bindgen_ty_18 = 2;
pub const DW_ID_case_insensitive: _bindgen_ty_18 = 3;
pub type _bindgen_ty_18 = ::std::os::raw::c_uint;
pub const DW_CC_normal: _bindgen_ty_19 = 1;
pub const DW_CC_program: _bindgen_ty_19 = 2;
pub const DW_CC_nocall: _bindgen_ty_19 = 3;
pub const DW_CC_lo_user: _bindgen_ty_19 = 64;
pub const DW_CC_hi_user: _bindgen_ty_19 = 255;
pub type _bindgen_ty_19 = ::std::os::raw::c_uint;
pub const DW_INL_not_inlined: _bindgen_ty_20 = 0;
pub const DW_INL_inlined: _bindgen_ty_20 = 1;
pub const DW_INL_declared_not_inlined: _bindgen_ty_20 = 2;
pub const DW_INL_declared_inlined: _bindgen_ty_20 = 3;
pub type _bindgen_ty_20 = ::std::os::raw::c_uint;
pub const DW_ORD_row_major: _bindgen_ty_21 = 0;
pub const DW_ORD_col_major: _bindgen_ty_21 = 1;
pub type _bindgen_ty_21 = ::std::os::raw::c_uint;
pub const DW_DSC_label: _bindgen_ty_22 = 0;
pub const DW_DSC_range: _bindgen_ty_22 = 1;
pub type _bindgen_ty_22 = ::std::os::raw::c_uint;
pub const DW_LNS_copy: _bindgen_ty_23 = 1;
pub const DW_LNS_advance_pc: _bindgen_ty_23 = 2;
pub const DW_LNS_advance_line: _bindgen_ty_23 = 3;
pub const DW_LNS_set_file: _bindgen_ty_23 = 4;
pub const DW_LNS_set_column: _bindgen_ty_23 = 5;
pub const DW_LNS_negate_stmt: _bindgen_ty_23 = 6;
pub const DW_LNS_set_basic_block: _bindgen_ty_23 = 7;
pub const DW_LNS_const_add_pc: _bindgen_ty_23 = 8;
pub const DW_LNS_fixed_advance_pc: _bindgen_ty_23 = 9;
pub const DW_LNS_set_prologue_end: _bindgen_ty_23 = 10;
pub const DW_LNS_set_epilogue_begin: _bindgen_ty_23 = 11;
pub const DW_LNS_set_isa: _bindgen_ty_23 = 12;
pub type _bindgen_ty_23 = ::std::os::raw::c_uint;
pub const DW_LNE_end_sequence: _bindgen_ty_24 = 1;
pub const DW_LNE_set_address: _bindgen_ty_24 = 2;
pub const DW_LNE_define_file: _bindgen_ty_24 = 3;
pub const DW_LNE_set_discriminator: _bindgen_ty_24 = 4;
pub const DW_LNE_lo_user: _bindgen_ty_24 = 128;
pub const DW_LNE_hi_user: _bindgen_ty_24 = 255;
pub type _bindgen_ty_24 = ::std::os::raw::c_uint;
pub const DW_MACINFO_define: _bindgen_ty_25 = 1;
pub const DW_MACINFO_undef: _bindgen_ty_25 = 2;
pub const DW_MACINFO_start_file: _bindgen_ty_25 = 3;
pub const DW_MACINFO_end_file: _bindgen_ty_25 = 4;
pub const DW_MACINFO_vendor_ext: _bindgen_ty_25 = 255;
pub type _bindgen_ty_25 = ::std::os::raw::c_uint;
pub const DW_MACRO_GNU_define: _bindgen_ty_26 = 1;
pub const DW_MACRO_GNU_undef: _bindgen_ty_26 = 2;
pub const DW_MACRO_GNU_start_file: _bindgen_ty_26 = 3;
pub const DW_MACRO_GNU_end_file: _bindgen_ty_26 = 4;
pub const DW_MACRO_GNU_define_indirect: _bindgen_ty_26 = 5;
pub const DW_MACRO_GNU_undef_indirect: _bindgen_ty_26 = 6;
pub const DW_MACRO_GNU_transparent_include: _bindgen_ty_26 = 7;
pub const DW_MACRO_GNU_lo_user: _bindgen_ty_26 = 224;
pub const DW_MACRO_GNU_hi_user: _bindgen_ty_26 = 255;
pub type _bindgen_ty_26 = ::std::os::raw::c_uint;
pub const DW_CFA_advance_loc: _bindgen_ty_27 = 64;
pub const DW_CFA_offset: _bindgen_ty_27 = 128;
pub const DW_CFA_restore: _bindgen_ty_27 = 192;
pub const DW_CFA_extended: _bindgen_ty_27 = 0;
pub const DW_CFA_nop: _bindgen_ty_27 = 0;
pub const DW_CFA_set_loc: _bindgen_ty_27 = 1;
pub const DW_CFA_advance_loc1: _bindgen_ty_27 = 2;
pub const DW_CFA_advance_loc2: _bindgen_ty_27 = 3;
pub const DW_CFA_advance_loc4: _bindgen_ty_27 = 4;
pub const DW_CFA_offset_extended: _bindgen_ty_27 = 5;
pub const DW_CFA_restore_extended: _bindgen_ty_27 = 6;
pub const DW_CFA_undefined: _bindgen_ty_27 = 7;
pub const DW_CFA_same_value: _bindgen_ty_27 = 8;
pub const DW_CFA_register: _bindgen_ty_27 = 9;
pub const DW_CFA_remember_state: _bindgen_ty_27 = 10;
pub const DW_CFA_restore_state: _bindgen_ty_27 = 11;
pub const DW_CFA_def_cfa: _bindgen_ty_27 = 12;
pub const DW_CFA_def_cfa_register: _bindgen_ty_27 = 13;
pub const DW_CFA_def_cfa_offset: _bindgen_ty_27 = 14;
pub const DW_CFA_def_cfa_expression: _bindgen_ty_27 = 15;
pub const DW_CFA_expression: _bindgen_ty_27 = 16;
pub const DW_CFA_offset_extended_sf: _bindgen_ty_27 = 17;
pub const DW_CFA_def_cfa_sf: _bindgen_ty_27 = 18;
pub const DW_CFA_def_cfa_offset_sf: _bindgen_ty_27 = 19;
pub const DW_CFA_val_offset: _bindgen_ty_27 = 20;
pub const DW_CFA_val_offset_sf: _bindgen_ty_27 = 21;
pub const DW_CFA_val_expression: _bindgen_ty_27 = 22;
pub const DW_CFA_low_user: _bindgen_ty_27 = 28;
pub const DW_CFA_MIPS_advance_loc8: _bindgen_ty_27 = 29;
pub const DW_CFA_GNU_window_save: _bindgen_ty_27 = 45;
pub const DW_CFA_GNU_args_size: _bindgen_ty_27 = 46;
pub const DW_CFA_GNU_negative_offset_extended: _bindgen_ty_27 = 47;
pub const DW_CFA_high_user: _bindgen_ty_27 = 63;
pub type _bindgen_ty_27 = ::std::os::raw::c_uint;
pub const DW_CIE_ID_32: _bindgen_ty_28 = 4294967295;
pub const DW_CIE_ID_64: _bindgen_ty_28 = 18446744073709551615;
pub type _bindgen_ty_28 = ::std::os::raw::c_ulong;
pub const DW_EH_PE_absptr: _bindgen_ty_29 = 0;
pub const DW_EH_PE_omit: _bindgen_ty_29 = 255;
pub const DW_EH_PE_uleb128: _bindgen_ty_29 = 1;
pub const DW_EH_PE_udata2: _bindgen_ty_29 = 2;
pub const DW_EH_PE_udata4: _bindgen_ty_29 = 3;
pub const DW_EH_PE_udata8: _bindgen_ty_29 = 4;
pub const DW_EH_PE_sleb128: _bindgen_ty_29 = 9;
pub const DW_EH_PE_sdata2: _bindgen_ty_29 = 10;
pub const DW_EH_PE_sdata4: _bindgen_ty_29 = 11;
pub const DW_EH_PE_sdata8: _bindgen_ty_29 = 12;
pub const DW_EH_PE_signed: _bindgen_ty_29 = 8;
pub const DW_EH_PE_pcrel: _bindgen_ty_29 = 16;
pub const DW_EH_PE_textrel: _bindgen_ty_29 = 32;
pub const DW_EH_PE_datarel: _bindgen_ty_29 = 48;
pub const DW_EH_PE_funcrel: _bindgen_ty_29 = 64;
pub const DW_EH_PE_aligned: _bindgen_ty_29 = 80;
pub const DW_EH_PE_indirect: _bindgen_ty_29 = 128;
pub type _bindgen_ty_29 = ::std::os::raw::c_uint;
